{"meta":{"title":"咸鱼小屋","subtitle":"乘上与平时相反的列车，为了去见从未见过的风景","description":null,"author":"eee_hoho","url":"https://sdlang.ml","root":"/"},"pages":[{"title":"关于我","date":"2019-08-27T00:39:55.000Z","updated":"2019-10-22T10:50:30.400Z","comments":true,"path":"about/index.html","permalink":"https://sdlang.ml/about/index.html","excerpt":"","text":"我名叫lrz，16岁。住在slyz东北部的多层区一带，未婚。我在时来运转机房服务。每天都要加班到晚上10点才能回家。我不抽烟，酒仅止于浅尝。晚上11点睡，每天要睡足7个小时。睡前，我一定喝一杯温牛奶，然后做20分钟的柔软操，上了床，马上熟睡。一觉到天亮，早上起来就像婴儿一样不带任何疲劳和压力迎接第二天。体检没有任何异常。我在向你说明我是一直希望保持内心平静生活的人，不执著于胜负，不纠结于烦恼，不树立让我夜不能寐的敌人，这就是我对社会的态度，也知道这是我的幸福。不过就算打起来我也不会输给任何人就是了。也就是说胖重，你是妨碍我睡眠的一个麻烦，也就是我的敌人。eee_hoho是我为他起的名字。 lrz菜得很，如果不嫌弃的话可以加他QQ1393581196跟他∩流qwq"},{"title":"categories","date":"2018-01-23T09:14:51.000Z","updated":"2019-10-22T10:46:18.801Z","comments":true,"path":"categories/index.html","permalink":"https://sdlang.ml/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-01-23T09:14:51.000Z","updated":"2019-10-22T10:46:14.785Z","comments":true,"path":"tags/index.html","permalink":"https://sdlang.ml/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-27T00:34:58.000Z","updated":"2019-08-27T00:39:04.673Z","comments":true,"path":"关于我/index-1.html","permalink":"https://sdlang.ml/关于我/index-1.html","excerpt":"","text":""},{"title":"近期任务","date":"2020-01-19T08:49:18.914Z","updated":"2020-01-19T08:49:18.914Z","comments":true,"path":"task/index.html","permalink":"https://sdlang.ml/task/index.html","excerpt":"","text":"省赛回来咕了好久，该准备省选了，现在技能树主要应该点：多项式和生成函数、计算几何、网络流、计数、高级数据结构"},{"title":"","date":"2019-08-27T00:34:56.000Z","updated":"2019-08-27T00:39:10.678Z","comments":true,"path":"关于我/index.html","permalink":"https://sdlang.ml/关于我/index.html","excerpt":"","text":""},{"title":"关于我","date":"2019-08-27T00:35:16.000Z","updated":"2019-08-27T00:39:29.462Z","comments":true,"path":"关于我/index-2.html","permalink":"https://sdlang.ml/关于我/index-2.html","excerpt":"","text":"eee_hoho非常的弱，可以加他QQ1393581196和他交流QAQ"},{"title":"","date":"2019-10-22T03:49:54.245Z","updated":"2019-08-25T08:09:18.619Z","comments":true,"path":"lib/needsharebutton/README.html","permalink":"https://sdlang.ml/lib/needsharebutton/README.html","excerpt":"","text":"NeedMoreShare2 for NexT Installation Visit hexo-next-share for more information."},{"title":"","date":"2019-10-22T03:49:54.245Z","updated":"2019-08-25T08:09:18.619Z","comments":true,"path":"lib/needsharebutton/needsharebutton.css","permalink":"https://sdlang.ml/lib/needsharebutton/needsharebutton.css","excerpt":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ /* Social icons font ***********************************************/ /* SOCIAL ICON */ @font-face { font-family: 'social-icons'; font-weight: normal; font-style: normal; src: url('font/social.eot?44259375'); src: url('font/social.eot?44259375#iefix') format('embedded-opentype'), url('font/social.woff?44259375') format('woff'), url('font/social.ttf?44259375') format('truetype'), url('font/social.svg?44259375#social') format('svg'); } @font-face { font-family: 'social-icons'; src: url('data:application/font-woff;charset=utf-8;base64,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') format('woff'), url('data:application/font-ttf;charset=utf-8;base64,') format('truetype'); } .need-share-button_dropdown [class^=\"social-\"]:before, .need-share-button_dropdown [class*=\" social-\"]:before { font-family: \"social-icons\"; font-style: normal; font-weight: normal; speak: none; display: inline-block; text-decoration: inherit; width: 1em; margin-right: .2em; text-align: center; /* opacity: .8; */ /* For safety - reset parent styles, that can break glyph codes*/ font-variant: normal; text-transform: none; /* fix buttons height, for twitter bootstrap */ line-height: 1em; /* Animation center compensation - margins should be symmetric */ /* remove if not needed */ margin-left: .2em; /* you can be more comfortable with increased icons size */ /* font-size: 120%; */ /* Uncomment for 3D effect */ /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */ } .social-mailto:before { content: '\\e80a'; } .social-twitter:before { content: '\\e813'; } .social-pinterest:before { content: '\\e80f'; } .social-facebook:before { content: '\\e80e'; } .social-googleplus:before { content: '\\e80d'; } .social-reddit:before { content: '\\e810'; } .social-linkedin:before { content: '\\e80c'; } .social-tumblr:before { content: '\\e812'; } .social-evernote:before { content: '\\e801'; } .social-delicious:before { content: '\\e815'; } .social-stumbleupon:before { content: '\\e811'; } .social-googlebookmarks:before { content: '\\e80b'; } .social-newsvine:before { content: '\\e803'; } .social-friendfeed:before { content: '\\e802'; } .social-vkontakte:before { content: '\\e814'; } .social-odnoklassniki:before { content: '\\e804'; } .social-mailru:before { content: '\\e800'; } /* FONTELLO ICON */ @font-face { font-family: 'fontello'; src: url('../font/fontello.eot?34242489'); src: url('../font/fontello.eot?34242489#iefix') format('embedded-opentype'), url('../font/fontello.svg?34242489#fontello') format('svg'); font-weight: normal; font-style: normal; } @font-face { font-family: 'fontello'; src: url('data:application/octet-stream;base64,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') format('woff'), url('data:application/octet-stream;base64,') format('truetype'); } /* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */ /* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */ /* @media screen and (-webkit-min-device-pixel-ratio:0) { @font-face { font-family: 'fontello'; src: url('../font/fontello.svg?13586373#fontello') format('svg'); } } */ .need-share-button_dropdown [class^=\"icon-\"]:before, .need-share-button_dropdown [class*=\" icon-\"]:before { font-family: \"fontello\"; font-style: normal; font-weight: normal; speak: none; display: inline-block; text-decoration: inherit; width: 1em; margin-right: .2em; text-align: center; /* opacity: .8; */ /* For safety - reset parent styles, that can break glyph codes*/ font-variant: normal; text-transform: none; /* fix buttons height, for twitter bootstrap */ line-height: 1em; /* Animation center compensation - margins should be symmetric */ /* remove if not needed */ margin-left: .2em; /* you can be more comfortable with increased icons size */ /* font-size: 120%; */ /* Uncomment for 3D effect */ /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */ } .icon-weibo:before { content: '\\e82b'; } /* '' */ .icon-renren:before { content: '\\f18b'; } /* '' */ .icon-qqzone:before { content: '\\f1d6'; } /* '' */ .icon-wechat:before { content: '\\f1d7'; } /* '' */ /* Need Share Button ***********************************************/ .need-share-button { position: relative; } .need-share-button-opened { position: relative; } .need-share-button-opened img.need-share-wechat-code-image { display: block; width: 100%; max-width: 200px; margin: 10px auto; } .need-share-button_dropdown { position: absolute; z-index: 10; visibility: hidden; overflow: hidden; width: 300px; font-size: 16px; -webkit-transition: .3s; transition: .3s; -webkit-transform: scale(.1); -ms-transform: scale(.1); transform: scale(.1); text-align: center; white-space: normal; opacity: 0; -webkit-border-radius: 4px; border-radius: 4px; background-color: #fff; -webkit-box-shadow: 0 0 2px rgba(0, 0, 0, .5); box-shadow: 0 0 2px rgba(0, 0, 0, .5); } .need-share-button-opened .need-share-button_dropdown { visibility: visible; -webkit-transform: scale(1); -ms-transform: scale(1); transform: scale(1); opacity: 1; } .need-share-button_dropdown-box-vertical, .need-share-button_dropdown-box-horizontal { -webkit-border-radius: 0; border-radius: 0; } .need-share-button_dropdown-box-vertical { width: 50px; } .need-share-button_dropdown-box-horizontal { width: auto; white-space: nowrap; } .need-share-button_link { display: inline-block; width: 50px; height: 50px; line-height: 50px; cursor: pointer; text-align: center; } .need-share-button_link:hover { -webkit-transition: .3s; transition: .3s; opacity: .7; } /* Dropdown position ***********************************************/ .need-share-button_dropdown-top-left { right: 100%; bottom: 100%; margin-right: 10px; margin-bottom: 10px; } .need-share-button_dropdown-top-right { bottom: 100%; left: 100%; margin-bottom: 10px; margin-left: 10px; } .need-share-button_dropdown-top-center { bottom: 100%; left: 50%; margin-bottom: 10px; } .need-share-button_dropdown-middle-left { top: 50%; right: 100%; margin-right: 10px; } .need-share-button_dropdown-middle-right { bottom: 0; left: 100%; margin-left: 10px; } .need-share-button_dropdown-bottom-left { top: 100%; right: 100%; margin-top: 10px; margin-right: 10px; } .need-share-button_dropdown-bottom-right { top: 100%; left: 100%; margin-top: 10px; margin-left: 10px; } .need-share-button_dropdown-bottom-center { top: 100%; left: 50%; margin-top: 10px; } /* Default theme ***********************************************/ .need-share-button-default { display: inline-block; margin-bottom: 0; padding: 6px 12px; font-size: 14px; line-height: 1.42857143; font-weight: 400; color: #333; cursor: pointer; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; text-align: center; vertical-align: middle; border: 1px solid #ccc; -webkit-border-radius: 4px; border-radius: 4px; background-color: #fff; } /* Network buttons ***********************************************/ .need-share-button_wechat { color: #a2dc30; } .need-share-button_wechat.need-share-button_link-box { color: #fff; background: #a2dc30; } .need-share-button_weibo { color: #d52b2b; } .need-share-button_weibo.need-share-button_link-box { color: #fff; background: #d52b2b; } .need-share-button_douban { color: #072; } .need-share-button_douban:before { content: '豆'; } .need-share-button_douban.need-share-button_link-box { color: #fff; background: #072; } .need-share-button_qqzone { color: #ffce00; } .need-share-button_qqzone.need-share-button_link-box { color: #fff; background: #ffce00; } .need-share-button_renren { color: #207cc5; } .need-share-button_renren.need-share-button_link-box { color: #fff; background: #207cc5; } .need-share-button_mailto { color: #efbe00; } .need-share-button_mailto.need-share-button_link-box { color: #fff; background: #efbe00; } .need-share-button_twitter { color: #00acec; } .need-share-button_twitter.need-share-button_link-box { color: #fff; background: #00acec; } .need-share-button_pinterest { color: #cd2027; } .need-share-button_pinterest.need-share-button_link-box { color: #fff; background: #cd2027; } .need-share-button_facebook { color: #3b5998; } .need-share-button_facebook.need-share-button_link-box { color: #fff; background: #3b5998; } .need-share-button_googleplus { color: #d44132; } .need-share-button_googleplus.need-share-button_link-box { color: #fff; background: #d44132; } .need-share-button_reddit { color: #000; } .need-share-button_reddit.need-share-button_link-box { color: #fff; background: #000; } .need-share-button_delicious { color: #000; } .need-share-button_delicious.need-share-button_link-box { color: #fff; background: #000; } .need-share-button_stumbleupon { color: #f04e23; } .need-share-button_stumbleupon.need-share-button_link-box { color: #fff; background: #f04e23; } .need-share-button_linkedin { color: #0085af; } .need-share-button_linkedin.need-share-button_link-box { color: #fff; background: #0085af; } .need-share-button_tumblr { color: #34465d; } .need-share-button_tumblr.need-share-button_link-box { color: #fff; background: #34465d; } .need-share-button_googlebookmarks { color: #fde331; } .need-share-button_googlebookmarks.need-share-button_link-box { color: #fff; background: #fde331; } .need-share-button_newsvine { color: #03652c; } .need-share-button_newsvine.need-share-button_link-box { color: #fff; background: #03652c; } .need-share-button_evernote { color: #79d626; } .need-share-button_evernote.need-share-button_link-box { color: #fff; background: #79d626; } .need-share-button_friendfeed { color: #b0cbe9; } .need-share-button_friendfeed.need-share-button_link-box { color: #fff; background: #b0cbe9; } .need-share-button_vkontakte { color: #4c75a3; } .need-share-button_vkontakte.need-share-button_link-box { color: #fff; background: #4c75a3; } .need-share-button_odnoklassniki { color: #ed812b; } .need-share-button_odnoklassniki.need-share-button_link-box { color: #fff; background: #ed812b; } .need-share-button_mailru { color: #f89c0e; } .need-share-button_mailru.need-share-button_link-box { color: #fff; background: #f89c0e; }"},{"title":"","date":"2019-10-22T03:49:54.245Z","updated":"2019-08-25T08:09:18.620Z","comments":true,"path":"lib/needsharebutton/needsharebutton.js","permalink":"https://sdlang.ml/lib/needsharebutton/needsharebutton.js","excerpt":"","text":"/*********************************************** needShareButton - Version 1.0.0 - Copyright 2015 Dzmitry Vasileuski - Licensed under MIT (http://opensource.org/licenses/MIT) ***********************************************/ (function () { // find closest function closest(elem, parent) { if (typeof (parent) == \"string\") { var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector; if (!!matchesSelector) { while (elem) { if (matchesSelector.bind(elem)(parent)) { return elem; } else { elem = elem.parentElement; } } } return false; } else { while (elem) { if (elem == parent) { return elem; } else { elem = elem.parentElement; } } return false; } } // share button class window.needShareButton = function (elem, options) { // create element reference var root = this; root.elem = elem || \"need-share-button\"; /* Helpers ***********************************************/ // get title from html root.getTitle = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"title\"); if (content) { return content.innerText; } } return document.title; }; // get image from html root.getImage = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"meta[property=\\\"og:image\\\"]\") || document.querySelector(\"meta[name=\\\"twitter:image\\\"]\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } else { return \"\"; } }; // get description from html root.getDescription = function () { var content; // check querySelector existance for old browsers if (document.querySelector) { content = document.querySelector(\"meta[property=\\\"og:description\\\"]\") || document.querySelector(\"meta[name=\\\"twitter:description\\\"]\") || document.querySelector(\"meta[name=\\\"description\\\"]\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } else { content = document.getElementsByTagName(\"meta\").namedItem(\"description\"); if (content) { return content.getAttribute(\"content\"); } else { return \"\"; } } }; // share urls for all networks root.share = { \"weibo\": function (el) { var myoptions = getOptions(el); var url = \"http://v.t.sina.com.cn/share/share.php?title=\" + encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url) + \"&pic=\" + encodeURIComponent(myoptions.image); root.popup(url); }, \"wechat\": function (el) { var myoptions = getOptions(el); var imgSrc = \"https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=\" + encodeURIComponent(myoptions.url); var dropdownEl = el.querySelector(\".need-share-button_dropdown\"); var img = dropdownEl.getElementsByClassName(\"need-share-wechat-code-image\")[0]; if (img) { img.remove(); } else { img = document.createElement(\"img\"); img.src = imgSrc; img.alt = \"loading wechat image...\"; img.setAttribute(\"class\", \"need-share-wechat-code-image\"); if (root.options.position == 'middleRight') { dropdownEl.insertBefore(img, dropdownEl.children[0]); } else { dropdownEl.appendChild(img); } } }, \"douban\": function (el) { var myoptions = getOptions(el); var url = \"https://www.douban.com/share/service?name=\" + encodeURIComponent(myoptions.title) + \"&href=\" + encodeURIComponent(myoptions.url) + \"&image=\" + encodeURIComponent(myoptions.image); root.popup(url); }, \"qqzone\": function (el) { var myoptions = getOptions(el); var url = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?title=\" + encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url) + \"&pics=\" + encodeURIComponent(myoptions.image) + \"&desc=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"renren\": function (el) { var myoptions = getOptions(el); var url = \"http://widget.renren.com/dialog/share?title=\" + encodeURIComponent(myoptions.title) + \"&resourceUrl=\" + encodeURIComponent(myoptions.url) + \"&pic=\" + encodeURIComponent(myoptions.image) + \"&description=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"mailto\": function (el) { var myoptions = getOptions(el); var url = \"mailto:?subject=\" + encodeURIComponent(myoptions.title) + \"&body=Thought you might enjoy reading this: \" + encodeURIComponent(myoptions.url) + \" - \" + encodeURIComponent(myoptions.description); window.location.href = url; }, \"twitter\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"twitter.com/intent/tweet?text=\"; url += encodeURIComponent(myoptions.title) + \"&url=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"pinterest\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"pinterest.com/pin/create/bookmarklet/?is_video=false\"; url += \"&media=\" + encodeURIComponent(myoptions.image); url += \"&url=\" + encodeURIComponent(myoptions.url); url += \"&description=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"facebook\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.facebook.com/share.php?\"; url += \"u=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"googleplus\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"plus.google.com/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"reddit\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.reddit.com/submit?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"delicious\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"del.icio.us/post?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&notes=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"stumbleupon\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.stumbleupon.com/submit?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"linkedin\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.linkedin.com/shareArticle?mini=true\"; url += \"&url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&source=\" + encodeURIComponent(myoptions.source); root.popup(url); }, \"tumblr\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.tumblr.com/share?v=3\"; url += \"&u=\" + encodeURIComponent(myoptions.url); url += \"&t=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"googlebookmarks\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.google.com/bookmarks/mark?op=edit\"; url += \"&bkmk=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&annotation=\" + encodeURIComponent(myoptions.description); root.popup(url); }, \"newsvine\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.newsvine.com/_tools/seed&save?\"; url += \"u=\" + encodeURIComponent(myoptions.url); url += \"&h=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"evernote\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.evernote.com/clip.action?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"friendfeed\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.friendfeed.com/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); root.popup(url); }, \"vkontakte\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"vkontakte.ru/share.php?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&description=\" + encodeURIComponent(myoptions.description); url += \"&image=\" + encodeURIComponent(myoptions.image); url += \"&noparse=true\"; root.popup(url); }, \"odnoklassniki\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"www.odnoklassniki.ru/dk?st.cmd=addShare&st.s=1\"; url += \"&st.comments=\" + encodeURIComponent(myoptions.description); url += \"&st._surl=\" + encodeURIComponent(myoptions.url); root.popup(url); }, \"mailru\": function (el) { var myoptions = getOptions(el); var url = myoptions.protocol + \"connect.mail.ru/share?\"; url += \"url=\" + encodeURIComponent(myoptions.url); url += \"&title=\" + encodeURIComponent(myoptions.title); url += \"&description=\" + encodeURIComponent(myoptions.description); url += \"&imageurl=\" + encodeURIComponent(myoptions.image); root.popup(url); } }; // open share link in a popup root.popup = function (url) { // set left and top position var popupWidth = 600, popupHeight = 500, // fix dual screen mode dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left, dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top, width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width, height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height, // calculate top and left position left = ((width / 2) - (popupWidth / 2)) + dualScreenLeft, top = ((height / 2) - (popupHeight / 2)) + dualScreenTop, // show popup shareWindow = window.open(url, \"targetWindow\", \"toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=\" + popupWidth + \", height=\" + popupHeight + \", top=\" + top + \", left=\" + left); // Puts focus on the newWindow if (window.focus) { shareWindow.focus(); } }; /* Set options ***********************************************/ // create default options root.options = { iconStyle: \"default\", // default or box boxForm: \"horizontal\", // horizontal or vertical position: \"bottomCenter\", // top / middle / bottom + Left / Center / Right protocol: [\"http\", \"https\"].indexOf(window.location.href.split(\":\")[0]) === -1 ? \"https://\" : \"//\", networks: \"Weibo,Wechat,Douban,QQZone,Twitter,Pinterest,Facebook,GooglePlus,Reddit,Linkedin,Tumblr,Evernote\" }; // integrate custom options for (var i in options) { if (options.hasOwnProperty(i)) { root.options[i] = options[i]; } } // convert networks string into array //root.options.networks = root.options.networks.toLowerCase().split(\",\"); root.options.networks = root.options.networks.split(\",\"); function getOptions(el) { // integrate data attribute options var ret = {}; for (var i in root.options) { if (root.options.hasOwnProperty(i)) { ret[i] = root.options[i]; } } // these attrs must get dynamically. ret.url = window.location.href; ret.title = root.getTitle(); ret.image = root.getImage(); ret.description = root.getDescription(); for (var option in el.dataset) { // replace only 'share-' prefixed data-attributes if (option.match(/share/)) { var newOption = option.replace(/share/, \"\"); if (!newOption.length) { continue; } newOption = newOption.charAt(0).toLowerCase() + newOption.slice(1); var val = el.dataset[option]; if (newOption === \"networks\") { //val = val.toLowerCase().split(\",\"); val = val.split(\",\"); } else if (newOption === \"url\" && val && val[0] === \"/\") { // fix relative url problem. val = location.origin + val; } ret[newOption] = val; } } return ret; } function createDropdown(el) { // create dropdown var dropdownEl = document.createElement(\"span\"); dropdownEl.className = \"need-share-button_dropdown\"; if (el.querySelector(\".need-share-button_dropdown\")) { return; } var myoptions = getOptions(el); // set dropdown row length if (myoptions.iconStyle == \"default\" && myoptions.boxForm == \"vertical\") { dropdownEl.className += \" need-share-button_dropdown-box-vertical\"; } else if (myoptions.iconStyle == \"box\" && myoptions.boxForm == \"horizontal\") { dropdownEl.className += \" need-share-button_dropdown-box-horizontal\"; } else if (myoptions.iconStyle == \"box\" && myoptions.boxForm == \"vertical\") { dropdownEl.className += \" need-share-button_dropdown-box-vertical\"; } // set dropdown position setTimeout(function () { switch (myoptions.position) { case \"topLeft\": dropdownEl.className += \" need-share-button_dropdown-top-left\"; break; case \"topRight\": dropdownEl.className += \" need-share-button_dropdown-top-right\"; break; case \"topCenter\": dropdownEl.className += \" need-share-button_dropdown-top-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; case \"middleLeft\": dropdownEl.className += \" need-share-button_dropdown-middle-left\"; dropdownEl.style.marginTop = -dropdownEl.offsetHeight / 2 + \"px\"; break; case \"middleRight\": dropdownEl.className += \" need-share-button_dropdown-middle-right\"; dropdownEl.style.marginTop = -dropdownEl.offsetHeight / 2 + \"px\"; break; case \"bottomLeft\": dropdownEl.className += \" need-share-button_dropdown-bottom-left\"; break; case \"bottomRight\": dropdownEl.className += \" need-share-button_dropdown-bottom-right\"; break; case \"bottomCenter\": dropdownEl.className += \" need-share-button_dropdown-bottom-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; default: dropdownEl.className += \" need-share-button_dropdown-bottom-center\"; dropdownEl.style.marginLeft = -dropdownEl.offsetWidth / 2 + \"px\"; break; } }, 1); // fill fropdown with buttons var iconClass = myoptions.iconStyle == \"default\" ? \"need-share-button_link need-share-button_\" : \"need-share-button_link-\" + myoptions.iconStyle + \" need-share-button_link need-share-button_\"; for (var network in myoptions.networks) { if (myoptions.networks.hasOwnProperty(network)) { var link = document.createElement(\"span\"); network = myoptions.networks[network].trim(); var networkLC = network.toLowerCase(); link.className = iconClass + networkLC; var fontello = [\"weibo\", \"wechat\", \"douban\", \"qqzone\", \"renren\"]; if (fontello.indexOf(networkLC) === -1) { link.className += \" social-\" + networkLC; } else { link.className += \" icon-\" + networkLC; } link.dataset.network = networkLC; link.title = network; dropdownEl.appendChild(link); } } dropdownEl.addEventListener(\"click\", function (event) { if (closest(event.target, \".need-share-button_link\")) { event.preventDefault(); event.stopPropagation(); root.share[event.target.dataset.network](el); return false; } }); el.appendChild(dropdownEl); } // close on click outside document.addEventListener(\"click\", function (event) { var openedEl = document.querySelector(\".need-share-button-opened\"); if (!closest(event.target, \".need-share-button-opened\")) { if (openedEl) { openedEl.classList.remove(\"need-share-button-opened\"); // hide wechat code image when close the dropdown. if (openedEl.querySelector(\".need-share-wechat-code-image\")) { openedEl.querySelector(\".need-share-wechat-code-image\").remove(); } } else { var el = closest(event.target, root.elem); if (el) { if (!el.classList.contains(\"need-share-button-opened\")) { createDropdown(el); setTimeout(function () { el.classList.add(\"need-share-button-opened\"); }, 1); } } } } else { setTimeout(function () { openedEl.classList.remove(\"need-share-button-opened\"); // hide wechat code image when close the dropdown. if (openedEl.querySelector(\".need-share-wechat-code-image\")) { openedEl.querySelector(\".need-share-wechat-code-image\").remove(); } }, 1); } }); }; })();"}],"posts":[{"title":"计算几何","slug":"geometry","date":"2020-01-18T16:00:00.000Z","updated":"2020-01-20T08:08:27.718Z","comments":true,"path":"2020/01/19/geometry/","link":"","permalink":"https://sdlang.ml/2020/01/19/geometry/","excerpt":"超级全的计算几何全家桶~","text":"超级全的计算几何全家桶~ 好久没写博客了= = 正好刚听学长讲了计算几何，就收录下一些相关操作吧 图形存储 点：我们可以直接存储x,y坐标或x,y,z坐标 向量：起点在原点的向量用x,y坐标或x,y,z坐标表示，任意一个向量可以用两个向量相减的形式表示 1234struct node //或Vector&#123; double x,y;&#125;; 直线：用两个点或一个点和一个向量的形式 1234struct line //直线&#123; node p,v;&#125;; 多边形：按顺时针或逆时针把点存起来，相邻点有连线 12345struct polygon //多边形&#123; int n; //边数 node p[N + 5]; //点&#125;; 误差避免 计算机存储浮点数会有些许误差，所以一般我们设一个很小的数$eps=10^{-6}$来避免误差 123456789101112const double eps = 1e-6;int com(double a,double b) //比较a和b的大小&#123; double x = a - b; if (fabs(x) &lt; eps) return 0; else if (x &gt; 0) return 1; else return -1;&#125; 基础计算后面的$\\vec{a},\\vec{b}$均为$\\vec{a}=(x_1,y_1),\\vec{b}=(x_2,y_2)$，直线$l_1,l_2$均为$\\vec{p_1}+t\\vec{v_1},\\vec{p_2}+t\\vec{v_2}$ 两点之间距离：$dist=\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}$ 1234double dist(node a,node b) //两点之间的距离&#123; return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));&#125; 向量加、减、数乘、数除：x,y对应操作就行了 12345678910111213141516node operator +(const node &amp;a,const node &amp;b)&#123; return (node)&#123;a.x + b.x,a.y + b.y&#125;;&#125;node operator -(const node &amp;a,const node &amp;b)&#123; return (node)&#123;a.x - b.x,a.y - b.y&#125;;&#125;node operator *(const node &amp;a,const double &amp;b)&#123; return (node)&#123;a.x * b,a.y * b&#125;;&#125;node operator /(const node &amp;a,const double &amp;b)&#123; return (node)&#123;a.x / b,a.y / b&#125;;&#125; 点乘：$dot(\\vec{a},\\vec{b})=x_1\\cdot x_2+y_1\\cdot y_2=|\\vec{a}|\\cdot|\\vec{b}|\\cdot \\cos\\left \\langle\\vec{a},\\vec{b}\\right \\rangle$ 1234double dot(node a,node b) //点乘&#123; return a.x * b.x + a.y * b.y;&#125; 模长：$|\\vec{a}|=\\sqrt{|dot(\\vec{a},\\vec{a})|}$ 1234double molen(node a) //模长&#123; return sqrt(fabs(dot(a,a)));&#125; 叉积：$cross(\\vec{a},\\vec{b})=x_1\\cdot y_2-x_2\\cdot y_1=|\\vec{a}|\\cdot|\\vec{b}|\\cdot \\sin\\left \\langle\\vec{a},\\vec{b}\\right \\rangle$ 1234double cross(node a,node b) //叉积&#123; return a.x * b.y - a.y * b.x;&#125; 向量旋转$\\alpha$弧度：$x’=x\\cos\\alpha-y\\sin\\alpha,y’=x\\sin\\alpha+y\\cos\\alpha$ 1234node rot(node x,double a) //旋转&#123; return (node)&#123;x.x * cos(a) - x.y * sin(a),x.x * sin(a) + x.y * cos(a)&#125;;&#125; 直线交点：由方程算出交点在任何一条直线上的$t$，再算交点，设$\\vec{u}=\\vec{p_1}-\\vec{p_2},t_1=\\frac{cross(\\vec{v_1},\\vec{u})}{cross(\\vec{v_1},\\vec{v_2})}$，交点即为$\\vec{p_1}+t_1\\vec{v_1}$ 123456node linepoint(line a,line b) //直线交点&#123; node u = a.p - b.p; double t = cross(a.v,u) / cross(a.v,b.v); return a.p + a.v * t;&#125; 点到直线的距离：在直线任取两个点用等积法求高 12345double pointlinedist(node a,line l) //点到直线的距离&#123; node x = l.p + l.v * 2.33,y = l.p + l.v * 6.66; return fabs(cross(a - x,y - x)) / molen(x - y);&#125; 点到线段的距离：要分两种情况讨论 过点的垂线不过线段：距离为点和线段端点的连线长度 过点的垂线过线段：距离就是垂线长度 至于怎么判断：利用点乘的性质(夹角小于$90^\\circ$为正否则为负)，设线段两端点为$A,B$，线段外的点为$C$，若$dot(\\vec{AC},\\vec{AB})0$（反向），则为情况1，否则为情况2 1234567891011double pointline_Seg(node c,node a,node b) //点到线段的距离&#123; node l1 = b - a,l2 = c - a,l3 = c - b; if (com(dot(l1,l2),0) &lt; 0) return molen(l2); else if (com(dot(l1,l3),0) &gt; 0) return molen(l3); else return fabs(cross(l1,l2)) / molen(l1);&#125; 多边形面积计算：将一个有$n$个边的划分成$n-2$个三角形，然后算面积（也就是叉积）的和，注意叉积不能取绝对值，要最后取绝对值，因为对于凹多边形会有多算的面积 1234567double polygon_S(polygon a)&#123; double s = 0; for (int i = 1;i &lt; a.n - 1;i++) s += cross(a.p[i + 1] - a.p[1],a.p[i + 2] - a.p[1]) / 2; return fabs(s);&#125; 先写这么多吧QAQ，有空以后补上","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://sdlang.ml/categories/学习笔记/"}],"tags":[{"name":"计算几何","slug":"计算几何","permalink":"https://sdlang.ml/tags/计算几何/"}]},{"title":"P2473 [SCOI2008]奖励关","slug":"p2473","date":"2019-10-31T16:00:00.000Z","updated":"2020-01-21T07:41:06.321Z","comments":true,"path":"2019/11/01/p2473/","link":"","permalink":"https://sdlang.ml/2019/11/01/p2473/","excerpt":"你正在玩你最喜欢的电子游戏，并且刚刚进入一个奖励关。在这个奖励关里，系统将依次随机抛出k次宝物，每次你都可以选择吃或者不吃（必须在抛出下一个宝物之前做出选择，且现在决定不吃的宝物以后也不能再吃）。 宝物一共有n种，系统每次抛出这n种宝物的概率都相同且相互独立。也就是说，即使前k-1 次系统都抛出宝物1（这种情况是有可能出现的，尽管概率非常小），第k次抛出各个宝物的概率依然均为1/n。 获取第 i 种宝物将得到Pi分，但并不是每种宝物都是可以随意获取的。第i种宝物有一个前提宝物集合Si。只有当Si中所有宝物都至少吃过一次，才能吃第i 种宝物（如果系统抛出了一个目前不能吃的宝物，相当于白白的损失了一次机会）。注意，Pi 可以是负数，但如果它是很多高分宝物的前提，损失短期利益而吃掉这个负分宝物将获得更大的长期利益。 假设你采取最优策略，平均情况你一共能在奖励关得到多少分值？","text":"你正在玩你最喜欢的电子游戏，并且刚刚进入一个奖励关。在这个奖励关里，系统将依次随机抛出k次宝物，每次你都可以选择吃或者不吃（必须在抛出下一个宝物之前做出选择，且现在决定不吃的宝物以后也不能再吃）。 宝物一共有n种，系统每次抛出这n种宝物的概率都相同且相互独立。也就是说，即使前k-1 次系统都抛出宝物1（这种情况是有可能出现的，尽管概率非常小），第k次抛出各个宝物的概率依然均为1/n。 获取第 i 种宝物将得到Pi分，但并不是每种宝物都是可以随意获取的。第i种宝物有一个前提宝物集合Si。只有当Si中所有宝物都至少吃过一次，才能吃第i 种宝物（如果系统抛出了一个目前不能吃的宝物，相当于白白的损失了一次机会）。注意，Pi 可以是负数，但如果它是很多高分宝物的前提，损失短期利益而吃掉这个负分宝物将获得更大的长期利益。 假设你采取最优策略，平均情况你一共能在奖励关得到多少分值？ 因为n很小，所以我们可以想到状压，于是设$f_{i,s}$表示到了第i轮并且现在选的物品是集合s时的最大期望 但是因为吃物品有先决条件，所以要多计算很多的概率 所以我们考虑倒推，这样子$f_{i,s}$变成了前i-1轮选的物品集合是s，那么i~k轮的最大期望 这个东西看起来是非常好转移的，转移方程就为 如果这个物品j可以吃，也就是$s\\&amp;pr_j=pr_j$，那么可以吃或者不吃，就有$f_{i,s}+=max(f_{i+1,s},f_{i+1,s|(1&lt;&lt;j-1)}+p_j)$ p是分数 如果不能吃，那么久只能$f_{i,s}+=f_{i+1,s}$ 复杂度$O(k2^nn)$ Code1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;const int N = 15;const int K = 100;using namespace std;int n,k,p[N + 5],pr[N + 5];double f[K + 5][1 &lt;&lt; N + 1];int main()&#123; scanf(\"%d%d\",&amp;k,&amp;n); int x; for (int i = 1;i &lt;= n;i++) &#123; scanf(\"%d\",&amp;p[i]); scanf(\"%d\",&amp;x); while (x != 0) &#123; pr[i] |= 1 &lt;&lt; x - 1; scanf(\"%d\",&amp;x); &#125; &#125; for (int i = k;i &gt;= 1;i--) for (int s = 0;s &lt; (1 &lt;&lt; n);s++) &#123; for (int j = 1;j &lt;= n;j++) if ((s &amp; pr[j]) == pr[j]) f[i][s] += max(f[i + 1][s],f[i + 1][s | (1 &lt;&lt; j - 1)] + 1.0 * p[j]) / n; else f[i][s] += f[i + 1][s] / n; &#125; printf(\"%.6lf\",f[1][0]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"状压dp","slug":"状压dp","permalink":"https://sdlang.ml/tags/状压dp/"},{"name":"期望","slug":"期望","permalink":"https://sdlang.ml/tags/期望/"}]},{"title":"洛谷 P3586 [POI2015]LOG","slug":"p3586","date":"2019-10-31T16:00:00.000Z","updated":"2019-11-01T03:14:03.320Z","comments":true,"path":"2019/11/01/p3586/","link":"","permalink":"https://sdlang.ml/2019/11/01/p3586/","excerpt":"维护一个长度为n的序列，一开始都是0，支持以下两种操作：1.U k a 将序列中第k个数修改为a。2.Z c s 在这个序列上，每次选出c个正数，并将它们都减去1，询问能否进行s次操作。每次询问独立，即每次询问不会对序列进行修改。","text":"维护一个长度为n的序列，一开始都是0，支持以下两种操作：1.U k a 将序列中第k个数修改为a。2.Z c s 在这个序列上，每次选出c个正数，并将它们都减去1，询问能否进行s次操作。每次询问独立，即每次询问不会对序列进行修改。 这个题看起来很nb的样子 首先我们可以把询问转化一下 既然要进行s次，那么那些大于等于s是一定要选的，假设这些数有cnt个 再考虑比s小的，假设这些数的和为sum，有x个 那么我们要满足$sum\\ge (c-cnt)\\times s$这个条件 看起来很正确但又感觉少了点什么QAQ，我们来证明一下 因为和已经满足条件了，那么我们只需要知道每次选的数是不是能有c个就可以，也就是$x\\ge c-cnt$ 考虑c最少的情况，也就是$sum=\\sum s-1$ 那么$x=\\frac{sum}{s-1}$，所以$\\frac{sum}{s-1}\\ge c-cnt$ 移项得到$sum\\ge (c-cnt)\\times (s-1)$ 而根据原式$sum\\ge (c-cnt)\\times s$，上面这个结论就已经成立啦QAQ 所以我们只需要维护比一个数大的数有多少个，比一个数小的数的值的和就可以了 对于这个题而言，我们可以选择离散化+树状数组 Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#define LL long longconst int N = 1e6;using namespace std;struct node&#123; int opt,c,s;&#125;q[N + 5];int n,m,a[N + 5],data[N + 5],c[N + 5],mp[N + 5],na[N + 5];LL s[N + 5];char ch;int lowbit(int x)&#123; return x &amp; (-x);&#125;void addc(int k,int x)&#123; if (k == 0) return; for (;k &lt;= m;k += lowbit(k)) c[k] += x;&#125;void adds(int k,int x)&#123; if (k == 0) return; for (;k &lt;= m;k += lowbit(k)) s[k] += x;&#125;int queryc(int k)&#123; int ans = 0; for (;k;k -= lowbit(k)) ans += c[k]; return ans;&#125;LL querys(int k)&#123; LL ans = 0; for (;k;k -= lowbit(k)) ans += s[k]; return ans;&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for (int i = 1;i &lt;= m;i++) &#123; cin&gt;&gt;ch; scanf(\"%d%d\",&amp;q[i].c,&amp;q[i].s); data[i] = q[i].s; if (ch == 'U') q[i].opt = 1; else q[i].opt = 2; &#125; sort(data + 1,data + m + 1); for (int i = 1;i &lt;= m;i++) mp[i] = lower_bound(data + 1,data + m + 1,q[i].s) - data,na[mp[i]] = q[i].s; for (int i = 1;i &lt;= m;i++) &#123; if (q[i].opt == 1) &#123; addc(a[q[i].c],-1); adds(a[q[i].c],-na[a[q[i].c]]); a[q[i].c] = mp[i]; addc(a[q[i].c],1); adds(a[q[i].c],q[i].s); &#125; else &#123; int cnt = queryc(m) - queryc(mp[i] - 1); if (querys(mp[i] - 1) &gt;= 1ll * q[i].s * (q[i].c - cnt)) printf(\"TAK\\n\"); else printf(\"NIE\\n\"); &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"树状数组","slug":"树状数组","permalink":"https://sdlang.ml/tags/树状数组/"}]},{"title":"洛谷 P3554 [POI2013]LUK-Triumphal arch","slug":"p3554","date":"2019-10-29T16:00:00.000Z","updated":"2019-10-30T06:32:08.885Z","comments":true,"path":"2019/10/30/p3554/","link":"","permalink":"https://sdlang.ml/2019/10/30/p3554/","excerpt":"给一颗树，1号节点已经被染黑，其余是白的，两个人轮流操作，一开始B在1号节点，A选择k个点染黑，然后B走一步，如果B能走到A没染的节点则B胜，否则当A染完全部的点时，A胜。求能让A获胜的最小的k","text":"给一颗树，1号节点已经被染黑，其余是白的，两个人轮流操作，一开始B在1号节点，A选择k个点染黑，然后B走一步，如果B能走到A没染的节点则B胜，否则当A染完全部的点时，A胜。求能让A获胜的最小的k 首先我们直接二分 然后考虑怎么验证答案 对于B而言，一定是只能从根往叶子节点走的，因为如果回到父亲就相当于白走了一次，从而多让A染了色 而对于A来说，首先要染的一定是B当前所在的点的所有儿子节点 于是我们可以设$f_u$表示以u为根的子树中，u点不染色会多出来几个点没被染色 这个没被染色的意思是在B在u点时，B胜后u这棵树有多少个点没被染色，或者B是输的 理解了状态就能写出转移方程了 f_u=max(0,\\sum_{v\\in son(u)}f_v\\ +\\ to_u-x)其中x是二分的答案，$to_u$是u的儿子数 简单来说就是这棵子树中如果有没染的节点也就是$f_v$，那么这次就要染上。0表示B是输的。这样就比较好理解了QAQ 当然，在二分的时候，我们还可以确定出一个下界也就是$to_1$ Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;const int N = 3e5;using namespace std;int n,ans,f[N + 5],to[N + 5];vector &lt;int&gt; d[N + 5];void dfs(int u,int fa,int x)&#123; vector &lt;int&gt;::iterator it; int sum = 0; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa) continue; dfs(v,u,x); sum += f[v]; &#125; f[u] = max(0,to[u] + sum - x);&#125;int check(int x)&#123; dfs(1,0,x); return f[1] == 0;&#125;int main()&#123; scanf(\"%d\",&amp;n); int u,v; for (int i = 2;i &lt;= n;i++) to[i] = -1; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d\",&amp;u,&amp;v); d[u].push_back(v); d[v].push_back(u); to[u]++; to[v]++; &#125; vector &lt;int&gt;::iterator it; int l = to[1],r = n,mid; while (l &lt;= r) &#123; mid = l + r &gt;&gt; 1; if (check(mid)) r = mid - 1,ans = mid; else l = mid + 1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"二分答案","slug":"二分答案","permalink":"https://sdlang.ml/tags/二分答案/"},{"name":"树上dp","slug":"树上dp","permalink":"https://sdlang.ml/tags/树上dp/"}]},{"title":"USACO17DEC Barn Painting","slug":"p3047","date":"2019-10-27T16:00:00.000Z","updated":"2019-10-28T10:32:56.021Z","comments":true,"path":"2019/10/28/p3047/","link":"","permalink":"https://sdlang.ml/2019/10/28/p3047/","excerpt":"给你一颗大小为n&lt;=1e5的树，三种颜色，每个点涂一种颜色，相邻点不能同色。下面告诉你一些点已经被涂色，并且告诉你是哪一种颜色，问你涂完整棵树有多少种方法?mod 1e9+7。","text":"给你一颗大小为n&lt;=1e5的树，三种颜色，每个点涂一种颜色，相邻点不能同色。下面告诉你一些点已经被涂色，并且告诉你是哪一种颜色，问你涂完整棵树有多少种方法?mod 1e9+7。 考虑树上dp，设$f_{u,i}$表示以u为根的子树中，u被染成i这个颜色的方案数，于是考虑状态转移方程 如果这个点被指定染色了，那么有 f_{u,c_u}=\\prod_{v\\in son(u)}\\sum_{i=1}^3 f_{v,i}\\ (i\\ne c_u)因为假如u选了一个颜色，那么它的每个儿子都只能有两种颜色可选，先用加法原理统计儿子可选的颜色，然后再用乘法原理统计这棵子树的答案 然后可以得出未被指定颜色点的方程 \\begin{cases}f_{u,1}=\\prod_{v\\in son(u)}\\ (f_{v,2}+f_{v,3})\\\\f_{u,2}=\\prod_{v\\in son(u)}\\ (f_{v,1}+f_{v,3})\\\\f_{u,3}=\\prod_{v\\in son(u)}\\ (f_{v,1}+f_{v,2}) \\end{cases}这样就做完了QAQ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;const int N = 1e5;const int p = 1e9 + 7;using namespace std;int n,k,c[N + 5],f[N + 5][4];vector &lt;int&gt; d[N + 5];void dfs(int u,int fa)&#123; vector &lt;int&gt;::iterator it; int sum[4] = &#123;1,1,1,1&#125;; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa) continue; dfs(v,u); if (c[u]) &#123; int s = 0; for (int i = 1;i &lt;= 3;i++) if (i != c[u]) s = (s + f[v][i]) % p; sum[c[u]] = 1ll * sum[c[u]] * s % p; &#125; else for (int i = 1;i &lt;= 3;i++) &#123; int s = 0; for (int j = 1;j &lt;= 3;j++) if (i != j) s = (s + f[v][j]) % p; sum[i] = 1ll * sum[i] * s % p; &#125; &#125; if (c[u]) f[u][c[u]] = sum[c[u]]; else for (int i = 1;i &lt;= 3;i++) f[u][i] = sum[i];&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;k); int u,v; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d\",&amp;u,&amp;v); d[u].push_back(v); d[v].push_back(u); &#125; for (int i = 1;i &lt;= k;i++) &#123; scanf(\"%d%d\",&amp;u,&amp;v); c[u] = v; &#125; dfs(1,0); cout&lt;&lt;((f[1][1] + f[1][2]) % p + f[1][3]) % p&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"树上dp","slug":"树上dp","permalink":"https://sdlang.ml/tags/树上dp/"}]},{"title":"Comet OJ - Contest 13「龙颈之玉 -五色的弹丸-」","slug":"c13t3","date":"2019-10-25T16:00:00.000Z","updated":"2019-10-26T00:54:11.183Z","comments":true,"path":"2019/10/26/c13t3/","link":"","permalink":"https://sdlang.ml/2019/10/26/c13t3/","excerpt":"Gromah 最近沉迷于一款叫做 “贪吃蛇大作战” 的游戏。 给定一个 $n\\times m$ 的地图，其中有些格子是空的，有些格子上有食物。初始时贪吃蛇的头在地图中的某个格子上，且贪吃蛇初始只有一个头，每次 Gromah 会控制贪吃蛇的头朝着上下左右四个方向中的一个方向移动一个单位，如果贪吃蛇的头撞到了墙（即坐标不在 $(1,1) - (n,m)$ 范围内），则其立即死亡，否则如果贪吃蛇的头所到达的格子上有一个食物，则贪吃蛇会吃掉这个食物，然后身体立即增加 1 的长度，当然一个食物被吃掉之后就会消失。 具体地，每当进行一次移动，如果没有吃掉一个食物，则贪吃蛇在头部按照给定方向进行移动的同时，身体的每一段也朝着前一段身体的方向进行移动；如果吃掉了一个食物，则只有头部进行移动，原来身体不进行移动，原来的头部位置长出一个单位的身体，即贪吃蛇的身体增加 1 的长度。 特别地，贪吃蛇的头可以和自己的身体重合（起码游戏里是这样子的），保证贪吃蛇的初始位置上不存在食物。 现给定地图，贪吃蛇的头的初始位置，移动序列。如果贪吃蛇中途撞到了墙，则输出GG，否则如果贪吃蛇最后还活着，输出地图的最后状态，具体请见输出格式及样例输出。","text":"Gromah 最近沉迷于一款叫做 “贪吃蛇大作战” 的游戏。 给定一个 $n\\times m$ 的地图，其中有些格子是空的，有些格子上有食物。初始时贪吃蛇的头在地图中的某个格子上，且贪吃蛇初始只有一个头，每次 Gromah 会控制贪吃蛇的头朝着上下左右四个方向中的一个方向移动一个单位，如果贪吃蛇的头撞到了墙（即坐标不在 $(1,1) - (n,m)$ 范围内），则其立即死亡，否则如果贪吃蛇的头所到达的格子上有一个食物，则贪吃蛇会吃掉这个食物，然后身体立即增加 1 的长度，当然一个食物被吃掉之后就会消失。 具体地，每当进行一次移动，如果没有吃掉一个食物，则贪吃蛇在头部按照给定方向进行移动的同时，身体的每一段也朝着前一段身体的方向进行移动；如果吃掉了一个食物，则只有头部进行移动，原来身体不进行移动，原来的头部位置长出一个单位的身体，即贪吃蛇的身体增加 1 的长度。 特别地，贪吃蛇的头可以和自己的身体重合（起码游戏里是这样子的），保证贪吃蛇的初始位置上不存在食物。 现给定地图，贪吃蛇的头的初始位置，移动序列。如果贪吃蛇中途撞到了墙，则输出GG，否则如果贪吃蛇最后还活着，输出地图的最后状态，具体请见输出格式及样例输出。 这恶题想复杂了卡我好久，别人都用的队列，就我一个玩奇怪转化 队列方法就不说了，光说说我的做法 首先我们考虑移动位置是可以转化成区间加的，所以就可以把操作对x和y的贡献做一个前缀和 然后再考虑一个食物在第i个操作被吃了之后，如果之后不吃东西，它会在头后面一直跟着走，也就是会进行i+1~n这段操作 那么再考虑吃了一个食物后对身子的影响：它们会全都停顿一下，那么应该进行到n操作就只能到n-1了 这样就非常好做了，我们记录这个食物被吃的时候的操作编号i，这个食物是第几个被吃的mov 那么这个点进行的操作就是i+1~n-mov这段，然后用前缀和就能直接算出贡献了 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;const int N = 400;const int M = 1e5;using namespace std;int n,m,len,stx,sty,mov[N + 5][N + 5],cntx[M + 5],cnty[M + 5],cnt,mm[N + 5][N + 5];char ch[N + 5][N + 5],t[M + 5],ans[N + 5][N + 5];int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for (int i = 1;i &lt;= n;i++) scanf(\"%s\",ch[i] + 1); scanf(\"%s\",t + 1); len = strlen(t + 1); for (int i = 1;i &lt;= n;i++) for (int j = 1;j &lt;= m;j++) if (ch[i][j] == '@') &#123; stx = i; sty = j; &#125; for (int i = 1;i &lt;= len;i++) &#123; cntx[i] = cntx[i - 1]; cnty[i] = cnty[i - 1]; if (t[i] == 'W') cntx[i]--; if (t[i] == 'A') cnty[i]--; if (t[i] == 'S') cntx[i]++; if (t[i] == 'D') cnty[i]++; &#125; int x = stx,y = sty; for (int i = 1;i &lt;= len;i++) &#123; if (t[i] == 'W') x--; if (t[i] == 'A') y--; if (t[i] == 'S') x++; if (t[i] == 'D') y++; if (x &lt; 1 || x &gt; n || y &lt; 1 || y &gt; m) &#123; cout&lt;&lt;\"GG\"&lt;&lt;endl; return 0; &#125; if (ch[x][y] == 'o') mm[x][y] = i,mov[x][y] = ++cnt,ch[x][y] = '.'; &#125; for (int i = 1;i &lt;= n;i++) for (int j = 1;j &lt;= m;j++) ans[i][j] = ch[i][j]; ans[stx][sty] = '.'; for (int i = 1;i &lt;= n;i++) for (int j = 1;j &lt;= m;j++) if (mov[i][j]) ans[i + cntx[len - mov[i][j]] - cntx[mm[i][j]]][j + cnty[len - mov[i][j]] - cnty[mm[i][j]]] = 'X'; ans[x][y] = '@'; for (int i = 1;i &lt;= n;i++) &#123; for (int j = 1;j &lt;= m;j++) cout&lt;&lt;ans[i][j]; cout&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"前缀和","slug":"前缀和","permalink":"https://sdlang.ml/tags/前缀和/"}]},{"title":"洛谷 P1084 疫情控制","slug":"p1084","date":"2019-10-24T16:00:00.000Z","updated":"2019-10-25T10:44:41.727Z","comments":true,"path":"2019/10/25/p1084/","link":"","permalink":"https://sdlang.ml/2019/10/25/p1084/","excerpt":"H 国有 n个城市，这 n 个城市用n−1条双向道路相互连通构成一棵树，1号城市是首都，也是树中的根节点。 H国的首都爆发了一种危害性极高的传染病。当局为了控制疫情，不让疫情扩散到边境城市（叶子节点所表示的城市），决定动用军队在一些城市建立检查点，使得从首都到边境城市的每一条路径上都至少有一个检查点，边境城市也可以建立检查点。但特别要注意的是，首都是不能建立检查点的。 现在，在 H 国的一些城市中已经驻扎有军队，且一个城市可以驻扎多个军队。一支军队可以在有道路连接的城市间移动，并在除首都以外的任意一个城市建立检查点，且只能在一个城市建立检查点。一支军队经过一条道路从一个城市移动到另一个城市所需要的时间等于道路的长度（单位：小时）。 请问最少需要多少个小时才能控制疫情。注意：不同的军队可以同时移动。","text":"H 国有 n个城市，这 n 个城市用n−1条双向道路相互连通构成一棵树，1号城市是首都，也是树中的根节点。 H国的首都爆发了一种危害性极高的传染病。当局为了控制疫情，不让疫情扩散到边境城市（叶子节点所表示的城市），决定动用军队在一些城市建立检查点，使得从首都到边境城市的每一条路径上都至少有一个检查点，边境城市也可以建立检查点。但特别要注意的是，首都是不能建立检查点的。 现在，在 H 国的一些城市中已经驻扎有军队，且一个城市可以驻扎多个军队。一支军队可以在有道路连接的城市间移动，并在除首都以外的任意一个城市建立检查点，且只能在一个城市建立检查点。一支军队经过一条道路从一个城市移动到另一个城市所需要的时间等于道路的长度（单位：小时）。 请问最少需要多少个小时才能控制疫情。注意：不同的军队可以同时移动。 一看就很可以二分的样子 然后得到时间后我们每个军队都一定是要往上走的，一种是还没走到根节点就停下了，还有一种是走到根节点后可以往下走 这个可以预处理倍增出来，处理出能走到根节点的军队和剩余距离 然后我们在现在走完的图上dfs一遍找出根节点的儿子中没有被控制的点，再记录下到根节点的距离 因为我们填这些没有被控制的节点肯定是剩余路程多的军队走到里根节点远的距离 所以可以对没被控制的节点和可以移动的军队排个序 但是在选的时候还有一种情况就是这个点的子树里有能跳上根的军队，所以我们还要维护每个子树里能调到根的剩余路径最小的军队 去控制点的时候先看看子树里最小的军队有没有被使用，被使用了就去找排好序里可以用的军队 然后就做完了，时间复杂度$O(nlog^2n)$ Code 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;const long long INF = 1e14;const int inf = 1e9;const int N = 5e4;const int log = 16;using namespace std;struct node&#123; int to,cost;&#125;;struct army&#123; int u; long long len;&#125;a[N + 5];struct sos&#123; int u,l;&#125;b[N + 5];struct near&#123; int u; long long ml;&#125;c[N + 5];int used[N + 5],n,m,in[N + 5],fa[N + 5][log + 2],na,nb,to[N + 5],t[N + 5],beat[N + 5],cnt;long long dis[N + 5][log + 2],ans = -1;vector &lt;node&gt; d[N + 5];void dfs(int u,int f)&#123; fa[u][0] = f; for (int i = 1;i &lt;= log;i++) fa[u][i] = fa[fa[u][i - 1]][i - 1],dis[u][i] = dis[u][i - 1] + dis[fa[u][i - 1]][i - 1]; vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to,w = (*it).cost; if (v == f) continue; dis[v][0] = w; dfs(v,u); &#125;&#125;void search(int u,int f)&#123; beat[u] = t[u]; vector &lt;node&gt;::iterator it; int fl = 1; if (d[u].size() == 1) fl = 0; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to; if (v == f) continue; search(v,u); fl &amp;= beat[v]; &#125; beat[u] |= fl;&#125;int cmpa(army x,army y)&#123; return x.len &gt; y.len;&#125;int cmpb(sos x,sos y)&#123; return x.l &gt; y.l;&#125;int check(long long x)&#123; memset(t,0,sizeof(t)); memset(beat,0,sizeof(beat)); memset(used,0,sizeof(used)); for (int i = 1;i &lt;= n;i++) c[i].ml = INF; na = nb = 0; for (int i = 1;i &lt;= m;i++) &#123; int u = in[i]; long long res = x; for (int j = log;j &gt;= 0;j--) if (res &gt;= dis[u][j] &amp;&amp; fa[u][j] &gt; 1) &#123; res -= dis[u][j]; u = fa[u][j]; &#125; if (fa[u][0] == 1 &amp;&amp; res &gt;= dis[u][0]) &#123; res -= dis[u][0]; a[++na] = (army)&#123;i,res&#125;; if (c[u].ml &gt; res) c[u].ml = res,c[u].u = i; u = 1; &#125; t[u] = 1; &#125; vector &lt;node&gt;::iterator it; beat[1] = 1; for (it = d[1].begin();it != d[1].end();it++) &#123; int v = (*it).to,w = (*it).cost; search(v,1); beat[1] &amp;= beat[v]; if (beat[v] == 0) b[++nb] = (sos)&#123;v,w&#125;; &#125; if (beat[1]) return 1; sort(a + 1,a + na + 1,cmpa); sort(b + 1,b + nb + 1,cmpb); int l = 1; for (int i = 1;i &lt;= nb;i++) &#123; if (!used[c[b[i].u].u] &amp;&amp; c[b[i].u].ml != INF) used[c[b[i].u].u] = 1; else &#123; while ((used[a[l].u] || a[l].len &lt; b[i].l) &amp;&amp; l &lt;= na) l++; if (l &gt; na) return 0; used[a[l].u] = 1; &#125; &#125; return 1;&#125;int main()&#123; scanf(\"%d\",&amp;n); int u,v,w; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d%d\",&amp;u,&amp;v,&amp;w); d[u].push_back((node)&#123;v,w&#125;); d[v].push_back((node)&#123;u,w&#125;); &#125; dfs(1,0); scanf(\"%d\",&amp;m); for (int i = 1;i &lt;= m;i++) scanf(\"%d\",&amp;in[i]); long long l = 0,r = INF,mid; while (l &lt;= r) &#123; mid = l + r &gt;&gt; 1; if (check(mid)) r = mid - 1,ans = mid; else l = mid + 1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"倍增","slug":"倍增","permalink":"https://sdlang.ml/tags/倍增/"},{"name":"二分答案","slug":"二分答案","permalink":"https://sdlang.ml/tags/二分答案/"},{"name":"贪心","slug":"贪心","permalink":"https://sdlang.ml/tags/贪心/"}]},{"title":"洛谷 P1131 [ZJOI2007]时态同步","slug":"p1131","date":"2019-10-22T16:00:00.000Z","updated":"2019-10-28T02:58:30.600Z","comments":true,"path":"2019/10/23/p1131/","link":"","permalink":"https://sdlang.ml/2019/10/23/p1131/","excerpt":"小Q在电子工艺实习课上学习焊接电路板。一块电路板由若干个元件组成，我们不妨称之为节点，并将其用数字1,2,3….进行标号。电路板的各个节点由若干不相交的导线相连接，且对于电路板的任何两个节点，都存在且仅存在一条通路（通路指连接两个元件的导线序列）。 在电路板上存在一个特殊的元件称为“激发器”。当激发器工作后，产生一个激励电流，通过导线传向每一个它所连接的节点。而中间节点接收到激励电流后，得到信息，并将该激励电流传向与它连接并且尚未接收到激励电流的节点。最终，激烈电流将到达一些“终止节点”――接收激励电流之后不再转发的节点。 激励电流在导线上的传播是需要花费时间的，对于每条边e，激励电流通过它需要的时间为$t_e$，而节点接收到激励电流后的转发可以认为是在瞬间完成的。现在这块电路板要求每一个“终止节点”同时得到激励电路――即保持时态同步。由于当前的构造并不符合时态同步的要求，故需要通过改变连接线的构造。目前小Q有一个道具，使用一次该道具，可以使得激励电流通过某条连接导线的时间增加一个单位。请问小Q最少使用多少次道具才可使得所有的“终止节点”时态同步？ 就是给你一个有根树，让你每次给一个边加1直到根到所有叶子节点的距离相同，问最少操作","text":"小Q在电子工艺实习课上学习焊接电路板。一块电路板由若干个元件组成，我们不妨称之为节点，并将其用数字1,2,3….进行标号。电路板的各个节点由若干不相交的导线相连接，且对于电路板的任何两个节点，都存在且仅存在一条通路（通路指连接两个元件的导线序列）。 在电路板上存在一个特殊的元件称为“激发器”。当激发器工作后，产生一个激励电流，通过导线传向每一个它所连接的节点。而中间节点接收到激励电流后，得到信息，并将该激励电流传向与它连接并且尚未接收到激励电流的节点。最终，激烈电流将到达一些“终止节点”――接收激励电流之后不再转发的节点。 激励电流在导线上的传播是需要花费时间的，对于每条边e，激励电流通过它需要的时间为$t_e$，而节点接收到激励电流后的转发可以认为是在瞬间完成的。现在这块电路板要求每一个“终止节点”同时得到激励电路――即保持时态同步。由于当前的构造并不符合时态同步的要求，故需要通过改变连接线的构造。目前小Q有一个道具，使用一次该道具，可以使得激励电流通过某条连接导线的时间增加一个单位。请问小Q最少使用多少次道具才可使得所有的“终止节点”时态同步？ 就是给你一个有根树，让你每次给一个边加1直到根到所有叶子节点的距离相同，问最少操作 这题好像很水的样子QAQ 考虑树上dp，设$f_u$表示u的子树时态同步的最小代价，$dis_u$表示u的子树时态同步后的子树边权和 然后写出状态转移方程 \\begin{cases} dis_u=max_{v\\in son(u)}dis_v+dist(u,v)\\\\ f_u=\\sum_{v\\in son(u)}f_v+dis_u-dis_v-dist(u,v) \\end{cases}$dist(u,v)$表示u到v的距离 因为边权只能加1，所以我们只能找最大的边来作为相同的边，也就是儿子的dis加上这条边取最大值 然后贡献的话首先要把所有儿子变相同的加起来，然后再把比dis小的边的贡献算上就可以了 Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;const int N = 5e5;using namespace std;struct node&#123; int to,cost;&#125;;int n,s;long long f[N + 5],dis[N + 5];vector &lt;node&gt; d[N + 5];void dfs(int u,int fa)&#123; vector &lt;node&gt;::iterator it; int maxx = 0; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to,w = (*it).cost; if (v == fa) continue; maxx = max(maxx,w); dfs(v,u); f[u] += f[v]; dis[u] = max(dis[v] + w,dis[u]); &#125; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to,w = (*it).cost; if (v == fa) continue; f[u] += dis[u] - dis[v] - w; &#125;&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;s); int u,v,w; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d%d\",&amp;u,&amp;v,&amp;w); d[u].push_back((node)&#123;v,w&#125;); d[v].push_back((node)&#123;u,w&#125;); &#125; dfs(s,0); cout&lt;&lt;f[s]&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"树上dp","slug":"树上dp","permalink":"https://sdlang.ml/tags/树上dp/"}]},{"title":"洛谷 P2470 [SCOI2007]压缩","slug":"p2470","date":"2019-10-19T16:00:00.000Z","updated":"2019-10-22T09:34:29.358Z","comments":true,"path":"2019/10/20/p2470/","link":"","permalink":"https://sdlang.ml/2019/10/20/p2470/","excerpt":"给一个由小写字母组成的字符串，我们可以用一种简单的方法来压缩其中的重复信息。压缩后的字符串除了小写字母外还可以（但不必）包含大写字母R与M，其中M标记重复串的开始，R重复从上一个M（如果当前位置左边没有M，则从串的开始算起）开始的解压结果（称为缓冲串）。 求一个仅含小写字母的字符串压缩后的最短长度","text":"给一个由小写字母组成的字符串，我们可以用一种简单的方法来压缩其中的重复信息。压缩后的字符串除了小写字母外还可以（但不必）包含大写字母R与M，其中M标记重复串的开始，R重复从上一个M（如果当前位置左边没有M，则从串的开始算起）开始的解压结果（称为缓冲串）。 求一个仅含小写字母的字符串压缩后的最短长度 一道区间dp题，但是可能不太好想？ 首先我们如果设$f_{l,r}$表示区间l~r的最短长度，发现M的位置是会影响我们统计的 所以我们不妨设$f_{l,r,1/0}$表示区间l~r有或没有M的最短长度，并且默认l-1的位置是有M的 这样就容易转移多了 \\begin{cases} f_{l,r,0}=f_{l,mid,0}+1\\ \\ \\ (2|(r-l+1)\\& s_{l\\dots mid}=s_{mid+1\\dots r}) \\\\ f_{l,r,0}=min_{k=l}^{r-1}(f_{l,k,0}+r-k) \\\\ f_{l,r,1}=min_{k=l}^{r-1}(min(f_{l,k,0},f_{l,k,0})+1+min(f_{k+1,r,0},f_{k+1,r,1})) \\end{cases}第一种情况是左半边等于右半边，那么就可以被压缩，因为l-1有M，所以添个R就可以了 第二种情况是l~k这段被压缩过，因为这段区间没有M，所以后面不能被压缩，只能加上原长度 第三种情况因为这个区间插入了个M，所以两边有没有M无所谓了 Code 123456789101112131415161718192021222324252627282930313233343536#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;const int N = 50;using namespace std;int n,f[N + 5][N + 5][2];char ch[N + 5];int check(int l,int r)&#123; int mid = l + r &gt;&gt; 1; for (int i = l;i &lt;= mid;i++) if (ch[i] != ch[mid + i - l + 1]) return 0; return 1;&#125;int main()&#123; scanf(\"%s\",ch + 1); n = strlen(ch + 1); for (int i = 1;i &lt;= n;i++) for (int j = 1;j + i - 1 &lt;= n;j++) &#123; f[j][j + i - 1][0] = f[j][j + i - 1][1] = i; int mid = (j + j + i - 1) &gt;&gt; 1; if (i % 2 == 0 &amp;&amp; check(j,j + i - 1)) f[j][j + i - 1][0] = min(f[j][j + i - 1][0],f[j][mid][0] + 1); for (int k = j;k &lt; j + i - 1;k++) &#123; f[j][j + i - 1][0] = min(f[j][j + i - 1][0],f[j][k][0] + j + i - 1 - k); f[j][j + i - 1][1] = min(f[j][j + i - 1][1],min(f[j][k][1],f[j][k][0]) + min(f[k + 1][j + i - 1][0],f[k + 1][j + i - 1][1]) + 1); &#125; &#125; cout&lt;&lt;min(f[1][n][1],f[1][n][0])&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"区间dp","slug":"区间dp","permalink":"https://sdlang.ml/tags/区间dp/"}]},{"title":"USACO08JAN 手机网络Cell Phone Network","slug":"p2899","date":"2019-10-16T16:00:00.000Z","updated":"2019-10-28T10:32:52.821Z","comments":true,"path":"2019/10/17/p2899/","link":"","permalink":"https://sdlang.ml/2019/10/17/p2899/","excerpt":"John想让他的所有牛用上手机以便相互交流(也是醉了。。。)，他需要建立几座信号塔在N块草地中。已知与信号塔相邻的草地能收到信号。给你N-1个草地(A，B)的相邻关系，问：最少需要建多少个信号塔能实现所有草地都有信号。（其实就是最小支配集大小）","text":"John想让他的所有牛用上手机以便相互交流(也是醉了。。。)，他需要建立几座信号塔在N块草地中。已知与信号塔相邻的草地能收到信号。给你N-1个草地(A，B)的相邻关系，问：最少需要建多少个信号塔能实现所有草地都有信号。（其实就是最小支配集大小） 考虑树上dp $f_{u,1}$表示以u为根的子树中，u选时候的答案 $f_{u,0}$表示以u为根的子树中，u不选且儿子不选（也就是u必须要被父亲覆盖）时候的答案 $f_{u,2}$表示以u为根的子树中，u不选且至少有一个儿子选时候的答案 于是我们可以得到转移方程 \\begin{cases} f_{u,1}=1+\\sum_{v\\in son(u)}min(f_{v,0},f_{v,1},f_{v,2})& \\\\ f_{u,0}=\\sum_{v\\in son(u)}f_{v,2}& \\\\ f_{u,2}=f_{x,1}\\ (x\\in son(u))+\\sum_{v\\in son(u)\\& v\\ne x}min(f_{v,1},f_{v,2}) \\end{cases}u选的时候儿子是随便选的 u不选而且儿子不选那么儿子就要被儿子的儿子覆盖到 u不选但儿子选就要保证有一个点是选的，所以我们找到一个x满足$f_{x,1}-min(f_{x,1},f_{x,2})$最小，然后剩下的在这个点选或者不选且被儿子覆盖（因为u不选所以不能选择被父亲覆盖）里取较小的 然后注意下根是没有$f_{1,0}$的，叶子节点没有$f_{u,2}$ Code123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;const int N = 1e4;using namespace std;int n,f[N + 5][3];vector &lt;int&gt; d[N + 5];void dfs(int u,int fa)&#123; f[u][1] = 1; vector &lt;int&gt;::iterator it; int mm = N + 5; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa) continue; dfs(v,u); f[u][1] += min(min(f[v][0],f[v][1]),f[v][2]); f[u][0] += f[v][2]; f[u][2] += min(f[v][1],f[v][2]); if (mm &gt; f[v][1] - min(f[v][1],f[v][2])) mm = f[v][1] - min(f[v][1],f[v][2]); &#125; f[u][2] += mm;&#125;int main()&#123; scanf(\"%d\",&amp;n); int u,v; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d\",&amp;u,&amp;v); d[u].push_back(v); d[v].push_back(u); &#125; dfs(1,0); cout&lt;&lt;min(f[1][2],f[1][1])&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"树上dp","slug":"树上dp","permalink":"https://sdlang.ml/tags/树上dp/"}]},{"title":"CF101915D Largest Group","slug":"cf101915d","date":"2019-10-15T16:00:00.000Z","updated":"2019-10-22T11:16:45.273Z","comments":true,"path":"2019/10/16/cf101915d/","link":"","permalink":"https://sdlang.ml/2019/10/16/cf101915d/","excerpt":"有一天，你们学校决定做一些统计。他们想研究男孩和女孩之间的友谊关系，以及这种关系对他们成绩的影响。你们大学的奇怪之处在于男生和女生的人数完全一样。更正式的说法是，这所大学的男生人数是从1到P，女生人数是从1到P。我们知道，任何一对男孩肯定是朋友，任何一对女孩肯定是朋友。然而，男孩和女孩并不总是朋友。确切地说，这所大学有一个长度为N的列表，其中包含了男孩和女孩之间的友谊关系。第i个友谊关系是由两个整数bi和gi来描述的，意思是男孩的数字bi和女孩的数字gi是朋友。你所在大学最感兴趣的统计数据之一，是最大的人群(男孩和女孩)，其中任何一对都是朋友。你能编写一个程序来解决这样的问题吗?","text":"有一天，你们学校决定做一些统计。他们想研究男孩和女孩之间的友谊关系，以及这种关系对他们成绩的影响。你们大学的奇怪之处在于男生和女生的人数完全一样。更正式的说法是，这所大学的男生人数是从1到P，女生人数是从1到P。我们知道，任何一对男孩肯定是朋友，任何一对女孩肯定是朋友。然而，男孩和女孩并不总是朋友。确切地说，这所大学有一个长度为N的列表，其中包含了男孩和女孩之间的友谊关系。第i个友谊关系是由两个整数bi和gi来描述的，意思是男孩的数字bi和女孩的数字gi是朋友。你所在大学最感兴趣的统计数据之一，是最大的人群(男孩和女孩)，其中任何一对都是朋友。你能编写一个程序来解决这样的问题吗? 其实就是求二分图的最大团 我们用$fa_i$存第i个男生和女生的朋友关系（用二进制表示） 然后$f_s$表示当选这几个男生时女生的状态，所以得到下面的转移方程（可能连方程都不是） f_s=f_{s-(1","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"状压dp","slug":"状压dp","permalink":"https://sdlang.ml/tags/状压dp/"}]},{"title":"hdu 5418 Victor and World","slug":"hdu5418","date":"2019-10-14T16:00:00.000Z","updated":"2019-10-17T11:11:30.991Z","comments":true,"path":"2019/10/15/hdu5418/","link":"","permalink":"https://sdlang.ml/2019/10/15/hdu5418/","excerpt":"经过多年的努力，维克多终于拿到了驾驶执照。为了庆祝一下，他打算给自己买一架飞机，飞遍全世界。地球上有n个国家，编号从1到n。它们由m个无向航班连接，第i次航班详细连接了ui国和vi国，如果Victor飞越这些国家，需要消耗Victor的飞机的燃油。他有可能从第一个国家飞到每一个国家。Victor现在在一个编号为1的国家，他想知道最少需要多少燃料才能让他至少访问每个国家一次，最后回到第一个国家。","text":"经过多年的努力，维克多终于拿到了驾驶执照。为了庆祝一下，他打算给自己买一架飞机，飞遍全世界。地球上有n个国家，编号从1到n。它们由m个无向航班连接，第i次航班详细连接了ui国和vi国，如果Victor飞越这些国家，需要消耗Victor的飞机的燃油。他有可能从第一个国家飞到每一个国家。Victor现在在一个编号为1的国家，他想知道最少需要多少燃料才能让他至少访问每个国家一次，最后回到第一个国家。 考虑状压dp，$f_{s,i}$表示s这个集合里的点全走并且走到i的最短路长，然后就能写出转移方程 f_{s,j}=min(f_{s-(1","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"状压dp","slug":"状压dp","permalink":"https://sdlang.ml/tags/状压dp/"}]},{"title":"洛谷 P3205 [HNOI2010]合唱队","slug":"p3205","date":"2019-10-12T16:00:00.000Z","updated":"2019-10-20T03:15:07.581Z","comments":true,"path":"2019/10/13/p3205/","link":"","permalink":"https://sdlang.ml/2019/10/13/p3205/","excerpt":"为了在即将到来的晚会上有更好的演出效果，作为AAA合唱队负责人的小A需要将合唱队的人根据他们的身高排出一个队形。假定合唱队一共N个人，第i个人的身高为Hi米(1000&lt;=Hi&lt;=2000),并已知任何两个人的身高都不同。假定最终排出的队形是A 个人站成一排，为了简化问题，小A想出了如下排队的方式：他让所有的人先按任意顺序站成一个初始队形，然后从左到右按以下原则依次将每个人插入最终棑排出的队形中： -第一个人直接插入空的当前队形中。 -对从第二个人开始的每个人，如果他比前面那个人高(H较大)，那么将他插入当前队形的最右边。如果他比前面那个人矮(H较小)，那么将他插入当前队形的最左边。 当N个人全部插入当前队形后便获得最终排出的队形。","text":"为了在即将到来的晚会上有更好的演出效果，作为AAA合唱队负责人的小A需要将合唱队的人根据他们的身高排出一个队形。假定合唱队一共N个人，第i个人的身高为Hi米(1000&lt;=Hi&lt;=2000),并已知任何两个人的身高都不同。假定最终排出的队形是A 个人站成一排，为了简化问题，小A想出了如下排队的方式：他让所有的人先按任意顺序站成一个初始队形，然后从左到右按以下原则依次将每个人插入最终棑排出的队形中： -第一个人直接插入空的当前队形中。 -对从第二个人开始的每个人，如果他比前面那个人高(H较大)，那么将他插入当前队形的最右边。如果他比前面那个人矮(H较小)，那么将他插入当前队形的最左边。 当N个人全部插入当前队形后便获得最终排出的队形。 例如，有6个人站成一个初始队形，身高依次为1850、1900、1700、1650、1800和1750, 那么小A会按以下步骤获得最终排出的队形： 1850 1850 , 1900 因为 1900 &gt; 1850 1700, 1850, 1900 因为 1700 &lt; 1900 1650 . 1700, 1850, 1900 因为 1650 &lt; 1700 1650 , 1700, 1850, 1900, 1800 因为 1800 &gt; 1650 1750， 1650, 1700，1850, 1900, 1800 因为 1750 &lt; 1800 因此，最终排出的队形是 1750，1650，1700，1850, 1900，1800 小A心中有一个理想队形，他想知道多少种初始队形可以获得理想的队形 状态可能不太好设计 不妨用$f_{l,r,0}$表示l~r这段区间中l从左边插入的方案数，$f_{l,r,1}$表示l~r这段区间中r从右边插入的方案数 于是我们得到如下的转移方程 $f_{l,r,0}+=\\begin{cases}f_{l+1,r,0}&amp;\\; (a_l&lt;a_{l+1})\\ f_{l+1,r,1}&amp;\\; (a_l&lt;a_r)\\end{cases}$ 从左边插入一定比上一个数小，而上一个数的来源只可能是l+1或者r，然后就可以更新答案 $f_{l,r,1}+=\\begin{cases}f_{l,r-1,0}&amp;\\; (a_r&gt;a_l) \\ f_{l,r-1,1}&amp;\\; (a_r&gt;a_{r-1})\\end{cases}$ 从右边插入一定比上一个数大，而上一个数的来源只可能是r-1或者l，然后就可以更新答案 $f_{1,n,0}+f_{1,n,1}$就是这道题答案了QAQ Code12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;const int N = 1000;const int p = 19650827;using namespace std;int n,a[N + 5],f[N + 5][N + 5][3];int main()&#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;a[i]); for (int i = 1;i &lt;= n;i++) f[i][i][0] = 1; for (int i = 2;i &lt;= n;i++) for (int j = 1;j + i - 1 &lt;= n;j++) &#123; if (a[j + i - 1] &gt; a[j]) f[j][j + i - 1][0] += f[j + 1][j + i - 1][1]; if (a[j] &lt; a[j + 1]) f[j][j + i - 1][0] += f[j + 1][j + i - 1][0]; if (a[j + i - 1] &gt; a[j + i - 2]) f[j][j + i - 1][1] += f[j][j + i - 2][1]; if (a[j + i - 1] &gt; a[j]) f[j][j + i - 1][1] += f[j][j + i - 2][0]; f[j][j + i - 1][0] %= p; f[j][j + i - 1][1] %= p; &#125; cout&lt;&lt;(f[1][n][0] + f[1][n][1]) % p&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"区间dp","slug":"区间dp","permalink":"https://sdlang.ml/tags/区间dp/"}]},{"title":"洛谷 P2516 [HAOI2010]最长公共子序列","slug":"p2516","date":"2019-10-10T16:00:00.000Z","updated":"2019-10-26T00:53:18.194Z","comments":true,"path":"2019/10/11/p2516/","link":"","permalink":"https://sdlang.ml/2019/10/11/p2516/","excerpt":"字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X=“x0，x1，…，xm-1”，序列Y=“y0，y1，…，yk-1”是X的子序列，存在X的一个严格递增下标序列，使得对所有的j=0，1，…，k-1，有xi = yj。例如，X=“ABCBDAB”，Y=“BCDB”是X的一个子序列。对给定的两个字符序列，求出他们最长的公共子序列长度，以及最长公共子序列个数。","text":"字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X=“x0，x1，…，xm-1”，序列Y=“y0，y1，…，yk-1”是X的子序列，存在X的一个严格递增下标序列，使得对所有的j=0，1，…，k-1，有xi = yj。例如，X=“ABCBDAB”，Y=“BCDB”是X的一个子序列。对给定的两个字符序列，求出他们最长的公共子序列长度，以及最长公共子序列个数。 其实就是让你求一个最长公共子序列的长度和方案数 因为长度最大是5000，所以考虑dp $f_{i,j}$表示第一个字符串a的前1…i的子串和第二个字符串b的前1…j的子串的最长公共子序列长度 那么有两种情况 f_{i,j}=\\begin{cases}f_{i-1,j-1}&\\; (a_i=b_j) \\\\ max(f_{i-1,j},f_{i,j-1})&\\; (a_i\\ne b_j)\\end{cases}然后就可以$O(n^2)$转移了 至于方案数也使用一样统计，开一个$dp_{i,j}$表示第一个字符串a的前1…i的子串和第二个字符串b的前1…j的子串的最长公共子序列的方案数 我们只需要统计$f_{i-1,j}$和$f_{i,j-1}$中与$f_{i,j}$相等的把方案数相加，然后又有两种情况 dp_{i,j}+=\\begin{cases}dp_{i-1,j-1}&\\, (a_i=b_j\\ \\& \\ f_{i,j}=f_{i-1,j-1}+1) \\\\ -dp_{i-1,j-1}&\\, (a_i\\ne b_j\\ \\& \\ f_{i,j}=f_{i-1,j-1})\\end{cases}负数的情况就是减去算重的一次 初始化就是$dp_{i,0}=dp_{0,j}=1\\quad(0\\le i\\le len_a,0\\le j\\le len_b)$ 然后这题还卡空间(真是毒瘤 但是这个转移方程滚动还是很显然的，第一维只留两个状态就可以了，然后算答案和统计方案数也可以放在一起做 Code123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;const int N = 5000;const int p = 1e8;using namespace std;int n,la,lb,dp[3][N + 5],f[3][N + 5];char a[N + 5],b[N + 5];int main()&#123; scanf(\"%s\",a + 1); scanf(\"%s\",b + 1); la = strlen(a + 1); lb = strlen(b + 1); la--; lb--; for (int i = 0;i &lt;= lb;i++) dp[0][i] = 1; dp[1][0] = 1; for (int i = 1;i &lt;= la;i++) for (int j = 1;j &lt;= lb;j++) &#123; dp[i % 2][j] = 0; if (a[i] == b[j]) &#123; f[i % 2][j] = f[(i - 1) % 2][j - 1] + 1; dp[i % 2][j] += dp[(i - 1) % 2][j - 1]; &#125; else f[i % 2][j] = max(f[i % 2][j - 1],f[(i - 1) % 2][j]); if (f[(i - 1) % 2][j] == f[i % 2][j]) dp[i % 2][j] += dp[(i - 1) % 2][j]; if (f[i % 2][j - 1] == f[i % 2][j]) dp[i % 2][j] += dp[i % 2][j - 1]; if (f[i % 2][j] == f[(i - 1) % 2][j - 1] &amp;&amp; a[i] != b[j]) dp[i % 2][j] -= dp[(i - 1) % 2][j - 1]; dp[i % 2][j] = (dp[i % 2][j] + p) % p; &#125; printf(\"%d\\n%d\",f[la % 2][lb],dp[la % 2][lb]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"dp","slug":"dp","permalink":"https://sdlang.ml/tags/dp/"}]},{"title":"洛谷 P5024 保卫王国","slug":"p5024","date":"2019-10-09T16:00:00.000Z","updated":"2019-10-10T11:15:07.238Z","comments":true,"path":"2019/10/10/p5024/","link":"","permalink":"https://sdlang.ml/2019/10/10/p5024/","excerpt":"Z国有n座城市，n−1条双向道路，每条双向道路连接两座城市，且任意两座城市 都能通过若干条道路相互到达。 Z国的国防部长小Z要在城市中驻扎军队。驻扎军队需要满足如下几个条件： 一座城市可以驻扎一支军队，也可以不驻扎军队。 由道路直接连接的两座城市中至少要有一座城市驻扎军队。 在城市里驻扎军队会产生花费，在编号为i的城市中驻扎军队的花费是$p_i$。 小 Z 很快就规划出了一种驻扎军队的方案，使总花费最小。但是国王又给小Z提出了m个要求，每个要求规定了其中两座城市是否驻扎军队。小Z需要针对每个要求逐一给出回答。具体而言，如果国王提出的第j个要求能够满足上述驻扎条件（不需要考虑第j个要求之外的其它要求），则需要给出在此要求前提下驻扎军队的最小开销。如果 国王提出的第j个要求无法满足，则需要输出-1$(1\\le j\\le m)$。现在请你来帮助小Z。","text":"Z国有n座城市，n−1条双向道路，每条双向道路连接两座城市，且任意两座城市 都能通过若干条道路相互到达。 Z国的国防部长小Z要在城市中驻扎军队。驻扎军队需要满足如下几个条件： 一座城市可以驻扎一支军队，也可以不驻扎军队。 由道路直接连接的两座城市中至少要有一座城市驻扎军队。 在城市里驻扎军队会产生花费，在编号为i的城市中驻扎军队的花费是$p_i$。 小 Z 很快就规划出了一种驻扎军队的方案，使总花费最小。但是国王又给小Z提出了m个要求，每个要求规定了其中两座城市是否驻扎军队。小Z需要针对每个要求逐一给出回答。具体而言，如果国王提出的第j个要求能够满足上述驻扎条件（不需要考虑第j个要求之外的其它要求），则需要给出在此要求前提下驻扎军队的最小开销。如果 国王提出的第j个要求无法满足，则需要输出-1$(1\\le j\\le m)$。现在请你来帮助小Z。 真是一道noip的毒瘤题 最小权覆盖集=点权和-最大权独立集 每次询问选或不选相当于给每个点赋无穷小或无穷大，然后就可以ddp了，好了做完了 但是这个题没有修改，所以我们考虑倍增 先预处理出来$f_{u,0/1}$表示u不选或选时以其为根子树的答案，$g_{u,0/1}$表示u不选或选时整棵树去掉以u为根的子树的答案 这两个都可以树上dp出来 然后我们维护一个倍增数组$dp_{u,i,0/1,0/1}$表示u不选或选和u的$2^i$祖先不选或选时，以u的$2^i$祖先为根的子树去掉以u为根的子树的答案 这个也可以顺着树上dp的思路倍增出来 然后根据倍增往上跳就可以了，顺便统计一下答案 当然，只有在a，b都不能驻扎军队并且a和b有边相连的情况下才会无解 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#define LL long longconst int N = 1e5;const LL INF = 1e15;using namespace std;int n,m,p[N + 5];int dep[N + 5],fa[N + 5][25];LL dp[N + 5][25][2][2],f[N + 5][2],g[N + 5][2];char ch[5];vector &lt;int&gt; d[N + 5];void dfs1(int u,int F)&#123; vector &lt;int&gt;::iterator it; fa[u][0] = F; f[u][1] = p[u]; dep[u] = dep[F] + 1; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == F) continue; dfs1(v,u); f[u][1] += min(f[v][0],f[v][1]); f[u][0] += f[v][1]; &#125;&#125;void dfs2(int u,int F)&#123; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == F) continue; g[v][0] = g[u][1] + f[u][1] - min(f[v][1],f[v][0]); g[v][1] = min(g[u][0] + f[u][0] - f[v][1],g[v][0]); dfs2(v,u); &#125;&#125;LL solve(int a,int x,int b,int y)&#123; if (dep[a] &lt; dep[b]) swap(a,b),swap(x,y); LL ta[2] = &#123;INF,INF&#125;,tb[2] = &#123;INF,INF&#125;,na[2],nb[2]; ta[x] = f[a][x]; tb[y] = f[b][y]; for (int i = 18;i &gt;= 0;i--) if (dep[fa[a][i]] &gt;= dep[b]) &#123; na[0] = na[1] = INF; for (int j = 0;j &lt;= 1;j++) for (int k = 0;k &lt;= 1;k++) na[j] = min(na[j],ta[k] + dp[a][i][k][j]); ta[1] = na[1]; ta[0] = na[0]; a = fa[a][i]; &#125; if (a == b) return ta[y] + g[b][y]; for (int i = 18;i &gt;= 0;i--) if (fa[a][i] != fa[b][i]) &#123; na[0] = na[1] = nb[0] = nb[1] = INF; for (int j = 0;j &lt;= 1;j++) for (int k = 0;k &lt;= 1;k++) &#123; na[j] = min(na[j],ta[k] + dp[a][i][k][j]); nb[j] = min(nb[j],tb[k] + dp[b][i][k][j]); &#125; ta[1] = na[1]; ta[0] = na[0]; tb[1] = nb[1]; tb[0] = nb[0]; a = fa[a][i]; b = fa[b][i]; &#125; int lca = fa[a][0]; return min(f[lca][0] - f[a][1] - f[b][1] + ta[1] + tb[1] + g[lca][0],f[lca][1] - min(f[a][0],f[a][1]) - min(f[b][0],f[b][1]) + min(ta[0],ta[1]) + min(tb[0],tb[1]) + g[lca][1]);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); scanf(\"%s\",ch + 1); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;p[i]); int u,v; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d\",&amp;u,&amp;v); d[u].push_back(v); d[v].push_back(u); &#125; for (int i = 1;i &lt;= n;i++) sort(d[i].begin(),d[i].end()); dfs1(1,0); dfs2(1,0); for (int i = 1;i &lt;= n;i++) &#123; dp[i][0][0][0] = INF; dp[i][0][1][0] = f[fa[i][0]][0] - f[i][1]; dp[i][0][1][1] = f[fa[i][0]][1] - min(f[i][0],f[i][1]); dp[i][0][0][1] = f[fa[i][0]][1] - min(f[i][0],f[i][1]); &#125; for (int i = 1;i &lt;= 18;i++) for (int j = 1;j &lt;= n;j++) &#123; fa[j][i] = fa[fa[j][i - 1]][i - 1]; for (int x = 0;x &lt;= 1;x++) for (int y = 0;y &lt;= 1;y++) &#123; dp[j][i][x][y] = INF; for (int z = 0;z &lt;= 1;z++) dp[j][i][x][y] = min(dp[j][i][x][y],dp[j][i - 1][x][z] + dp[fa[j][i - 1]][i - 1][z][y]); &#125; &#125; int a,x,b,y; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%d%d\",&amp;a,&amp;x,&amp;b,&amp;y); if (x == 0 &amp;&amp; y == 0 &amp;&amp; *lower_bound(d[a].begin(),d[a].end(),b) == b) printf(\"-1\\n\"); else printf(\"%lld\\n\",solve(a,x,b,y)); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"倍增","slug":"倍增","permalink":"https://sdlang.ml/tags/倍增/"},{"name":"树上dp","slug":"树上dp","permalink":"https://sdlang.ml/tags/树上dp/"},{"name":"动态dp","slug":"动态dp","permalink":"https://sdlang.ml/tags/动态dp/"}]},{"title":"洛谷 P3960 列队","slug":"p3960","date":"2019-10-08T16:00:00.000Z","updated":"2019-10-18T03:33:45.927Z","comments":true,"path":"2019/10/09/p3960/","link":"","permalink":"https://sdlang.ml/2019/10/09/p3960/","excerpt":"Sylvia 是一个热爱学习的女孩子。 前段时间，Sylvia 参加了学校的军训。众所周知，军训的时候需要站方阵。 Sylvia 所在的方阵中有$n\\times m$名学生，方阵的行数为n，列数为m。 为了便于管理，教官在训练开始时，按照从前到后，从左到右的顺序给方阵中的学生从1到$n\\times m$编上了号码（参见后面的样例）。即：初始时，第i行第j列的学生的编号是$(i-1)\\times m+j$。 然而在练习方阵的时候，经常会有学生因为各种各样的事情需要离队。在一天中，一共发生了q件这样的离队事件。每一次离队事件可以用数对$(x,y) (1 \\le x \\le n, 1 \\le y \\le m)$描述，表示第x行第y列的学生离队。 在有学生离队后，队伍中出现了一个空位。为了队伍的整齐，教官会依次下达这样的两条指令： 向左看齐。这时第一列保持不动，所有学生向左填补空缺。不难发现在这条指令之后，空位在第x行第m列。 向前看齐。这时第一行保持不动，所有学生向前填补空缺。不难发现在这条指令之后，空位在第n行第m列。 教官规定不能有两个或更多学生同时离队。即在前一个离队的学生归队之后，下一个学生才能离队。因此在每一个离队的学生要归队时，队伍中有且仅有第n行第m列一个空位，这时这个学生会自然地填补到这个位置。 因为站方阵真的很无聊，所以 Sylvia 想要计算每一次离队事件中，离队的同学的编号是多少。 注意：每一个同学的编号不会随着离队事件的发生而改变，在发生离队事件后方阵中同学的编号可能是乱序的。","text":"Sylvia 是一个热爱学习的女孩子。 前段时间，Sylvia 参加了学校的军训。众所周知，军训的时候需要站方阵。 Sylvia 所在的方阵中有$n\\times m$名学生，方阵的行数为n，列数为m。 为了便于管理，教官在训练开始时，按照从前到后，从左到右的顺序给方阵中的学生从1到$n\\times m$编上了号码（参见后面的样例）。即：初始时，第i行第j列的学生的编号是$(i-1)\\times m+j$。 然而在练习方阵的时候，经常会有学生因为各种各样的事情需要离队。在一天中，一共发生了q件这样的离队事件。每一次离队事件可以用数对$(x,y) (1 \\le x \\le n, 1 \\le y \\le m)$描述，表示第x行第y列的学生离队。 在有学生离队后，队伍中出现了一个空位。为了队伍的整齐，教官会依次下达这样的两条指令： 向左看齐。这时第一列保持不动，所有学生向左填补空缺。不难发现在这条指令之后，空位在第x行第m列。 向前看齐。这时第一行保持不动，所有学生向前填补空缺。不难发现在这条指令之后，空位在第n行第m列。 教官规定不能有两个或更多学生同时离队。即在前一个离队的学生归队之后，下一个学生才能离队。因此在每一个离队的学生要归队时，队伍中有且仅有第n行第m列一个空位，这时这个学生会自然地填补到这个位置。 因为站方阵真的很无聊，所以 Sylvia 想要计算每一次离队事件中，离队的同学的编号是多少。 注意：每一个同学的编号不会随着离队事件的发生而改变，在发生离队事件后方阵中同学的编号可能是乱序的。 考虑用线段树计算每一行第x个人的位置，因为n和m都很大，所以要动态开点，线段树的最长长度就是$max(n,m)+p$ 计算第x人的位置很好算，维护一个区间内有多少个人被删除掉，查询的时候用类似于主席树的方法查询就可以了 这样删除操作也就说完了 而添加时我们开n+1个vector，1~n维护前m-1个人，第n+1维护最后一列，这是因为我们每次操作是先左移再上移 对于一对(x,y)，如果$y=m$，则只需要上移，所以直接在第n+1个vector里操作然后把这个数丢到vector最后就好了；否则就要先左移，需要查出第x个vector的第y个，删掉后丢到vector最后，然后上移，在第n+1个vector进行类似的操作 然后算编号也是很好算的，左移操作中如果我们得到的位置$ans &lt;= m-1$，那么编号为$(x-1)n+ans$，否则为vector中第$[x][ans-m]$个数；上移操作中如果$ans &lt;= n$，那么编号为$ansm$，否则为vector中第$[n+1][ans-n-1]$个数（vector下标是从0开始的） Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#define LL long longconst int N = 3e5;using namespace std;int n,m,q,rt[N + 5],lc[N * 20 + 5],rc[N * 20 + 5],len,node_cnt;vector &lt;LL&gt; d[N + 5];struct Seg&#123; int del[N * 20 + 5]; int query(int k,int l,int r,int x) &#123; if (l == r) return l; int mid = l + r &gt;&gt; 1,y = mid - l + 1 - del[lc[k]]; if (y &gt;= x) return query(lc[k],l,mid,x); else return query(rc[k],mid + 1,r,x - y); &#125; void change(int &amp;k,int l,int r,int x) &#123; if (!k) k = ++node_cnt; if (l == r) &#123; del[k]++; return; &#125; int mid = l + r &gt;&gt; 1; if (x &lt;= mid) change(lc[k],l,mid,x); else change(rc[k],mid + 1,r,x); del[k] = del[lc[k]] + del[rc[k]]; &#125; LL ask1(int x,LL y) &#123; LL ans = query(rt[n + 1],1,len,x); change(rt[n + 1],1,len,ans); if (ans &lt;= n) ans *= 1ll * m; else ans = d[n + 1][ans - n - 1]; d[n + 1].push_back(y ? y : ans); return ans; &#125; LL ask2(int x,int y) &#123; LL ans = query(rt[x],1,len,y); change(rt[x],1,len,ans); if (ans &lt;= m - 1) ans = 1ll * (x - 1) * m + ans; else ans = d[x][ans - m]; d[x].push_back(ask1(x,ans)); return ans; &#125;&#125;tree;int main()&#123; scanf(\"%d%d%d\",&amp;n,&amp;m,&amp;q); len = max(n,m) + q; int x,y; for (int i = 1;i &lt;= q;i++) &#123; scanf(\"%d%d\",&amp;x,&amp;y); if (y == m) printf(\"%lld\\n\",tree.ask1(x,0)); else printf(\"%lld\\n\",tree.ask2(x,y)); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"},{"name":"动态开点","slug":"动态开点","permalink":"https://sdlang.ml/tags/动态开点/"},{"name":"平衡树","slug":"平衡树","permalink":"https://sdlang.ml/tags/平衡树/"}]},{"title":"洛谷 P1600 天天爱跑步","slug":"p1600","date":"2019-10-07T16:00:00.000Z","updated":"2019-10-09T00:58:11.080Z","comments":true,"path":"2019/10/08/p1600/","link":"","permalink":"https://sdlang.ml/2019/10/08/p1600/","excerpt":"小c同学认为跑步非常有趣,于是决定制作一款叫做《天天爱跑步》的游戏。《天天爱跑步》是一个养成类游戏,需要玩家每天按时上线,完成打卡任务。 这个游戏的地图可以看作一棵包含 n个结点和n−1条边的树,每条边连接两个结点,且任意两个结点存在一条路径互相可达。树上结点编号为从1到n的连续正整数。 现在有m个玩家,第i个玩家的起点为 $S_i$,终点为$T_i$。每天打卡任务开始时,所有玩家在第0秒同时从自己的起点出发, 以每秒跑一条边的速度, 不间断地沿着最短路径向着自己的终点跑去, 跑到终点后该玩家就算完成了打卡任务。(由于地图是一棵树,所以每个人的路径是唯一的) 小c想知道游戏的活跃度, 所以在每个结点上都放置了一个观察员。在结点j的观察员会选择在第$W_j$秒观察玩家,一个玩家能被这个观察员观察到当且仅当该玩家在第$W_j$秒也理到达了结点j。小C想知道每个观察员会观察到多少人?注意: 我们认为一个玩家到达自己的终点后该玩家就会结束游戏,他不能等待一段时间后再被观察员观察到。即对于把结点jj作为终点的玩家:若他在第$W_j$秒前到达终点,则在结点jj的观察员不能观察到该玩家;若他正好在第$W_j$秒到达终点,则在结点jj的观察员可以观察到这个玩家。","text":"小c同学认为跑步非常有趣,于是决定制作一款叫做《天天爱跑步》的游戏。《天天爱跑步》是一个养成类游戏,需要玩家每天按时上线,完成打卡任务。 这个游戏的地图可以看作一棵包含 n个结点和n−1条边的树,每条边连接两个结点,且任意两个结点存在一条路径互相可达。树上结点编号为从1到n的连续正整数。 现在有m个玩家,第i个玩家的起点为 $S_i$,终点为$T_i$。每天打卡任务开始时,所有玩家在第0秒同时从自己的起点出发, 以每秒跑一条边的速度, 不间断地沿着最短路径向着自己的终点跑去, 跑到终点后该玩家就算完成了打卡任务。(由于地图是一棵树,所以每个人的路径是唯一的) 小c想知道游戏的活跃度, 所以在每个结点上都放置了一个观察员。在结点j的观察员会选择在第$W_j$秒观察玩家,一个玩家能被这个观察员观察到当且仅当该玩家在第$W_j$秒也理到达了结点j。小C想知道每个观察员会观察到多少人?注意: 我们认为一个玩家到达自己的终点后该玩家就会结束游戏,他不能等待一段时间后再被观察员观察到。即对于把结点jj作为终点的玩家:若他在第$W_j$秒前到达终点,则在结点jj的观察员不能观察到该玩家;若他正好在第$W_j$秒到达终点,则在结点jj的观察员可以观察到这个玩家。 刚开始拿到这道题直接毫无头绪，但是思路其实挺简单的 首先我们可以把每一条路径拆成起点到lca的上行路和lca到终点的下行路这两条路径 对于每条上行路，节点i可以看作从i这个点出发向下走$w_i$步，也就是当$dep_s-dep_i=w_i$时，i点会产生贡献 而对于每条下行路，节点i可以看作从i出发向上走$w_i$步，也就是当$len(s,t)-dep_t+dep_i=w_i$，i点会产生贡献 于是我们开一个桶记录一下贡献，再减掉没有产生贡献的部分和减去一次多算了的lca的贡献就可以了 因为每次计算的贡献是以s为起点或以t为终点，而更新贡献的时候是从叶子往上更新的，所以要减掉lca的贡献 然后对于每个人，只有在$dep_s=dep_lca+w_lca$的情况下才会多算lca的答案，减去多算的一次即可 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;const int N = 3e5;using namespace std;struct player&#123; int s,t,lca,len;&#125;p[N + 5];int n,m,w[N + 5],ans[N + 5],c[N * 2 + 5],s[N + 5];int dep[N + 5],size[N + 5],son[N + 5],top[N + 5],fa[N + 5];vector &lt;int&gt; d[N + 5],sl[N + 5],tl[N + 5],ll[N + 5];void dfs1(int u,int f)&#123; dep[u] = dep[f] + 1; size[u] = 1; fa[u] = f; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == f) continue; dfs1(v,u); size[u] += size[v]; if (size[v] &gt; size[son[u]]) son[u] = v; &#125;&#125;void dfs2(int u,int to)&#123; top[u] = to; if (son[u]) dfs2(son[u],to); vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v != fa[u] &amp;&amp; v != son[u]) dfs2(v,v); &#125;&#125;int get_lca(int x,int y)&#123; while (top[x] != top[y]) &#123; if (dep[top[x]] &lt; dep[top[y]]) swap(x,y); x = fa[top[x]]; &#125; if (dep[x] &gt; dep[y]) swap(x,y); return x;&#125;void dfs3(int u)&#123; int goal = dep[u] + w[u],res = c[goal]; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa[u]) continue; dfs3(v); &#125; c[dep[u]] += s[u]; ans[u] += c[goal] - res; for (int i = 0;i &lt; sl[u].size();i++) c[dep[sl[u][i]]]--;&#125;void dfs4(int u)&#123; int goal = w[u] - dep[u] + N,res = c[goal]; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa[u]) continue; dfs4(v); &#125; for (int i = 0;i &lt; ll[u].size();i++) c[ll[u][i] + N]++; ans[u] += c[w[u] - dep[u] + N] - res; for (int i = 0;i &lt; tl[u].size();i++) c[tl[u][i] + N]--;&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); int u,v; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d\",&amp;u,&amp;v); d[u].push_back(v); d[v].push_back(u); &#125; for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;w[i]); dfs1(1,0); dfs2(1,1); for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d\",&amp;p[i].s,&amp;p[i].t); p[i].lca = get_lca(p[i].s,p[i].t); s[p[i].s]++; p[i].len = dep[p[i].s] + dep[p[i].t] - 2 * dep[p[i].lca]; sl[p[i].lca].push_back(p[i].s); tl[p[i].lca].push_back(p[i].len - dep[p[i].t]); ll[p[i].t].push_back(p[i].len - dep[p[i].t]); &#125; dfs3(1); dfs4(1); for (int i = 1;i &lt;= m;i++) if (dep[p[i].s] == dep[p[i].lca] + w[p[i].lca]) ans[p[i].lca]--; for (int i = 1;i &lt;= n;i++) printf(\"%d \",ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"树上差分","slug":"树上差分","permalink":"https://sdlang.ml/tags/树上差分/"},{"name":"lca","slug":"lca","permalink":"https://sdlang.ml/tags/lca/"}]},{"title":"洛谷 P2661 信息传递","slug":"p2661","date":"2019-09-09T16:00:00.000Z","updated":"2019-10-08T08:28:31.753Z","comments":true,"path":"2019/09/10/p2661/","link":"","permalink":"https://sdlang.ml/2019/09/10/p2661/","excerpt":"有 n 个同学（编号为 1 到 n ）正在玩一个信息传递的游戏。在游戏里每人都有一个固定的信息传递对象，其中，编号为 i 的同学的信息传递对象是编号为$T_i$的同学。 游戏开始时，每人都只知道自己的生日。之后每一轮中，所有人会同时将自己当前所知的生日信息告诉各自的信息传递对象（注意：可能有人可以从若干人那里获取信息， 但是每人只会把信息告诉一个人，即自己的信息传递对象）。当有人从别人口中得知自己的生日时，游戏结束。请问该游戏一共可以进行几轮？","text":"有 n 个同学（编号为 1 到 n ）正在玩一个信息传递的游戏。在游戏里每人都有一个固定的信息传递对象，其中，编号为 i 的同学的信息传递对象是编号为$T_i$的同学。 游戏开始时，每人都只知道自己的生日。之后每一轮中，所有人会同时将自己当前所知的生日信息告诉各自的信息传递对象（注意：可能有人可以从若干人那里获取信息， 但是每人只会把信息告诉一个人，即自己的信息传递对象）。当有人从别人口中得知自己的生日时，游戏结束。请问该游戏一共可以进行几轮？ 自己直接被降智，刚开始竟然没想出来 其实就是个并查集求最小环 果然不做做noip题就变傻了= = Code123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;const int N = 2e5;using namespace std;int n,a,fa[N + 5],ans,cnt;vector &lt;int&gt; d[N + 5];int find(int x)&#123; cnt++; if (x == fa[x]) return x; return find(fa[x]);&#125;int main()&#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) fa[i] = i; ans = N; for (int i = 1;i &lt;= n;i++) &#123; cnt = 0; scanf(\"%d\",&amp;a); if (find(a) == i) ans = min(ans,cnt); else fa[i] = a; &#125; printf(\"%d\\n\",ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"并查集","slug":"并查集","permalink":"https://sdlang.ml/tags/并查集/"}]},{"title":"洛谷 P2664 树上游戏","slug":"p2664","date":"2019-09-07T16:00:00.000Z","updated":"2019-09-08T07:19:18.601Z","comments":true,"path":"2019/09/08/p2664/","link":"","permalink":"https://sdlang.ml/2019/09/08/p2664/","excerpt":"lrb有一棵树，树的每个节点有个颜色。给一个长度为n的颜色序列，定义$s(i,j)$为$i$到$j$的颜色数量。以及 sum_i = \\sum_{j=1}^{n}s(i,j)现在他想让你求出所有的$sum[i]$","text":"lrb有一棵树，树的每个节点有个颜色。给一个长度为n的颜色序列，定义$s(i,j)$为$i$到$j$的颜色数量。以及 sum_i = \\sum_{j=1}^{n}s(i,j)现在他想让你求出所有的$sum[i]$ 这题真是难，点分治神题 我们考虑一个性质，对于一个点$i$，如果它的颜色在到根的路径中是第一次出现，那么对于和$i$不在一个子树的点$j$，对$j$都有$i$的子树大小$size_i$的贡献 然后有了这个性质，就好做了 找完重心后预处理出来实际的$size$，用$sum$来记录所有点的贡献，$s$是这个颜色的贡献 而我们不是用点去更新答案，是用颜色来更新答案，所以要枚举子树，去掉这个子树的贡献来统计答案 于是再有$X$表示除了这个子树的点数和，$co$表示这个点到根的颜色数 然后记录下这个点到根的所有颜色的$s$的和，$s$是要被减去的 那么$ans+=sum-s+co\\times X$，然后单独更新一下根就是$ans+=sum-s_{c_{rt}}+size_{rt}$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;const int N = 1e5;using namespace std;int n,c[N + 5],size[N + 5],maxp[N + 5],rt,su,vis[N + 5],cnt[N + 5];long long sum,s[N + 5],ros,X,ans[N + 5];vector &lt;int&gt; d[N + 5];void get_rt(int u,int fa)&#123; size[u] = 1; maxp[u] = 0; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa || vis[v]) continue; get_rt(v,u); size[u] += size[v]; maxp[u] = max(maxp[u],size[v]); &#125; maxp[u] = max(maxp[u],su - size[u]); if (maxp[u] &lt; maxp[rt]) rt = u;&#125;void get_size(int u,int fa)&#123; size[u] = 1; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa || vis[v]) continue; get_size(v,u); size[u] += size[v]; &#125;&#125;void dfs(int u,int fa,int w)&#123; cnt[c[u]]++; if (cnt[c[u]] == 1) &#123; s[c[u]] += w * size[u]; sum += w * size[u]; &#125; if (!cnt[c[rt]]) ros += w; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa || vis[v]) continue; dfs(v,u,w); &#125; cnt[c[u]]--;&#125;void upd(int u,int fa,int co,int su)&#123; cnt[c[u]]++; if (cnt[c[u]] == 1) &#123; co++; su += s[c[u]]; &#125; ans[u] += sum - su + co * X; if (!cnt[c[rt]]) ans[u] += ros; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v == fa || vis[v]) continue; upd(v,u,co,su); &#125; cnt[c[u]]--;&#125;void calc(int u)&#123; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (vis[v]) continue; dfs(v,u,1); &#125; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (vis[v]) continue; dfs(v,u,-1); X = size[u] - size[v]; upd(v,0,0,0); dfs(v,u,1); &#125; ans[u] += sum - s[c[u]] + size[u]; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (vis[v]) continue; dfs(v,u,-1); &#125;&#125;void solve(int u)&#123; vis[u] = 1; ros = 1; get_size(u,0); calc(u); vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (vis[v]) continue; maxp[0] = N; su = size[v]; rt = 0; get_rt(v,0); solve(rt); &#125;&#125;int main()&#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;c[i]); int u,v; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d\",&amp;u,&amp;v); d[u].push_back(v); d[v].push_back(u); &#125; su = n; maxp[0] = N; get_rt(1,0); get_size(rt,0); solve(rt); for (int i = 1;i &lt;= n;i++) printf(\"%lld\\n\",ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"点分治","slug":"点分治","permalink":"https://sdlang.ml/tags/点分治/"}]},{"title":"洛谷 P4178 Tree","slug":"p4178","date":"2019-09-04T16:00:00.000Z","updated":"2019-09-05T13:42:38.146Z","comments":true,"path":"2019/09/05/p4178/","link":"","permalink":"https://sdlang.ml/2019/09/05/p4178/","excerpt":"给你一棵树,以及这棵树上边的距离.问有多少对点它们两者间的距离小于等于K","text":"给你一棵树,以及这棵树上边的距离.问有多少对点它们两者间的距离小于等于K 点分治 我们如果开桶记录路径长度的数，那么需要维护一个单点加和前缀和，用树状数组维护就行了 不过还有种排序双指针的方法，复杂度一样，懒得写了qwq 复杂度$O(nlog^2n)$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;const int N = 4e4;const int INF = 4e5;using namespace std;struct node&#123; int to,cost;&#125;;int n,k,rt,maxp[N + 5],size[N + 5],su,vis[N + 5],ans,c[INF + 5],s[N + 5],num,cnt,now[N + 5];vector &lt;node&gt; d[N + 5];int lowbit(int x)&#123; return x &amp; (-x);&#125;void add(int x,int s)&#123; for (;x &lt;= k;x += lowbit(x)) c[x] += s;&#125;int query(int x)&#123; int ans = 0; for (;x;x -= lowbit(x)) ans += c[x]; return ans;&#125;void get_rt(int u,int fa)&#123; maxp[u] = 0; size[u] = 1; vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to; if (v == fa || vis[v]) continue; get_rt(v,u); size[u] += size[v]; maxp[u] = max(maxp[u],size[v]); &#125; maxp[u] = max(maxp[u],su - size[u]); if (maxp[u] &lt; maxp[rt]) rt = u;&#125;void get_dis(int u,int fa,int s)&#123; if (s &gt; k) return; now[++cnt] = s; vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to,w = (*it).cost; if (vis[v] || v == fa) continue; get_dis(v,u,s + w); &#125;&#125;void calc(int u)&#123; num = 0; vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to,w = (*it).cost; if (vis[v]) continue; cnt = 0; get_dis(v,u,w); for (int i = 1;i &lt;= cnt;i++) ans += query(k - now[i]) + 1; for (int i = 1;i &lt;= cnt;i++) &#123; s[++num] = now[i]; add(now[i],1); &#125; &#125; for (int i = 1;i &lt;= num;i++) add(s[i],-1);&#125;void solve(int u)&#123; vis[u] = 1; calc(u); vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to; if (vis[v]) continue; su = size[v]; rt = 0; maxp[0] = INF; get_rt(v,0); solve(rt); &#125;&#125;int main()&#123; scanf(\"%d\",&amp;n); int u,v,w; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d%d\",&amp;u,&amp;v,&amp;w); d[u].push_back((node)&#123;v,w&#125;); d[v].push_back((node)&#123;u,w&#125;); &#125; scanf(\"%d\",&amp;k); maxp[0] = INF; su = n; get_rt(1,0); solve(rt); printf(\"%d\\n\",ans); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"点分治","slug":"点分治","permalink":"https://sdlang.ml/tags/点分治/"},{"name":"树状数组","slug":"树状数组","permalink":"https://sdlang.ml/tags/树状数组/"}]},{"title":"洛谷 P2634 [国家集训队]聪聪可可","slug":"p2634","date":"2019-09-03T16:00:00.000Z","updated":"2019-09-05T13:39:28.728Z","comments":true,"path":"2019/09/04/p2634/","link":"","permalink":"https://sdlang.ml/2019/09/04/p2634/","excerpt":"聪聪和可可是兄弟俩，他们俩经常为了一些琐事打起来，例如家中只剩下最后一根冰棍而两人都想吃、两个人都想玩儿电脑（可是他们家只有一台电脑）……遇到这种问题，一般情况下石头剪刀布就好了，可是他们已经玩儿腻了这种低智商的游戏。 他们的爸爸快被他们的争吵烦死了，所以他发明了一个新游戏：由爸爸在纸上画n个“点”，并用n-1条“边”把这n个“点”恰好连通（其实这就是一棵树）。并且每条“边”上都有一个数。接下来由聪聪和可可分别随即选一个点（当然他们选点时是看不到这棵树的），如果两个点之间所有边上数的和加起来恰好是3的倍数，则判聪聪赢，否则可可赢。 聪聪非常爱思考问题，在每次游戏后都会仔细研究这棵树，希望知道对于这张图自己的获胜概率是多少。现请你帮忙求出这个值以验证聪聪的答案是否正确。","text":"聪聪和可可是兄弟俩，他们俩经常为了一些琐事打起来，例如家中只剩下最后一根冰棍而两人都想吃、两个人都想玩儿电脑（可是他们家只有一台电脑）……遇到这种问题，一般情况下石头剪刀布就好了，可是他们已经玩儿腻了这种低智商的游戏。 他们的爸爸快被他们的争吵烦死了，所以他发明了一个新游戏：由爸爸在纸上画n个“点”，并用n-1条“边”把这n个“点”恰好连通（其实这就是一棵树）。并且每条“边”上都有一个数。接下来由聪聪和可可分别随即选一个点（当然他们选点时是看不到这棵树的），如果两个点之间所有边上数的和加起来恰好是3的倍数，则判聪聪赢，否则可可赢。 聪聪非常爱思考问题，在每次游戏后都会仔细研究这棵树，希望知道对于这张图自己的获胜概率是多少。现请你帮忙求出这个值以验证聪聪的答案是否正确。 一看就是点分治，注意下处理答案的时候就好了 每次处理出来这个子树的路径长度模$3$后的长度的个数$s_0,s_1,s_2$，再和之前累加的值$mp_0,mp_1,mp_2$更新答案 根自己到自己也就是$mp_0$刚开始赋为$1$，这样便于统计这个点到根的答案 最后加上每个点自己到自己的方案数也就是加上$n$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;const int N = 20000;using namespace std;int n,vis[N + 5],dis[N + 5],num,su,cnt,rt,size[N + 5],maxp[N + 5],s[5],ans,mp[5];struct node&#123; int to,cost;&#125;;vector &lt;node&gt; d[N + 5];void get_rt(int u,int fa)&#123; size[u] = 1; maxp[u] = 0; vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to; if (v == fa || vis[v]) continue; get_rt(v,u); size[u] += size[v]; maxp[u] = max(maxp[u],size[v]); &#125; maxp[u] = max(maxp[u],su - size[u]); if (maxp[u] &lt; maxp[rt]) rt = u;&#125;void get_dis(int u,int fa)&#123; s[dis[u]]++; vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to,w = (*it).cost; if (v == fa || vis[v]) continue; dis[v] = (dis[u] + w) % 3; get_dis(v,u); &#125;&#125;void calc(int u)&#123; vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to,w = (*it).cost; if (vis[v]) continue; dis[v] = w % 3; s[0] = s[1] = s[2] = 0; get_dis(v,u); ans += (mp[0] * s[0] + mp[1] * s[2] + mp[2] * s[1]) * 2; for (int i = 0;i &lt;= 2;i++) mp[i] += s[i]; &#125; for (int i = 0;i &lt;= 2;i++) mp[i] = 0;&#125;void solve(int u)&#123; vis[u] = 1; mp[0] = 1; calc(u); vector &lt;node&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it).to; if (vis[v]) continue; su = size[v]; rt = 0; maxp[0] = size[v]; get_rt(v,0); solve(rt); &#125;&#125;int gcd(int a,int b)&#123; if (!b) return a; return gcd(b,a % b);&#125;int main()&#123; scanf(\"%d\",&amp;n); int u,v,w; for (int i = 1;i &lt; n;i++) &#123; scanf(\"%d%d%d\",&amp;u,&amp;v,&amp;w); d[u].push_back((node)&#123;v,w&#125;); d[v].push_back((node)&#123;u,w&#125;); &#125; su = n; maxp[rt] = n; get_rt(1,0); solve(rt); ans += n; printf(\"%d/%d\\n\",ans / gcd(ans,n * n),n * n / gcd(ans,n * n)); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"点分治","slug":"点分治","permalink":"https://sdlang.ml/tags/点分治/"}]},{"title":"cdq分治和整体二分学习笔记","slug":"cdqfzztef","date":"2019-08-31T16:00:00.000Z","updated":"2019-09-08T11:21:04.887Z","comments":true,"path":"2019/09/01/cdqfzztef/","link":"","permalink":"https://sdlang.ml/2019/09/01/cdqfzztef/","excerpt":"终于学完了cdq分治和整体二分，写篇文章总结下吧qwq","text":"终于学完了cdq分治和整体二分，写篇文章总结下吧qwq cdq分治cdq分治是用来解决经典的偏序问题 其实归并排序求逆序对就是求偏序问题的做法，当合并左右两个有序的序列时，两个指针分别移动，当右边比左边小时就更新答案 那么我们回到三维偏序问题，也就是求所有满足$a_i&lt;a_j,b_i&lt;b_j,c_i&lt;c_j$的个数 首先我们可以对$a$这一维排序，保证第一维有序 然后对$b$这一维归并，归并的时候将$c$这维加入树状数组，归并完之后更新答案查树状数组就好了 复杂度$O(nlog^2n)$ 洛谷板子题的代码，因为有重复元素，并且还有$=$，所以还要去重 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#define N 100000using namespace std;struct node&#123; int a,b,c,w,f;&#125;d[N + 5],t[N + 5];int n,K,cnt,c[N * 2 + 5],ans[N + 5];int cmp(node x,node y)&#123; if (x.a == y.a) if (x.b == y.b) return x.c &lt; y.c; else return x.b &lt; y.b; return x.a &lt; y.a;&#125;int lowbit(int x)&#123; return x &amp; (-x);&#125;void add(int k,int x)&#123; for (int i = k;i &lt;= K;i += lowbit(i)) c[i] += x;&#125;int query(int k)&#123; int ans = 0; for (int i = k;i;i -= lowbit(i)) ans += c[i]; return ans;&#125;void cdq_(int l,int r)&#123; if (l == r) return; int mid = l + r &gt;&gt; 1; cdq_(l,mid); cdq_(mid + 1,r); int ll = l,it = l; for (int j = mid + 1;j &lt;= r;j++) &#123; while (ll &lt;= mid &amp;&amp; d[ll].b &lt;= d[j].b) &#123; add(d[ll].c,d[ll].w); t[it++] = d[ll]; ll++; &#125; d[j].f += query(d[j].c); t[it++] = d[j]; &#125; for (int i = ll;i &lt;= mid;i++) t[it++] = d[i]; for (int i = l;i &lt; ll;i++) add(d[i].c,-d[i].w); for (int i = l;i &lt; it;i++) d[i] = t[i]; &#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;K); for (int i = 1;i &lt;= n;i++) &#123; scanf(\"%d%d%d\",&amp;d[i].a,&amp;d[i].b,&amp;d[i].c); d[i].w = 1; &#125; sort(d + 1,d + n + 1,cmp); cnt = 1; for (int i = 2;i &lt;= n;i++) if (d[cnt].a == d[i].a &amp;&amp; d[cnt].b == d[i].b &amp;&amp; d[cnt].c == d[i].c) d[cnt].w++; else d[++cnt] = d[i]; cdq_(1,cnt); for (int i = 1;i &lt;= cnt;i++) ans[d[i].f + d[i].w - 1] += d[i].w; for (int i = 0;i &lt; n;i++) printf(\"%d\\n\",ans[i]); return 0;&#125; 然后cdq分治的另一重大用处就是优化dp 当我们求出转移方程之后，如果转移条件满足偏序的性质，那么就可以用cdq分治来优化 拿道题来说 [USACO15FEB]牛跳房子（金）Cow Hopscotch (Gold) 就像人类喜欢跳格子游戏一样，FJ的奶牛们发明了一种新的跳格子游戏。虽然这种接近一吨的笨拙的动物玩跳格子游戏几乎总是不愉快地结束，但是这并没有阻止奶牛们在每天下午参加跳格子游戏 游戏在一个R*C的网格上进行，每个格子有一个取值在1-k之间的整数标号，奶牛开始在左上角的格子，目的是通过若干次跳跃后到达右下角的格子，当且仅当格子A和格子B满足如下条件时能从格子A跳到格子B： 1.B格子在A格子的严格右方(B的列号严格大于A的列号) 2.B格子在A格子的严格下方(B的行号严格大于A的行号) 3.B格子的标号和A格子的标号不同 请你帮助奶牛计算出从左上角的格子到右下角的格子一共有多少种不同的方案 首先我们可以设$dp_{ij}$表示走到坐标为$(i,j)$这个格子的方案数 然后很快的写出状态转移方程：$dp_{ij} = \\sum_{k=1}^{i-1}\\sum_{h=1}^{j-1} dp_{kh} (a_{ij}=a_{kh})$ 但是这样是$O(n^4)$的，于是考虑优化 可以对列分治然后按行循环，先更新左区间再更新右区间，每次更新答案的时候减掉重复的标号数就可以了 复杂度$O(n^2log^2n)$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;const int N = 750;const int p = 1e9 + 7;using namespace std;int n,m,k,a[N + 5][N + 5],f[N + 5][N + 5],s[N * N + 5],t[N * N + 5],ti;void cdq_(int l,int r)&#123; if (l == r) return; int mid = l + r &gt;&gt; 1; cdq_(l,mid); int tot = 0; ti++; for (int j = 1;j &lt;= m;j++) &#123; for (int i = r;i &gt;= mid + 1;i--) &#123; if (t[a[i][j]] &lt; ti) t[a[i][j]] = ti,s[a[i][j]] = 0; f[i][j] = ((f[i][j] + tot - s[a[i][j]]) % p + p) % p; &#125; for (int i = l;i &lt;= mid;i++) &#123; if (t[a[i][j]] &lt; ti) t[a[i][j]] = ti,s[a[i][j]] = 0; s[a[i][j]] = (s[a[i][j]] + f[i][j]) % p; tot = (tot + f[i][j]) % p; &#125; &#125; cdq_(mid + 1,r);&#125;int main()&#123; scanf(\"%d%d%d\",&amp;n,&amp;m,&amp;k); for (int i = 1;i &lt;= n;i++) for (int j = 1;j &lt;= m;j++) scanf(\"%d\",&amp;a[i][j]); f[1][1] = 1; cdq_(1,n); printf(\"%d\\n\",f[n][m]); return 0;&#125; 整体二分整体二分是一种多次询问且对于答案可二分的离线做法 主要思想是将操作离线下来，全部对其二分 一般复杂度为$O(nlog^2n)$，加一些奇技淫巧可以到$(nlogn)$ 这个做法支持所有答案可以二分，不强制在线且没有区间加的数据结构题 我们拿区间第k大来说，用$solve(l,r,L,R)$表示$L~R$的询问答案在$[l,r]$范围内 那么取$mid=l+r&gt;&gt;1$，如果要加的数比$mid$小，那么就加进去，遇到询问直接查前缀和排名（用树状数组维护就可以） 这样一直二分直到$l=r$就是$L~R$询问的答案了 我是把询问和点揉在一起二分的，常数可能大点qwq Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#define N 100000#define M 5000const int INF = 1e9;using namespace std;struct Q&#123; int l,r,typ,id,k;&#125;q[N + M + 5],q1[N + M + 5],q2[N + M + 5];int n,m,cnt,a[N + 5],ans[N + 5],c[N + 5];int lowbit(int x)&#123; return x &amp; (-x);&#125;void add(int x,int z)&#123; for (;x &lt;= n;x += lowbit(x)) c[x] += z;&#125;int query(int x)&#123; int ans = 0; for (;x;x -= lowbit(x)) ans += c[x]; return ans;&#125;void solve(int l,int r,int L,int R)&#123; if (L &gt; R) return; if (l == r) &#123; for (int i = L;i &lt;= R;i++) if (q[i].typ == 2) ans[q[i].id] = l; return; &#125; int mid = l + r &gt;&gt; 1,cnt1 = 0,cnt2 = 0; for (int i = L;i &lt;= R;i++) if (q[i].typ == 1) &#123; if (q[i].l &lt;= mid) &#123; q1[++cnt1] = q[i]; add(q[i].id,1); &#125; else q2[++cnt2] = q[i]; &#125; else &#123; int x = query(q[i].r) - query(q[i].l - 1); if (q[i].k &lt;= x) q2[++cnt2] = q[i]; else &#123; q[i].k -= x; q1[++cnt1] = q[i]; &#125; &#125; for (int i = 1;i &lt;= cnt1;i++) if (q1[i].typ == 1) add(q1[i].id,-1); for (int i = L;i &lt;= L + cnt1 - 1;i++) q[i] = q1[i - L + 1]; for (int i = L + cnt1;i &lt;= R;i++) q[i] = q2[i - L - cnt1 + 1]; solve(l,mid,L,L + cnt1 - 1); solve(mid + 1,r,L + cnt1,R);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for (int i = 1;i &lt;= n;i++) &#123; scanf(\"%d\",&amp;a[i]); q[++cnt] = (Q)&#123;a[i],1,1,i,0&#125;; &#125; int l,r,k; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%d\",&amp;l,&amp;r,&amp;k); q[++cnt] = (Q)&#123;l,r,2,i,k&#125;; &#125; solve(-INF,INF,1,cnt); for (int i = 1;i &lt;= m;i++) printf(\"%d\\n\",ans[i]); return 0;&#125; 当然如果有单点修改也是很容易的，我们直接把这个修改操作当成这个位置原来的数$-1$，改成的新数$+1$就好了","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://sdlang.ml/categories/学习笔记/"}],"tags":[{"name":"整体二分","slug":"整体二分","permalink":"https://sdlang.ml/tags/整体二分/"},{"name":"cdq分治","slug":"cdq分治","permalink":"https://sdlang.ml/tags/cdq分治/"}]},{"title":"CF1017G The Tree","slug":"cf1017g","date":"2019-08-26T16:00:00.000Z","updated":"2019-08-27T13:32:55.362Z","comments":true,"path":"2019/08/27/cf1017g/","link":"","permalink":"https://sdlang.ml/2019/08/27/cf1017g/","excerpt":"给定一棵树，维护以下3个操作： 1：1 x表示如果节点x为白色，则将其染黑。否则对这个节点的所有儿子递归进行相同操作 2：2 x表示将以节点x为root的子树染白。 3：3 x表示查询节点x的颜色","text":"给定一棵树，维护以下3个操作： 1：1 x表示如果节点x为白色，则将其染黑。否则对这个节点的所有儿子递归进行相同操作 2：2 x表示将以节点x为root的子树染白。 3：3 x表示查询节点x的颜色 一道很好的树剖题 首先可以把1操作看作单点加$1$，于是我们把每个节点初始赋为$-1$，查询颜色只要看它开始到根的最大后缀就可以了 但是2操作如果直接清$-1$可能它的父亲对子树有影响，所以我们修改完之后把$x$点的权值减去答案$+1$ 2操作顺序写反了，然后还对拍什么的调了超久= =123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;const int N = 1e5;const int INF = 2e7;#define zrt k &lt;&lt; 1#define yrt k &lt;&lt; 1 | 1using namespace std;int n,m,size[N + 5],fa[N + 5],son[N + 5],dep[N + 5],top[N + 5],dfn[N + 5],dfn_cnt;vector &lt;int&gt; d[N + 5];void dfs1(int u)&#123; size[u] = 1; dep[u] = dep[fa[u]] + 1; vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); dfs1(v); size[u] += size[v]; if (size[v] &gt; size[son[u]]) son[u] = v; &#125;&#125;void dfs2(int u,int to)&#123; top[u] = to; dfn[u] = ++dfn_cnt; if (son[u]) dfs2(son[u],to); vector &lt;int&gt;::iterator it; for (it = d[u].begin();it != d[u].end();it++) &#123; int v = (*it); if (v != son[u]) dfs2(v,v); &#125;&#125;struct node&#123; int ans,su,ct; node () &#123; su = ct = 0; ans = -INF; &#125;&#125;;struct Seg&#123; node s[N * 4 + 5]; node upd(node x,node y) &#123; node k; k.ans = max(y.ans,y.su + x.ans); k.su = x.su + y.su; return k; &#125; void build(int k,int l,int r) &#123; if (l == r) &#123; s[k].su = s[k].ans = -1; return; &#125; int mid = l + r &gt;&gt; 1; build(zrt,l,mid); build(yrt,mid + 1,r); s[k] = upd(s[zrt],s[yrt]); &#125; void cha(int k,int l,int r,int z) &#123; s[k].su = (r - l + 1) * z; s[k].ans = z; s[k].ct = z; &#125; void pushdown(int k,int l,int r,int mid) &#123; if (s[k].ct != 0) &#123; cha(zrt,l,mid,s[k].ct); cha(yrt,mid + 1,r,s[k].ct); s[k].ct = 0; &#125; &#125; void add(int k,int l,int r,int x,int z) &#123; if (l == r) &#123; s[k].su += z; s[k].ans += z; return; &#125; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &lt;= mid) add(zrt,l,mid,x,z); else add(yrt,mid + 1,r,x,z); s[k] = upd(s[zrt],s[yrt]); &#125; void change(int k,int l,int r,int x,int y,int z) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) &#123; cha(k,l,r,z); return; &#125; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) change(yrt,mid + 1,r,x,y,z); else if (y &lt;= mid) change(zrt,l,mid,x,y,z); else change(zrt,l,mid,x,y,z),change(yrt,mid + 1,r,x,y,z); s[k] = upd(s[zrt],s[yrt]); &#125; node query(int k,int l,int r,int x,int y) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) return s[k]; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) return query(yrt,mid + 1,r,x,y); else if (y &lt;= mid) return query(zrt,l,mid,x,y); else return upd(query(zrt,l,mid,x,y),query(yrt,mid + 1,r,x,y)); &#125; node query(int x) &#123; node k; while (top[x] != 1) &#123; k = upd(query(1,1,n,dfn[top[x]],dfn[x]),k); x = fa[top[x]]; &#125; k = upd(query(1,1,n,1,dfn[x]),k); return k; &#125;&#125;tree;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); int u,v; for (int i = 2;i &lt;= n;i++) &#123; scanf(\"%d\",&amp;u); d[u].push_back(i); fa[i] = u; &#125; dfs1(1); dfs2(1,1); tree.build(1,1,n); node k,x; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d\",&amp;u,&amp;v); if (u == 1) tree.add(1,1,n,dfn[v],1); else if (u == 2) &#123; tree.change(1,1,n,dfn[v],dfn[v] + size[v] - 1,-1); x = tree.query(v); tree.add(1,1,n,dfn[v],-x.ans - 1); &#125; else &#123; k = tree.query(v); if (k.ans &gt;= 0) printf(\"black\\n\"); else printf(\"white\\n\"); &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"},{"name":"树链剖分","slug":"树链剖分","permalink":"https://sdlang.ml/tags/树链剖分/"}]},{"title":"SP3266 KQUERY - K-query","slug":"sp3266","date":"2019-08-24T16:00:00.000Z","updated":"2019-08-27T02:06:01.807Z","comments":true,"path":"2019/08/25/sp3266/","link":"","permalink":"https://sdlang.ml/2019/08/25/sp3266/","excerpt":"给定一个长度为n的序列a[1]到a[n] q次询问:给定i，j，k，求出a[i]到a[j]中大于k的个数","text":"给定一个长度为n的序列a[1]到a[n] q次询问:给定i，j，k，求出a[i]到a[j]中大于k的个数 主席树裸题，但是懒得写 刚开始写了个莫队+树状数组，复杂度是没问题的$O(n\\sqrt{q}logn)$，但是wa了，也懒得调了 然后还有种离线做法 将询问按$k$降序排序，对$a$降序排序 我们用一个指针$l$，如果$l$没到头并且$a[l] &gt; k$，那么就往后移指针，并且把对应位置单点加$1$，答案就转化为了区间查询和 因为$l$从头到尾最多移一次，所以时间复杂度$O(nlogn)$ Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;const int N = 3e4;const int M = 2e5;#define zrt k &lt;&lt; 1#define yrt k &lt;&lt; 1 | 1using namespace std;struct ad&#123; int id,v;&#125;a[N + 5];struct node&#123; int l,r,k,id;&#125;q[M + 5];int n,m,ans[M + 5],cnt;int cmp1(ad x,ad y)&#123; return x.v &gt; y.v;&#125;int cmp2(node x,node y)&#123; return x.k &gt; y.k;&#125;struct dd&#123; int su,tag;&#125;;struct Seg&#123; dd s[N * 4 + 5]; void pushup(int k) &#123; s[k].su = s[zrt].su + s[yrt].su; &#125; void add(int k,int l,int r,int x,int z) &#123; if (l == r) &#123; s[k].su += z; return; &#125; int mid = l + r &gt;&gt; 1; if (x &lt;= mid) add(zrt,l,mid,x,z); else add(yrt,mid + 1,r,x,z); pushup(k); &#125; int query(int k,int l,int r,int x,int y) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) return s[k].su; int mid = l + r &gt;&gt; 1; if (x &gt; mid) return query(yrt,mid + 1,r,x,y); else if (y &lt;= mid) return query(zrt,l,mid,x,y); else return query(zrt,l,mid,x,y) + query(yrt,mid + 1,r,x,y); &#125;&#125;tree;int main()&#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) &#123; scanf(\"%d\",&amp;a[i].v); a[i].id = i; &#125; scanf(\"%d\",&amp;m); for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%d\",&amp;q[i].l,&amp;q[i].r,&amp;q[i].k); q[i].id = i; &#125; sort(a + 1,a + n + 1,cmp1); sort(q + 1,q + m + 1,cmp2); int l = 1; for (int i = 1;i &lt;= m;i++) &#123; while (l &lt;= n &amp;&amp; a[l].v &gt; q[i].k) &#123; tree.add(1,1,n,a[l].id,1); l++; &#125; ans[q[i].id] = tree.query(1,1,n,q[i].l,q[i].r); &#125; for (int i = 1;i &lt;= m;i++) printf(\"%d\\n\",ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"主席树","slug":"主席树","permalink":"https://sdlang.ml/tags/主席树/"},{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"},{"name":"莫队","slug":"莫队","permalink":"https://sdlang.ml/tags/莫队/"}]},{"title":"洛谷 P1527 [国家集训队]矩阵乘法","slug":"p1527","date":"2019-08-21T16:00:00.000Z","updated":"2019-08-27T03:13:58.731Z","comments":true,"path":"2019/08/22/p1527/","link":"","permalink":"https://sdlang.ml/2019/08/22/p1527/","excerpt":"矩阵第k小 一道练习整体二分的比较好的题","text":"矩阵第k小 一道练习整体二分的比较好的题 这道题把序列查询区间第$k$小搬到了矩阵上，但是仍然满足二分性质，所以我们还是可以整体二分 而我们沿用序列上的做法，把点和询问都离线下来，揉在一起整体二分 唯一不一样的地方就是需要二维树状数组，这个很好理解吧qwq 复杂度$O(Qlog^3n)$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;const int N = 500;const int M = 6e4;const int N2 = 250000;const int INF = 1e9;using namespace std;struct node&#123; int x1,y1,x2,y2,k,id;&#125;q[M + N2 + 5],q1[M + N2 + 5],q2[M + N2 + 5];int n,m,a[N + 5][N + 5],ans[M + 5],c[N + 5][N + 5],cnt;int lowbit(int x)&#123; return x &amp; (-x);&#125;void add(int x,int y,int s)&#123; for (int i = x;i &lt;= n;i += lowbit(i)) for (int j = y;j &lt;= n;j += lowbit(j)) c[i][j] += s;&#125;int query(int x,int y)&#123; if (!x || !y) return 0; int ans = 0; for (int i = x;i;i -= lowbit(i)) for (int j = y;j;j -= lowbit(j)) ans += c[i][j]; return ans;&#125;int query_sum(int x1,int y1,int x2,int y2)&#123; return query(x2,y2) - query(x1 - 1,y2) - query(x2,y1 - 1) + query(x1 - 1,y1 - 1);&#125;void solve(int l,int r,int L,int R)&#123; if (L &gt; R) return; if (l == r) &#123; for (int i = L;i &lt;= R;i++) if (q[i].id) ans[q[i].id] = l; return; &#125; int mid = l + r &gt;&gt; 1,cnt1 = 0,cnt2 = 0; for (int i = L;i &lt;= R;i++) if (q[i].id == 0) &#123; if (q[i].k &lt;= mid) &#123; add(q[i].x1,q[i].y1,1); q1[++cnt1] = q[i]; &#125; else q2[++cnt2] = q[i]; &#125; else &#123; int x = query_sum(q[i].x1,q[i].y1,q[i].x2,q[i].y2); if (x &gt;= q[i].k) q1[++cnt1] = q[i]; else &#123; q[i].k -= x; q2[++cnt2] = q[i]; &#125; &#125; for (int i = 1;i &lt;= cnt1;i++) if (q1[i].id == 0) add(q1[i].x1,q1[i].y1,-1); for (int i = L;i &lt;= L + cnt1 - 1;i++) q[i] = q1[i - L + 1]; for (int i = L + cnt1;i &lt;= R;i++) q[i] = q2[i - L - cnt1 + 1]; solve(l,mid,L,L + cnt1 - 1); solve(mid + 1,r,L + cnt1,R);&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for (int i = 1;i &lt;= n;i++) for (int j = 1;j &lt;= n;j++) &#123; scanf(\"%d\",&amp;a[i][j]); q[++cnt] = (node)&#123;i,j,0,0,a[i][j],0&#125;; &#125; for (int i = 1;i &lt;= m;i++) &#123; cnt++; scanf(\"%d%d%d%d%d\",&amp;q[cnt].x1,&amp;q[cnt].y1,&amp;q[cnt].x2,&amp;q[cnt].y2,&amp;q[cnt].k); q[cnt].id = i; &#125; solve(0,INF,1,cnt); for (int i = 1;i &lt;= m;i++) printf(\"%d\\n\",ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"整体二分","slug":"整体二分","permalink":"https://sdlang.ml/tags/整体二分/"}]},{"title":"lrz数据结构水题赛题解","slug":"sjjgbs","date":"2019-08-20T16:00:00.000Z","updated":"2019-09-08T12:50:32.459Z","comments":true,"path":"2019/08/21/sjjgbs/","link":"","permalink":"https://sdlang.ml/2019/08/21/sjjgbs/","excerpt":"lrz的数据结构比赛","text":"lrz的数据结构比赛 似乎没人打(⊙︿⊙) 但是题解不能咕QAQ T1 膜犇犇这题真的是道签到题W(￣_￣)W 让你每次求一个区间$[l,r]$里包含数字种数最多的子段的最短长度 $O(n^2m)$的暴力是很好写的，每次枚举所有子段 然后优化一下，考虑二分这个最短长度，这样复杂度降到了$O(nlognm)$，可以拿到$50$分的好成绩 这样子就没法再优化了，那换种思路，我们想想这个子段的性质 首先最坏情况是这个区间所有的数都不一样，那答案就是整个区间 然后如果这个区间有一样的数，我们就往里缩区间（这里的缩区间并不是贪心的缩，贪心的是错的） 先把$[l,r]$这个区间数字种数求出来，这个很好求，值域很小，连离散化都不用，开个桶就可以了，当然你想写主席树我也不拦你 我们用双指针，$l$指针指向区间左端点，往右移$r$指针，当我们移到一个点时这个区间的数字种数等于询问的区间的数字种数，那么就可以更新答案，然后再往右移$l$指针 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;cstring&gt;#define N 5000using namespace std;int n,m,a[N + 5],cnt[N + 5],num;int main()&#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;a[i]); scanf(\"%d\",&amp;m); int opt,l,r,ll,rr,num,ans,now; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d\",&amp;l,&amp;r); memset(cnt,0,sizeof(cnt)); num = 0; ans = N + 5; now = 0; for (int j = l;j &lt;= r;j++) &#123; cnt[a[j]]++; if (cnt[a[j]] == 1) num++; &#125; memset(cnt,0,sizeof(cnt)); ll = l; rr = l; while (ll &lt;= r) &#123; while (now &lt; num &amp;&amp; rr &lt;= r) &#123; cnt[a[rr]]++; if (cnt[a[rr]] == 1) now++; rr++; &#125; if (now == num) ans = min(ans,rr - ll); cnt[a[ll]]--; if (cnt[a[ll]] == 0) now--; ll++; &#125; printf(\"%d\\n\",ans); &#125; return 0;&#125; T2 强迫症维护一个数据结构支持：区间加，区间求和，区间求$max$，区间赋值$max$ 这个题其实是吉司机线段树的板子题 先说下其他的能拿分的做法吧 用线段树乱搞，维护一个区间最大值和最小值，和要修改的值比较一下跳过区间，在随机数据下复杂的显得非常优秀，可以拿$20$分 分块，做法还蛮多的，但是$O(n\\sqrt{n})$似乎有点困难（被Juan_feng秒了），可以拿$40$分 我们注意到前三个操作用线段树是很好维护的，瓶颈在于第四个操作 那么考虑维护一个区间最小值$mi$，区间次小值$cmi$，区间最小值的出现次数$t$，对于和一个数$x$取$max$有三种可能： $x\\le mi$，说明对这个区间没有贡献 $mi&lt;x&lt;cmi$，说明只有$mi$被修改，拿$t$和$x - mi$修改区间和，更新区间最大值即可 $x\\le cmi$，这样子没法直接求，那么我们继续递归它的左右儿子，最终一定会到前两种情况并停止 注意下先下放加法标记再下放修改标记就好了 复杂度$O(nlog^2n)$，证明的话需要用到势能和均摊，蒟蒻太菜不会证，还是去看吉司机的证明吧（吉司机证的$O(nlogn)$是假的） Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#define zrt k &lt;&lt; 1#define yrt k &lt;&lt; 1 | 1#define N 300000#define INF 9999999999using namespace std;int n,m,a[N + 5];struct node&#123; int t; long long su,cmi,at,mi,ma,tag; node () &#123; ma = at = mi = t = su = tag = 0; cmi = INF; &#125;&#125;;struct Seg&#123; node s[N * 4 + 5]; node upd(node x,node y) &#123; node k; k.su = x.su + y.su; k.ma = max(x.ma,y.ma); if (x.mi == y.mi) &#123; k.mi = x.mi; k.t = x.t + y.t; k.cmi = min(x.cmi,y.cmi); &#125; else if (x.mi &lt; y.mi) &#123; k.mi = x.mi; k.t = x.t; k.cmi = min(x.cmi,y.mi); &#125; else &#123; k.mi = y.mi; k.t = y.t; k.cmi = min(x.mi,y.cmi); &#125; return k; &#125; void build(int k,int l,int r) &#123; if (l == r) &#123; s[k].mi = s[k].ma = s[k].su = a[l]; s[k].cmi = INF; s[k].t = 1; return; &#125; int mid = l + r &gt;&gt; 1; build(zrt,l,mid); build(yrt,mid + 1,r); s[k] = upd(s[zrt],s[yrt]); &#125; bool cha(int k,int l,int r,long long z) &#123; if (z &lt;= s[k].mi) return 1; if (z &lt;= s[k].cmi) &#123; s[k].su += (long long)s[k].t * (z - s[k].mi); s[k].mi = z; s[k].ma = max(s[k].ma,z); s[k].tag = max(z,s[k].tag); return 1; &#125; return 0; &#125; void jia(int k,int l,int r,long long z) &#123; s[k].su += z * (long long)(r - l + 1); s[k].ma += z; s[k].mi += z; s[k].cmi += z; s[k].at += z; if (s[k].tag) s[k].tag += z; &#125; void pushdown(int k,int l,int r,int mid) &#123; if (s[k].at) &#123; jia(zrt,l,mid,s[k].at); jia(yrt,mid + 1,r,s[k].at); s[k].at = 0; &#125; if (s[k].tag) &#123; cha(zrt,l,mid,s[k].tag); cha(yrt,mid + 1,r,s[k].tag); s[k].tag = 0; &#125; &#125; void change(int k,int l,int r,int x,int y,int z) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) &#123; if (cha(k,l,r,(long long)z)) return; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); change(zrt,l,mid,x,y,z); change(yrt,mid + 1,r,x,y,z); s[k] = upd(s[zrt],s[yrt]); return; &#125; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) change(yrt,mid + 1,r,x,y,z); else if (y &lt;= mid) change(zrt,l,mid,x,y,z); else change(zrt,l,mid,x,y,z),change(yrt,mid + 1,r,x,y,z); s[k] = upd(s[zrt],s[yrt]); &#125; void add(int k,int l,int r,int x,int y,int z) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) &#123; jia(k,l,r,(long long)z); return; &#125; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) add(yrt,mid + 1,r,x,y,z); else if (y &lt;= mid) add(zrt,l,mid,x,y,z); else add(zrt,l,mid,x,y,z),add(yrt,mid + 1,r,x,y,z); s[k] = upd(s[zrt],s[yrt]); &#125; node query(int k,int l,int r,int x,int y) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) return s[k]; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) return query(yrt,mid + 1,r,x,y); else if (y &lt;= mid) return query(zrt,l,mid,x,y); else return upd(query(zrt,l,mid,x,y),query(yrt,mid + 1,r,x,y)); &#125;&#125;tree;int main()&#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;a[i]); tree.build(1,1,n); scanf(\"%d\",&amp;m); int opt,l,r,z; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%d\",&amp;opt,&amp;l,&amp;r); if (opt == 1) &#123; scanf(\"%d\",&amp;z); tree.add(1,1,n,l,r,z); &#125; else if (opt == 2) &#123; scanf(\"%d\",&amp;z); tree.change(1,1,n,l,r,z); &#125; else if (opt == 3) printf(\"%lld\\n\",tree.query(1,1,n,l,r).su); else printf(\"%lld\\n\",tree.query(1,1,n,l,r).ma); &#125; return 0;&#125; T3 机房题意：有两个数组$A,B$，每次可以在$A$上区间加，在$B$上加对应$a_i\\times x$，询问$B$的区间和 直接暴力，复杂度$O(nm)$，有$20$分 其实这个东西仍然是可以用线段树维护的，分别维护$A,B$的区间和，那么维护的就是$\\sum b_i+w\\times\\sum a_i + \\Delta$，$\\Delta$是对$A$区间加之后产生的影响 对于每次区间对$B$加$w$，直接更新$w\\times\\sum a_i$，而对$A$区间加$t$，带入式子就是$t\\times w$，在线段树上多维护几个标记就好了 复杂度$O(nlogn)$，常数很大 当然还有一种线段树维护$3\\times 3$矩阵的操作，这样子常数更大，过不去 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#define N 300000#define zrt k &lt;&lt; 1#define yrt k &lt;&lt; 1 | 1using namespace std;int n,m,p = 1e9 + 7,a[N + 5],t[N + 5];struct node&#123; int ft,at,nt,su,sut; node () &#123; ft = at = nt = su = sut = 0; &#125;&#125;;struct Seg&#123; node s[N *4 + 5]; node upd(node x,node y) &#123; x.ft = x.at = x.nt = 0; x.su = (x.su + y.su) % p; x.sut = (x.sut + y.sut) % p; return x; &#125; void build(int k,int l,int r) &#123; if (l == r) &#123; s[k].su = a[l]; s[k].sut = t[l]; return; &#125; int mid = l + r &gt;&gt; 1; build(zrt,l,mid); build(yrt,mid + 1,r); s[k] = upd(s[zrt],s[yrt]); &#125; void cha(int k,int l,int r,int t) &#123; s[k].sut = (s[k].sut + 1LL * t * (r - l + 1)) % p; s[k].at = (s[k].at + t) % p; &#125; void jia(int k,int l,int r,int z) &#123; s[k].su = (s[k].su + s[k].sut * 1LL * z) % p; s[k].ft = (s[k].ft + z) % p; s[k].nt = (s[k].nt + s[k].at * 1LL * z) % p; &#125; void jiaa(int k,int l,int r,int z) &#123; s[k].su = (s[k].su + (r - l + 1) * 1LL * z) % p; s[k].nt = (s[k].nt + z) % p; &#125; void pushdown(int k,int l,int r,int mid) &#123; if (s[k].ft) &#123; jia(zrt,l,mid,s[k].ft); jia(yrt,mid + 1,r,s[k].ft); s[k].ft = 0; &#125; if (s[k].nt) &#123; jiaa(zrt,l,mid,s[k].nt); jiaa(yrt,mid + 1,r,s[k].nt); s[k].nt = 0; &#125; if (s[k].at) &#123; cha(zrt,l,mid,s[k].at); cha(yrt,mid + 1,r,s[k].at); s[k].at = 0; &#125; &#125; void change(int k,int l,int r,int x,int y,int t) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) &#123; cha(k,l,r,t); return; &#125; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) change(yrt,mid + 1,r,x,y,t); else if (y &lt;= mid) change(zrt,l,mid,x,y,t); else change(zrt,l,mid,x,y,t),change(yrt,mid + 1,r,x,y,t); s[k] = upd(s[zrt],s[yrt]); &#125; void add(int k,int l,int r,int x,int y,int z) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) &#123; jia(k,l,r,z); return; &#125; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) add(yrt,mid + 1,r,x,y,z); else if (y &lt;= mid) add(zrt,l,mid,x,y,z); else add(zrt,l,mid,x,y,z),add(yrt,mid + 1,r,x,y,z); s[k] = upd(s[zrt],s[yrt]); &#125; node query(int k,int l,int r,int x,int y) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) return s[k]; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) return query(yrt,mid + 1,r,x,y); else if (y &lt;= mid) return query(zrt,l,mid,x,y); else return upd(query(zrt,l,mid,x,y),query(yrt,mid + 1,r,x,y)); &#125;&#125;tree;int main()&#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;t[i]); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;a[i]); tree.build(1,1,n); scanf(\"%d\",&amp;m); int opt,l,r,z; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%d\",&amp;opt,&amp;l,&amp;r); if (opt == 1) &#123; scanf(\"%d\",&amp;z); tree.change(1,1,n,l,r,z); &#125; else if (opt == 2) &#123; scanf(\"%d\",&amp;z); tree.change(1,1,n,l,r,-z); &#125; else if (opt == 3) &#123; scanf(\"%d\",&amp;z); tree.add(1,1,n,l,r,z); &#125; else printf(\"%d\\n\",(tree.query(1,1,n,l,r).su % p + p) % p); &#125; return 0;&#125; T4 小$e$的考验这题本来是想当签到题出的说 我们思考一下，其实就是每次问你这个区间不能被$x$整除的数是否超过$k$个 我们注意到第一个子任务的$k$很小，那么我们可以大力线段树，维护一个区间$gcd$，如果这个$x|gcd$那么继续往里走，走到叶子节点就统计一下，复杂度$O(knlogn)$ 而第二个子任务的特点是值域小，那么我们可以去寻找一种值域做法 考虑根号分治，对序列分块，对于每个询问$x$，如果$x&lt;=\\sqrt{N},N$是值域，那么直接查，否则暴力枚举其倍数统计答案 对于小于$\\sqrt{N}$的询问，我们预处理出来$c_{ij}$表示第$i$个块能被$j$整除的个数，然后整块直接查$c$就好了 对于大于$\\sqrt{N}$的询问，预处理出$f_{ij}$表示前$i$个块中$j$的个数，对于所有整块，一边枚举倍数，一边前缀和一减统计答案就可以了 单点修改直接修改$c,f$，复杂度$O(n\\sqrt{n})$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#define N 500000#define M 500000#define MI 100000#define GN 316#define zrt k &lt;&lt; 1#define yrt k &lt;&lt; 1 | 1using namespace std;int n,a[N + 5],m,cnt,T,bs,blo[MI + 5],L[MI + 5],R[MI + 5],f[GN + 5][MI + 5],c[GN + 5][GN + 5];struct node&#123; int g;&#125;;int gcd(int a,int b)&#123; if (!b) return a; return gcd(b,a%b);&#125;struct Seg&#123; node s[N * 4 + 5]; node upd(node x,node y) &#123; node k; k.g = gcd(x.g,y.g); return k; &#125; void build(int k,int l,int r) &#123; if (l == r) &#123; s[k].g = a[l]; return; &#125; int mid = l + r &gt;&gt; 1; build(zrt,l,mid); build(yrt,mid + 1,r); s[k] = upd(s[zrt],s[yrt]); &#125; void change(int k,int l,int r,int x,int z) &#123; if (l == r) &#123; s[k].g = z; return; &#125; int mid = l + r &gt;&gt; 1; if (x &lt;= mid) change(zrt,l,mid,x,z); else change(yrt,mid + 1,r,x,z); s[k] = upd(s[zrt],s[yrt]); &#125; void query(int k,int l,int r,int x,int y,int z,int t) &#123; if (cnt &gt; t) return; if (l &gt;= x &amp;&amp; r &lt;= y &amp;&amp; s[k].g % z == 0) return; if (l == r) &#123; cnt++; return; &#125; int mid = l + r &gt;&gt; 1; if (x &gt; mid) query(yrt,mid + 1,r,x,y,z,t); else if (y &lt;= mid) query(zrt,l,mid,x,y,z,t); else query(zrt,l,mid,x,y,z,t),query(yrt,mid + 1,r,x,y,z,t); &#125;&#125;tree;int query(int l,int r,int z)&#123; if (blo[r] - blo[l] &lt;= 1) &#123; int ans = 0; for (int i = l;i &lt;= r;i++) if (a[i] % z == 0) ans++; return r - l + 1 - ans; &#125; else &#123; int ans = 0; for (int i = l;i &lt;= R[blo[l]];i++) if (a[i] % z == 0) ans++; for (int i = L[blo[r]];i &lt;= r;i++) if (a[i] % z == 0) ans++; if (z &gt; GN) for (int i = z;i &lt;= MI;i += z) ans += f[blo[r] - 1][i] - f[blo[l]][i]; else for (int i = blo[l] + 1;i &lt; blo[r];i++) ans += c[i][z]; return r - l + 1 - ans; &#125;&#125;void change(int l,int z)&#123; for(int i = blo[l];i &lt;= blo[n];i++) f[i][a[l]]--,f[i][z]++; for(int i = 1;i &lt;= GN;i++) &#123; if (a[l] % i == 0) c[blo[l]][i]--; if (z % i == 0) c[blo[l]][i]++; &#125; a[l] = z;&#125;int main()&#123; scanf(\"%d\",&amp;T); if (T == 1) //subtask 1 &#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;a[i]); tree.build(1,1,n); scanf(\"%d\",&amp;m); int opt,l,r,z,t; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%d\",&amp;opt,&amp;l,&amp;r); if (opt == 2) &#123; cnt = 0; scanf(\"%d%d\",&amp;t,&amp;z); tree.query(1,1,n,l,r,z,t); if (cnt &lt;= t) printf(\"YES\\n\"); else printf(\"NO\\n\"); &#125; else tree.change(1,1,n,l,r); &#125; &#125; else //subtask 2 &#123; scanf(\"%d\",&amp;n); bs = sqrt(n); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;a[i]); for (int i = 1;i &lt;= MI;i++) &#123; blo[i] = (i - 1) / bs + 1; if (!L[blo[i]]) L[blo[i]] = i; R[blo[i]] = i; &#125; for (int i = 1;i &lt;= blo[n];i++) &#123; for (int j = 1;j &lt;= MI;j++) f[i][j] = f[i - 1][j]; for (int j = L[i];j &lt;= R[i];j++) &#123; f[i][a[j]]++; for (int k = 1;k &lt;= GN;k++) if (a[j] % k == 0) c[i][k]++; &#125; &#125; scanf(\"%d\",&amp;m); int opt,l,r,z,t; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%d\",&amp;opt,&amp;l,&amp;r); if (opt == 2) &#123; scanf(\"%d%d\",&amp;t,&amp;z); if (query(l,r,z) &lt;= t) printf(\"YES\\n\"); else printf(\"NO\\n\"); &#125; else &#123; if (a[l] == r) continue; change(l,r); &#125; &#125; &#125; return 0;&#125; 代码写的有点丑= =","categories":[{"name":"比赛题解","slug":"比赛题解","permalink":"https://sdlang.ml/categories/比赛题解/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"},{"name":"分块","slug":"分块","permalink":"https://sdlang.ml/tags/分块/"},{"name":"根号分治","slug":"根号分治","permalink":"https://sdlang.ml/tags/根号分治/"}]},{"title":"CF444C DZY Loves Colors","slug":"cf444c","date":"2019-08-14T16:00:00.000Z","updated":"2019-08-27T03:12:59.242Z","comments":true,"path":"2019/08/15/cf444c/","link":"","permalink":"https://sdlang.ml/2019/08/15/cf444c/","excerpt":"DZY喜欢色彩，他热爱绘画。 在一个多姿多彩的日子里，DZY得到了一个彩色的缎带，它由N个单元组成（从左到右从1到n编号）。色带的第ii个单位的最初颜色是i。虽然颜色足够丰富，但我们仍然认为每个单元的颜色数量最初是0。 DZY热衷于绘画，我们知道。他拿起一把彩色X笔，用它在缎带上画一条线。在这种情况下，他就绘制了一段连续的单元。想象一下，单位i被涂之前颜色是Y。被涂之后时，单元的颜色变为X，令单位的颜色增加了∣X−Y∣。 DZY想要执行M个操作，每个操作可以是下列操作之一： 1、将区间[L,R]内单元绘制为颜色X。 2、询问[L,R]之间的单位颜色的总和（包括两者）。","text":"DZY喜欢色彩，他热爱绘画。 在一个多姿多彩的日子里，DZY得到了一个彩色的缎带，它由N个单元组成（从左到右从1到n编号）。色带的第ii个单位的最初颜色是i。虽然颜色足够丰富，但我们仍然认为每个单元的颜色数量最初是0。 DZY热衷于绘画，我们知道。他拿起一把彩色X笔，用它在缎带上画一条线。在这种情况下，他就绘制了一段连续的单元。想象一下，单位i被涂之前颜色是Y。被涂之后时，单元的颜色变为X，令单位的颜色增加了∣X−Y∣。 DZY想要执行M个操作，每个操作可以是下列操作之一： 1、将区间[L,R]内单元绘制为颜色X。 2、询问[L,R]之间的单位颜色的总和（包括两者）。 我们用线段树维护这一段的答案和这段颜色是否一样，如果一样是什么颜色 每次我们修改时候对相同的颜色段修改，不相同的颜色段递归暴力修改 对于一次区间覆盖，只会产生两个新的端点，所以只会暴力$O(n+2m)$次 复杂度$O(mlogn)$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#define N 100000#define zrt k &lt;&lt; 1#define yrt k &lt;&lt; 1 | 1using namespace std;int n,m;struct node&#123; int tag,c; long long su,at; node () &#123; at = su = c = tag = 0; &#125;&#125;;int myabs(int x)&#123; if (x &gt; 0) return x; return -x;&#125;struct Seg&#123; node s[N * 4 + 5]; node upd(node x,node y) &#123; node k; if (x.c == y.c) k.c = x.c; k.su = x.su + y.su; return k; &#125; void build(int k,int l,int r) &#123; if (l == r) &#123; s[k].c = l; s[k].su = 0LL; return; &#125; int mid = l + r &gt;&gt; 1; build(zrt,l,mid); build(yrt,mid + 1,r); s[k] = upd(s[zrt],s[yrt]); &#125; void pushdown(int k,int l,int r,int mid) &#123; if (!s[k].tag &amp;&amp; !s[k].at) return; if (s[k].tag) &#123; s[zrt].c = s[k].tag; s[yrt].c = s[k].tag; s[zrt].tag = s[k].tag; s[yrt].tag = s[k].tag; &#125; if (s[k].at) &#123; s[zrt].su += (long long)(mid - l + 1) * s[k].at; s[yrt].su += (long long)(r - mid) * s[k].at; s[zrt].su += s[k].at; s[yrt].su += s[k].at; &#125; s[k].tag = s[k].at = 0; &#125; void change(int k,int l,int r,int x,int y,int z) &#123; if (l &gt;= x &amp;&amp; r &lt;= y &amp;&amp; s[k].c) &#123; s[k].su += (long long)myabs(z - s[k].c) * (long long)(r - l + 1); s[k].c = z; s[k].tag = z; s[k].at += (long long)myabs(z - s[k].c); return; &#125; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) change(yrt,mid + 1,r,x,y,z); else if (y &lt;= mid) change(zrt,l,mid,x,y,z); else change(zrt,l,mid,x,y,z),change(yrt,mid + 1,r,x,y,z); s[k] = upd(s[zrt],s[yrt]); &#125; node query(int k,int l,int r,int x,int y) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) return s[k]; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) return query(yrt,mid + 1,r,x,y); else if (y &lt;= mid) return query(zrt,l,mid,x,y); else return upd(query(zrt,l,mid,x,y),query(yrt,mid + 1,r,x,y)); &#125;&#125;tree;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); tree.build(1,1,n); int opt,l,r,z; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%d\",&amp;opt,&amp;l,&amp;r); if (opt == 1) &#123; scanf(\"%d\",&amp;z); tree.change(1,1,n,l,r,z); &#125; else printf(\"%lld\\n\",tree.query(1,1,n,l,r).su); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"}]},{"title":"CF739C Alyona and towers","slug":"cf739c","date":"2019-08-13T16:00:00.000Z","updated":"2019-08-27T08:37:26.803Z","comments":true,"path":"2019/08/14/cf739c/","link":"","permalink":"https://sdlang.ml/2019/08/14/cf739c/","excerpt":"题意：维护区间最大的先上升后下降的子段长度，支持区间加","text":"题意：维护区间最大的先上升后下降的子段长度，支持区间加 这个题似乎很熟悉，想必你肯定做过它的简化版——最大上升子序列 那么遇到这样的题我们应该怎么做呢，别着急，我们一步一步来 我们肯定是要用线段树维护答案，那么左右儿子怎么合并答案呢，有这么几种情况： 前两种情况就是继承左右儿子的$ans$ 第三种是左儿子中以右端点结尾的$ans+$右儿子中以左端点开始的最长下降序列长度（左儿子的右端点$&gt;$右儿子的左端点） 第四种是右儿子中以左端点开始的$ans+$左儿子中以右端点结束的最长上升序列长度（左儿子的左端点$&lt;$右儿子的左端点） 维护以左右端点开始或结尾的$zans,yans$也是类似的，以$zans$来说 第一种情况就是左儿子的$zans$ 第二种情况是左儿子的$zans+$右儿子中以左端点开始的最长下降序列长度（左儿子的右端点$&gt;$右儿子的左端点） 第三种情况是左儿子的区间长度$+$右儿子的$zans$（左儿子中以右端点结尾的最长上升序列长度$=$左儿子的区间长度并且左儿子的右端点$&lt;$右儿子的左端点） 然后是维护左右端点开始或结束的最长下降或上升的序列长度$zlen,ylen$，以$zlen$来说 第一种情况是左儿子的$zlen$ 第二种情况是左儿子的$zlen+$右儿子的$zlen$（左儿子的$zlen=$左儿子的区间长度并且左儿子的右端点$&gt;$右儿子的左端点） 然后这道题就做完啦 我们整理一下刚才要维护的东西 答案$ans$ 左端点$z$ 右端点$y$ 区间长度$len$ 左端点开始的答案$zans$ 左端点开始的最长下降序列长度$zlen$ 右端点结束的答案$yans$ 右端点结束的最长上升序列长度$ylen$ 至于区间加的操作，对于一个子树而言只影响左右端点，所以正常的打标记下放就可以了 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#define N 300000#define zrt k &lt;&lt; 1#define yrt k &lt;&lt; 1 | 1using namespace std;int n,m,a[N + 5];struct node&#123; int ans,za,ya,zl,yl,len; long long z,y,tag;&#125;;struct Seg&#123; node s[N * 4 + 5]; node upd(node x,node y) &#123; node k; k.len = x.len + y.len; k.z = x.z; k.y = y.y; k.zl = x.zl; if (x.zl == x.len &amp;&amp; x.y &gt; y.z) k.zl += y.zl; k.yl = y.yl; if (y.yl == y.len &amp;&amp; x.y &lt; y.z) k.yl += x.yl; k.za = x.za; if (k.za == x.len &amp;&amp; x.y &gt; y.z) k.za += y.zl; if (x.yl == x.len &amp;&amp; x.y &lt; y.z) k.za = max(k.za,x.yl + y.za); k.ya = y.ya; if (k.ya == y.len &amp;&amp; x.y &lt; y.z) k.ya += x.yl; if (y.zl == y.len &amp;&amp; x.y &gt; y.z) k.ya = max(k.ya,y.zl + x.ya); k.ans = max(x.ans,y.ans); if (x.y &gt; y.z) k.ans = max(k.ans,x.ya + y.zl); if (x.y &lt; y.z) k.ans = max(k.ans,y.za + x.yl); return k; &#125; void build(int k,int l,int r) &#123; if (l == r) &#123; s[k].ans = 1; s[k].ya = 1; s[k].za = 1; s[k].zl = 1; s[k].yl = 1; s[k].z = (long long)a[l]; s[k].y = (long long)a[l]; s[k].len = 1; return; &#125; int mid = l + r &gt;&gt; 1; build(zrt,l,mid); build(yrt,mid + 1,r); s[k] = upd(s[zrt],s[yrt]); &#125; void jia(int k,int l,int r,long long z) &#123; s[k].z += z; s[k].y += z; s[k].tag += z; &#125; void pushdown(int k,int l,int r,int mid) &#123; if (!s[k].tag) return; jia(zrt,l,mid,s[k].tag); jia(yrt,mid + 1,r,s[k].tag); s[k].tag = 0; &#125; void add(int k,int l,int r,int x,int y,long long z) &#123; if (l &gt;= x &amp;&amp; r &lt;= y) &#123; jia(k,l,r,z); return; &#125; int mid = l + r &gt;&gt; 1; pushdown(k,l,r,mid); if (x &gt; mid) add(yrt,mid + 1,r,x,y,z); else if (y &lt;= mid) add(zrt,l,mid,x,y,z); else add(zrt,l,mid,x,y,z),add(yrt,mid + 1,r,x,y,z); s[k] = upd(s[zrt],s[yrt]); &#125;&#125;tree;int main()&#123; scanf(\"%d\",&amp;n); for (int i = 1;i &lt;= n;i++) scanf(\"%d\",&amp;a[i]); tree.build(1,1,n); scanf(\"%d\",&amp;m); int l,r; long long z; for (int i = 1;i &lt;= m;i++) &#123; scanf(\"%d%d%lld\",&amp;l,&amp;r,&amp;z); tree.add(1,1,n,l,r,z); printf(\"%d\\n\",tree.s[1].ans); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"}]},{"title":"关于d函数的筛法","slug":"shaid","date":"2019-08-07T16:00:00.000Z","updated":"2019-09-08T11:21:10.549Z","comments":true,"path":"2019/08/08/shaid/","link":"","permalink":"https://sdlang.ml/2019/08/08/shaid/","excerpt":"线性筛筛$\\sigma$","text":"线性筛筛$\\sigma$ 线性筛筛$\\sigma_0$ $p$是质数,$\\sigma_0(p)=2$ 对于一个$i$，如果$i$和$p$互质，根据积性函数得$\\sigma_0 (i\\ast p)=\\sigma_0 (i)\\ast \\sigma_0 (p)$ 如果$i$和$p$不互质，那么$p|i$ 设$i=\\prod_{i=1}^mP_i^{r_i}$ 则$p\\ast i=\\prod_{i=2}^mP_i^{r_i}\\ast P_1^{r_i+1}$ $\\frac{i}{p}=\\prod_{i=2}^m P_i^{r_i}\\ast P_1^{r_i-1}$ $\\sigma_0(i)=\\prod_{i=1}^m(r_i+1)$ $\\sigma_0(i\\ast p)=\\prod_{i=2}^m(r_i+1)+(r_1+2)$ $\\sigma_0(\\frac{i}{p}) = \\prod_{i=2}^m(r_i+1)+r_1$ 设$T=\\prod_{i=2}^m(r_i+1)$ $\\sigma_0(i)=T\\ast (r_1+1)$ $\\sigma_0(i\\ast p)=T\\ast (r_1+2)=\\sigma_0(i)+T$ $\\sigma_0(\\frac{i}{p})=T\\ast r_1=\\sigma_0(i)-T$ 可得$\\sigma_0(i\\ast p)=2\\ast \\sigma_0(i)-\\sigma_0(\\frac{i}{p})$ 线性筛筛$\\sigma$ $p$是质数,$\\sigma(p)=p+1$ 对于一个$i$，如果$i$和$p$互质，根据积性函数得$\\sigma(i\\ast p)=\\sigma(i)\\ast \\sigma(p)$ 如果$i$和$p$不互质，那么$p|i$ 设$i=\\prod_{i=1}^mP_i^{r_i}$ 则$p_1\\ast i=\\prod_{i=2}^mP_i^{r_i}\\ast P_1^{r_i+1}$ $\\frac{i}{p}=\\prod_{i=2}^m P_i^{r_i}\\ast P_1^{r_i-1}$ $\\sigma_i=\\prod_{i=1}^n\\frac{p_i^{r_i+1}-1}{p_i-1}$ $\\sigma_{i\\ast p}=\\prod_{i=2}^n\\frac{p_i^{r_i+1}-1}{p_i-1}\\ast \\frac{p_i^{r_1+2}-1}{p_1-1}$ $\\sigma_{\\frac{i}{p}}=\\prod_{i=2}^n\\frac{p_i^{r_i+1}-1}{p_i-1}\\ast \\frac{p_i^{r_1}-1}{p_1-1}$ 设$T=\\prod_{i=2}^n\\frac{p_i^{r_i+1}-1}{p_i-1}$ $\\sigma_{i}=T\\ast \\frac{p_i^{r_1+1}-1}{p_1-1}$ $\\sigma_{i\\ast p}=T\\ast \\frac{p_i^{r_1+2}-1}{p_1-1}=\\sigma_i+T\\ast p_1^{r_1+1}$ $\\sigma_{\\frac{i}{p}}=T\\ast \\frac{p_i^{r_1}-1}{p_1-1}=\\sigma_i-T\\ast p_1^{r_1}$ 两边乘$p_1$得到$\\sigma_{\\frac{i}{p}}\\ast p_1=p_1\\ast \\sigma_i-T\\ast p_1^{r_1+1}$ 后两个式子相加可得$\\sigma_{i\\ast p_1}=(p_1+1)\\ast \\sigma_i-p_1\\ast \\sigma_{\\frac{i}{p}}$","categories":[{"name":"随笔","slug":"随笔","permalink":"https://sdlang.ml/categories/随笔/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"}]},{"title":"SP1741 TETRIS3D - Tetris 3D","slug":"sp1741","date":"2019-08-06T16:00:00.000Z","updated":"2019-08-27T03:16:47.867Z","comments":true,"path":"2019/08/07/sp1741/","link":"","permalink":"https://sdlang.ml/2019/08/07/sp1741/","excerpt":"“俄罗斯方块”的作者决定制作一个3D版本的“俄罗斯方块”。有若干个长方体积木，它们将以一定的顺序下落，最底端是一个矩形平台。积木停止下落当且仅当它碰到了矩形平台或另一个已经停止下落的积木。它将保持这个位置不变直至游戏结束。 然而作者想要改变这个游戏的玩法。已知积木的下降顺序以及积木的起始释放位置，求游戏结束后积木堆最高点的高度。假设积木竖直下落且不旋转。为了描述方便起见，我们引入一个笛卡尔坐标系，原点为平台的顶点，轴与平台边缘平行。","text":"“俄罗斯方块”的作者决定制作一个3D版本的“俄罗斯方块”。有若干个长方体积木，它们将以一定的顺序下落，最底端是一个矩形平台。积木停止下落当且仅当它碰到了矩形平台或另一个已经停止下落的积木。它将保持这个位置不变直至游戏结束。 然而作者想要改变这个游戏的玩法。已知积木的下降顺序以及积木的起始释放位置，求游戏结束后积木堆最高点的高度。假设积木竖直下落且不旋转。为了描述方便起见，我们引入一个笛卡尔坐标系，原点为平台的顶点，轴与平台边缘平行。 题意：初始矩形为$0$，每次将一个子矩形修改为这个子矩形的最大值$+h$ 首先我们对$x$轴建线段树（称为内层），然后在内层的基础上，对$y$轴建线段树（称为外层） 那么外层的操作都是在其对应的内层的基础上完成的 既然是线段树，那么我们思考这样一个问题，如何区间加 对于内层而言，可以打$lazytag$并进行$pushdown$，$pushup$也是可以进行的 然而对于外层，因为每个子节点我们维护的信息太多了，所以内层的$pushdown$和$pushup$都无法进行 于是我们另辟蹊径：标记永久化 我们多维护一个$tag$值，表示这个区间修改后的值 当我们修改的时候，都是可以用修改的值$val$去更新该区间的最大值$max$ 而只有这个区间完全被覆盖时我们才用$val$去个更新$tag$ 这个标记是对于子区间也是有效的，所以询问的时候要拿出这个区间的$tag$去尝试更新答案 语言太无力了，还是上代码吧qwq 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;vector&gt;#define N 50000#define M 2500#define zrt k &lt;&lt; 1#define yrt k &lt;&lt; 1 | 1using namespace std;int n,m,q;struct node &#123; int ma,tag;&#125;;struct SegX&#123; node s[M + 5]; void change(int k,int l,int r,int x,int y,int z) &#123; s[k].ma = max(s[k].ma,z); if (l == x &amp;&amp; r == y) &#123; s[k].tag = max(s[k].tag,z); return; &#125; int mid = l + r &gt;&gt; 1; if (x &gt; mid) change(yrt,mid + 1,r,max(x,mid + 1),y,z); else if (y &lt;= mid) change(zrt,l,mid,x,min(y,mid),z); else change(zrt,l,mid,x,min(y,mid),z),change(yrt,mid + 1,r,max(x,mid + 1),y,z); &#125; int query(int k,int l,int r,int x,int y) &#123; if (l == x &amp;&amp; r == y) return s[k].ma; int mid = l + r &gt;&gt; 1; if (x &gt; mid) return max(query(yrt,mid + 1,r,max(x,mid + 1),y),s[k].tag); else if (y &lt;= mid) return max(query(zrt,l,mid,x,min(y,mid)),s[k].tag); else return max(s[k].tag,max(query(zrt,l,mid,x,min(y,mid)),query(yrt,mid + 1,r,max(x,mid + 1),y))); &#125;&#125;;struct SegY&#123; SegX s[M + 5],tag[M + 5]; void change(int k,int l,int r,int xl,int xr,int yl,int yr,int z) &#123; s[k].change(1,1,n,xl,xr,z); if (l == yl &amp;&amp; r == yr) &#123; tag[k].change(1,1,n,xl,xr,z); return; &#125; int mid = l + r &gt;&gt; 1; if (yl &gt; mid) change(yrt,mid + 1,r,xl,xr,max(yl,mid + 1),yr,z); else if (yr &lt;= mid) change(zrt,l,mid,xl,xr,yl,min(yr,mid),z); else change(zrt,l,mid,xl,xr,yl,min(yr,mid),z),change(yrt,mid + 1,r,xl,xr,max(yl,mid + 1),yr,z); &#125; int query(int k,int l,int r,int xl,int xr,int yl,int yr) &#123; if (l == yl &amp;&amp; r == yr) return s[k].query(1,1,n,xl,xr); int mid = l + r &gt;&gt; 1,ans = tag[k].query(1,1,n,xl,xr); if (yl &gt; mid) return max(ans,query(yrt,mid + 1,r,xl,xr,max(yl,mid + 1),yr)); else if (yr &lt;= mid) return max(ans,query(zrt,l,mid,xl,xr,yl,min(yr,mid))); else return max(ans,max(query(zrt,l,mid,xl,xr,yl,min(yr,mid)),query(yrt,mid + 1,r,xl,xr,max(yl,mid + 1),yr))); &#125;&#125;tree;int main()&#123; scanf(\"%d%d%d\",&amp;n,&amp;m,&amp;q); int d,s,h,x,y,z; for (int i = 1;i &lt;= q;i++) &#123; scanf(\"%d%d%d%d%d\",&amp;d,&amp;s,&amp;h,&amp;x,&amp;y); z = tree.query(1,1,m,x + 1,x + d,y + 1,y + s); tree.change(1,1,m,x + 1,x + d,y + 1,y + s,z + h); &#125; printf(\"%d\\n\",tree.query(1,1,m,1,n,1,m)); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"},{"name":"树套树","slug":"树套树","permalink":"https://sdlang.ml/tags/树套树/"}]},{"title":"洛谷 P3157 [CQOI2011]动态逆序对","slug":"p3157","date":"2019-07-19T16:00:00.000Z","updated":"2019-08-27T03:14:43.386Z","comments":true,"path":"2019/07/20/p3157/","link":"","permalink":"https://sdlang.ml/2019/07/20/p3157/","excerpt":"对于序列A，它的逆序对数定义为满足iAj的数对(i,j)的个数。给1到n的一个排列，按照某种顺序依次删除m个元素，你的任务是在每次删除一个元素之前统计整个序列的逆序对数。","text":"对于序列A，它的逆序对数定义为满足iAj的数对(i,j)的个数。给1到n的一个排列，按照某种顺序依次删除m个元素，你的任务是在每次删除一个元素之前统计整个序列的逆序对数。 可以值域分块，块套树状数组，树套树 不过用序列分块$+vector$一样能水过这道题 考虑删去一个点$x$对答案产生的影响，拿下面的数列来说 1,2……x……n-1,n 对于区间$[1,x-1]$，$a_i&gt;a_x$会产生逆序对 对于区间$[x+1,n]$，$a_i&lt;a_x$会产生逆序对 那么每次删点后统计一下$x$两侧满足条件的数就好了 我们对序列分块，同一个块里的用$vector$排好序，和$x$在不同块的二分查找更新答案，和$x$在同一个块的暴力枚举更新答案，每次删点的时候在$vector$里删除点就好了 复杂度大约是$O(Mlog(N)\\sqrt{N})$，吸吸氧就过了 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#define N 100000#define rep(i,s,t) for (register int i=s;i&lt;=t;i++)#define drep(i,s,t) for (register int i=t;i&gt;=s;i--)#define il inlineusing namespace std;int n,m,a[N+5],data[N+5],bs,blo[N+5],L[N+5],R[N+5],na[N+5],d[N+5],id[N+5],cnt;long long ans;vector &lt;int&gt; p[N+5];void merge_sort(int l,int r)&#123; if (r-l&gt;0) &#123; int it=l,mid=l+r&gt;&gt;1,p=l,q=mid+1; merge_sort(l,mid); merge_sort(mid+1,r); while (p&lt;=mid||q&lt;=r) &#123; if (q&gt;r||p&lt;=mid&amp;&amp;data[p]&lt;=data[q]) na[it++]=data[p++]; else &#123; na[it++]=data[q++]; ans+=(long long)mid-p+1; &#125; &#125; rep(i,l,r) data[i]=na[i]; &#125;&#125;il void del(int x)&#123; d[x]=1; vector &lt;int&gt;::iterator it=lower_bound(p[blo[x]].begin(),p[blo[x]].end(),a[x]); p[blo[x]].erase(it);&#125;il void calc(int x)&#123; rep(i,1,blo[x]-1) ans-=(long long)(p[i].end()-upper_bound(p[i].begin(),p[i].end(),a[x])); rep(i,L[blo[x]],x-1) if (a[i]&gt;a[x]&amp;&amp;!d[i]) ans--; rep(i,x+1,R[blo[x]]) if (a[i]&lt;a[x]&amp;&amp;!d[i]) ans--; rep(i,blo[x]+1,blo[n]) ans-=(long long)(lower_bound(p[i].begin(),p[i].end(),a[x])-p[i].begin());&#125;il int read()&#123; int X(0),w(0);char ch(0); while (!isdigit(ch))w|=ch=='-',ch=getchar(); while (isdigit(ch))X=(X&lt;&lt;3)+(X&lt;&lt;1)+(ch^48),ch=getchar(); return w?-X:X;&#125;int main()&#123; n=read(); m=read(); bs=sqrt(n); rep(i,1,n) &#123; a[i]=read(); data[i]=a[i]; id[a[i]]=++cnt; blo[i]=(i-1)/bs+1; if (!L[blo[i]]) L[blo[i]]=i; R[blo[i]]=i; p[blo[i]].push_back(a[i]); &#125; merge_sort(1,n); rep(i,1,blo[n]) sort(p[i].begin(),p[i].end()); int x; rep(i,1,m) &#123; printf(\"%lld\\n\",ans); x=read(); del(id[x]); calc(id[x]); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"分块","slug":"分块","permalink":"https://sdlang.ml/tags/分块/"},{"name":"树套树","slug":"树套树","permalink":"https://sdlang.ml/tags/树套树/"},{"name":"树状数组","slug":"树状数组","permalink":"https://sdlang.ml/tags/树状数组/"}]},{"title":"洛谷 P1975 [国家集训队]排队","slug":"p1975","date":"2019-07-17T16:00:00.000Z","updated":"2019-08-27T03:14:06.890Z","comments":true,"path":"2019/07/18/p1975/","link":"","permalink":"https://sdlang.ml/2019/07/18/p1975/","excerpt":"题意：给一个序列，每次交换$a_l,a_r$，并且询问交换后的整个序列的逆序对数","text":"题意：给一个序列，每次交换$a_l,a_r$，并且询问交换后的整个序列的逆序对数 分块+二分 刚开始的逆序对数可以直接用归并排序求出来，我们先更新答案再交换，考虑每次交换的$a_l,a_r$，会影响逆序对的只可能是$[l,r]$这个区间的数，如果单独拿出之间的一个数$a_i(l+1\\le i\\le r-1)$来说，对答案则有四种可能的影响 $a_i&gt;a_l\\to ans++$ $a_i$比$a_l$大，$a_l$和$a_r$交换之后$a_l$下标比$a_i$大，逆序对数$+1$ $a_i&lt;a_l\\to ans—$ $a_i$比$a_l$小，已经是逆序对，$a_l$和$a_r$交换，逆序对数$-1$ $a_i&lt;a_r\\to ans++$ $a_i$比$a_r$小，$a_l$和$a_r$交换之后$a_r$下标比$a_i$小，逆序对数$+1$ $a_i&gt;a_r\\to ans—$ $a_i$比$a_r$大，已经是逆序对，$a_l$和$a_r$交换，逆序对数$-1$ 那么我们用分块来维护，对于在同一个块或相邻块的，暴力枚举$a_i$更新答案 然后考虑在每个块里维护这个块的有序序列，每次访问到这个块的时候，直接二分查找更新答案，边角的数直接枚举更新就好了 这样每次交换后对$a_l$和$a_r$调整一下所在块的有序序列就好了 注意询问的$l,r$可能$l&gt;r$所以要交换 蒟蒻也不会算块的大小什么的，常数还大的一批，就这样吧qwq Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;vector&gt;#define N 20000#define rep(i,s,t) for (register int i=s;i&lt;=t;i++)#define drep(i,s,t) for (register int i=s;i&gt;=t;i--)using namespace std;int n,a[N+5],data[N+5],m,bs,blo[N+5],na[N+5],ans;vector &lt;int&gt; p[N+5];void merge_sort(int l,int r)&#123; if (r-l&gt;0) &#123; int it=l,mid=l+r&gt;&gt;1,p=l,q=mid+1; merge_sort(l,mid); merge_sort(mid+1,r); while (p&lt;=mid||q&lt;=r) &#123; if (q&gt;r||p&lt;=mid&amp;&amp;na[p]&lt;=na[q]) data[it++]=na[p++]; else &#123; data[it++]=na[q++]; ans+=mid-p+1; &#125; &#125; rep(i,l,r) na[i]=data[i]; &#125;&#125;void com(int x,int l,int r)&#123; ans+=a[x]&gt;a[l]; ans-=a[x]&lt;a[l]; ans+=a[x]&lt;a[r]; ans-=a[x]&gt;a[r];&#125;void reset(int x)&#123; p[x].clear(); rep(i,(x-1)*bs+1,x*bs) p[x].push_back(a[i]); sort(p[x].begin(),p[x].end());&#125;void exc(int l,int r)&#123; swap(a[l],a[r]); reset(blo[l]); reset(blo[r]);&#125;void calc(int l,int r)&#123; if (a[l]==a[r]) return; ans+=(a[l]&lt;a[r]); ans-=(a[l]&gt;a[r]); if (blo[r]-blo[l]&lt;=1) &#123; rep(i,l+1,r-1) com(i,l,r); &#125; else &#123; rep(i,l+1,blo[l]*bs) com(i,l,r); rep(i,(blo[r]-1)*bs+1,r-1) com(i,l,r); rep(i,blo[l]+1,blo[r]-1) &#123; ans+=p[i].end()-upper_bound(p[i].begin(),p[i].end(),a[l]); ans-=lower_bound(p[i].begin(),p[i].end(),a[l])-p[i].begin(); ans+=lower_bound(p[i].begin(),p[i].end(),a[r])-p[i].begin(); ans-=p[i].end()-upper_bound(p[i].begin(),p[i].end(),a[r]); &#125; &#125; exc(l,r);&#125;int main()&#123; scanf(\"%d\",&amp;n); rep(i,1,n) scanf(\"%d\",&amp;a[i]),na[i]=data[i]=a[i]; sort(data+1,data+n+1); bs=sqrt(n); rep(i,1,n) &#123; blo[i]=(i-1)/bs+1; na[i]=a[i]=lower_bound(data+1,data+n+1,a[i])-data; p[blo[i]].push_back(a[i]); &#125; rep(i,1,blo[n]) sort(p[i].begin(),p[i].end()); merge_sort(1,n); printf(\"%d\\n\",ans); scanf(\"%d\",&amp;m); int l,r; rep(i,1,m) &#123; scanf(\"%d%d\",&amp;l,&amp;r); if (l&gt;r) swap(l,r); calc(l,r); printf(\"%d\\n\",ans); &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"分块","slug":"分块","permalink":"https://sdlang.ml/tags/分块/"}]},{"title":"CF86D Powerful array","slug":"cf86d","date":"2019-07-14T16:00:00.000Z","updated":"2019-08-27T03:12:53.330Z","comments":true,"path":"2019/07/15/cf86d/","link":"","permalink":"https://sdlang.ml/2019/07/15/cf86d/","excerpt":"题意：$t$次询问区间$[l,r]$中$\\sum_x a_x\\times cnt[a_x]^2$，$cnt$为出现次数","text":"题意：$t$次询问区间$[l,r]$中$\\sum_x a_x\\times cnt[a_x]^2$，$cnt$为出现次数 裸的莫队题，用$cnt[x]$表示$x$出现的次数，根据平方的性质，我们得出加减操作 加：$ans+=a_x\\times 2cnt[a_x]+1,cnt[a_x]++$ 减：$ans-=a_x\\times 2cnt[a_x]-1,cnt[a_x]—$ 复杂度仍然是$O(n\\sqrt n)$ Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#define N 2000000using namespace std;struct node&#123; int l,r,b,id;&#125;q[N+5];int n,m,a[N+5],blo;long long ans[N+5],tmp,cnt[N+5];int cmp(node x,node y) //奇偶性排序&#123; return (x.b==y.b)?(x.b%2==1?x.r&lt;y.r:x.r&gt;y.r):x.l&lt;y.l;&#125;void add(int x)&#123; tmp+=(long long)a[x]*1LL*(cnt[a[x]]*2+1); cnt[a[x]]++;&#125;void del(int x)&#123; tmp-=(long long)a[x]*1LL*(cnt[a[x]]*2-1); cnt[a[x]]--;&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for (int i=1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]); blo=(sqrt(m*2/3))?n/sqrt(m*2/3):sqrt(n); //块大小 if (!blo)blo=sqrt(n); for (int i=1;i&lt;=m;i++) &#123; scanf(\"%d%d\",&amp;q[i].l,&amp;q[i].r); q[i].b=q[i].l/blo; q[i].id=i; &#125; sort(q+1,q+m+1,cmp); for (int i=1,l=1,r=0;i&lt;=m;i++) //莫队 &#123; while (l&gt;q[i].l)add(--l); while (r&lt;q[i].r)add(++r); while (l&lt;q[i].l)del(l++); while (r&gt;q[i].r)del(r--); ans[q[i].id]=tmp; &#125; for (int i=1;i&lt;=m;i++) printf(\"%lld\\n\",ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"分块","slug":"分块","permalink":"https://sdlang.ml/tags/分块/"},{"name":"莫队","slug":"莫队","permalink":"https://sdlang.ml/tags/莫队/"}]},{"title":"莫队","slug":"mo","date":"2019-07-10T16:00:00.000Z","updated":"2019-08-27T08:53:34.204Z","comments":true,"path":"2019/07/11/mo/","link":"","permalink":"https://sdlang.ml/2019/07/11/mo/","excerpt":"蒟蒻终于开始学莫队了，为了印象深刻，写篇文章来及时复习","text":"蒟蒻终于开始学莫队了，为了印象深刻，写篇文章来及时复习 离线莫队先丢个问题：给你一个序列长度为$n$，有$m$次询问，每次询问你$[l,r]$这个区间内有多少个不同的数 很多数据结构都可以解决这个问题，但我们不用 先考虑怎么暴力，每次询问时对区间扫一遍，复杂度为$O(nm)$ 这种暴力方法似乎不能优化，那么考虑换一种方法 用两个指针$l,r$分别指向$[l,r]$这个区间的左端点和右端点，$cnt[i]$表示$i$这个数在$[l,r]$这个区间的出现次数，画个图深刻理解下 把数字用颜色来替代应该更容易看 现在$l,r$指向的这个区间内，$cnt_{\\text{绿}}=3,cnt_{\\text{红}}=2,cnt_{\\text{蓝}}=0$，颜色种数$tmp=2$ 我们把$r$指针往右移一个单位，$r$指向了蓝方块 于是$cnt_{\\text{蓝}}=1$，而蓝色在之前的区间没有出现过，所以相应的$tmp$也要$+1=3$，区间$[l,r]$的颜色种数做出来了 这是扩大区间，对于缩小区间也是同理的，如果$cnt_{\\text{某个颜色}}$减为$0$了，说明这个区间没有这个颜色，那么$tmp$也要$-1$ Part-Code123456789101112inline void add(int x) //扩大区间&#123; tmp+=(++cnt[a[x]]==1);&#125;inline void del(int x) //减小区间&#123; tmp-=(--cnt[a[x]]==0);&#125;while (l&gt;q[i].l)add(--l);while (r&lt;q[i].r)add(++r);while (l&lt;q[i].l)del(l++);while (r&gt;q[i].r)del(r--); //移动指针 但是这种暴力方法对时间复杂度并没有任何优化，仍然是$O(nm)$ 我们考虑怎么优化 把操作都读下来，按左端点排序。不行，这样子仍然会被卡成$O(nm)$ 将序列分成$\\sqrt n$个长度为$\\sqrt n$的块，对于左端点在同一个块里，将其按右端点排序，不在同一块里的按左端点排序。这样就保证了在每个块里的$r$指针都是向右移的，而$l$指针移超不过$\\sqrt n$，所以时间复杂度为$O(n\\sqrt n)$ Part-Code1234int cmp(node x,node y)&#123; return ((x.l/blo)==(y.l/blo))?(x.r&lt;y.r):(x.l&lt;y.l);&#125; 然后还有一种卡常的排序方式——奇偶性排序，对左端点在同一个块里的询问，如果块的编号是奇数块，那么按升序排，偶数块则按降序排。这样排序的好处是在处理完左端点在一个块里的询问后，不用再从右移到左，所以理论上可以比上一个快一倍 Part-Code1234inline int cmp(node x,node y)&#123; return (x.ll==y.ll)?((x.ll%2==1)?(x.r&lt;y.r):(x.r&gt;y.r)):(x.l&lt;y.l);&#125; 最后想说的就是块的大小和时间复杂度是玄学的，所以没有必要非得是$\\sqrt n$，对于随机情况来说，将块的大小定为$\\frac{n}{\\sqrt{\\frac{2m}{3}}}$是快一点的 习题 P1972HH的项链 这道题是裸的莫队题，但是现在不卡常吸氧是过不去了 P2709小B的询问 这个是询问区间出现次数的平方和，只需要考虑一下平方的性质就好了 P3901数列找不同 题目每次问你区间内的数是否两两不同 还是一道很裸的板子题啊，更新答案时判断一下不同数的个数和区间长度是否相等就好了，这题暴力好像也能过 P4113采花 询问区间内出现两次以上的数的个数，但是这个数据范围莫队会t，可以当作莫队练练手 正解是树状数组，用维护出现一次的思想去想两次，一次的可以去做做P1972，总之多会几个方法比只会暴力好的啦 P4137mex 询问区间内未出现的最小自然数 这个题似乎跟之前的不太一样，但是由于数据水，我们仍然可以用莫队水过去 考虑加点，如果这个点没出现过，那么这个点会影响到答案，我们把答案每次$++$，暴力找到未出现过的 而删点的时候，如果这个点删去之后就没了，那么可以和答案取个$min$ 复杂度，emmmm，很玄学，能过完全就是数据水 P3709大爷的字符串题 询问区间内的众数的出现次数 依旧维护每个数的出现次数，移动边界的时候注意一下众数个数不是唯一的，根据其性质更新答案就好了 P3674小清新人渣的本愿 三种询问，区间内是否存在两个数相加得$x$，两个数相减得$x$，相乘得$x$ 不会bitset专门跑去学的 我们用$bitset:S$来维护区间内的数是否出现，拿$A-B=x$来说，移项变为$A=x+B$，也就是如果$S\\&amp;(S&lt;&lt;x)$不为零，说明可以 加法也同理，我们维护一个$N-x$的$bitset$，继续用这个思路来做 而对于乘法，因为一个数$x$的因子最大到$\\sqrt x$，我们直接暴力枚举因子，看有没有出现就可以了 带修莫队其实就是加了个一个单点修改的操作，而离线莫队肯定是不能带修改的，那么我们继续考虑如何处理修改操作 我们对每次询问区间$[l,r]$加一个版本$t$，每次访问的也就是$[l,r,t]$，$t$实际上是表示在第$t$次修改后的序列，处理的时候$t$和$l,r$一样跳就行了，要注意一点就是如果要跳到的版本的修改位置在$[l,r]$中，要修改$cnt_{a_{x}}$ 要对修改和查询操作分别存储，修改操作要记录当前修改的位置$x$的之前的颜色，这样便于返回上一个版本；查询操作多存一个时间$t$就好了 Part-Code1234567891011121314void jia1s(int x) //到下一个版本&#123; if (l&lt;=p[x].x&amp;&amp;r&gt;=p[x].x)del(p[x].x); a[p[x].x]=p[x].z; //更新 if (l&lt;=p[x].x&amp;&amp;r&gt;=p[x].x)add(p[x].x);&#125;void jian1s(int x) //到上一个版本&#123; if (l&lt;=p[x].x&amp;&amp;r&gt;=p[x].x)del(p[x].x); a[p[x].x]=p[x].lx; if (l&lt;=p[x].x&amp;&amp;r&gt;=p[x].x)add(p[x].x);&#125;while (t&lt;q[i].t)jia1s(++t);while (t&gt;q[i].t)jian1s(t--); 移动t指针 排序跟离线的是差不多的，多了一点就是如果右端点在一个块里，要按$t$升序排序，同样的，这个排序也可以按奇偶性排序。 Part-Code12345678int cmp(node x,node y) 普通排序&#123; return (x.ll==y.ll)?(x.rr==y.rr?x.t&lt;y.t:x.r&lt;y.r):x.l&lt;y.l;&#125;int cmp(node x,node y) 奇偶性排序&#123; return (x.ll==y.ll)?((x.rr==y.rr)?(x.t&lt;y.t):((x.ll%2==1)?(x.r&lt;y.r):(x.r&gt;y.r))):(x.l&lt;y.l);&#125; 块的大小的话一般选取$n^{\\frac{2}{3}}$，块的个数就是$n^{\\frac{1}{3}}$，左右端点所在块的种数都为$n^{\\frac{1}{3}}$，然后和单个块的移动复杂度$O(n)$乘起来之后复杂度就是$O(n^{\\frac{5}{3}})$ 习题 P1903数颜色 裸的带修莫队，当然也可以树套树 卡卡常，吸个氧才能过，数据对莫队太不友好了 树上莫队原来我们的莫队是处理线性结构，这次把它搬到了树上，那么做法是否一样呢？ 其实是基本上一样的，只不过我们要把树转化为线性结构，这就需要欧拉序，我们从根对这棵树进行$dfs$，点进栈时记一个时间戳$st$，出栈时再记一个时间戳$ed$，画个图理解一下 这棵树的欧拉序为$(1,2,4,5,5,6,6,7,7,4,2,3,3,1)$，那么每次询问的节点$u,v$有两种情况 $u$在$v$的子树中（$v$在$u$的子树中同理），比如$u=6,v=2$，我们拿出$(st[2],st[6])$这段区间$(2,4,5,5,6)$，$5$出现了两次，因为搜索的时候$5$不属于这条链，所以进去之后就出去了，而出现一次的都在这条链上，就都可以统计 $u$和$v$不在同一个子树中，比如$u=5,v=3$，这次拿出$(ed[5],st[3])$这段区间$(5,6,6,7,7,4,2,3)$，要保证$st[u]&lt;st[v]$，出现两次的可以忽略，然而这次只统计了$5,4,2,3$，所以最后再统计上$lca$就好了 至于如何忽略掉区间内出现了两次的点，这个很简单，我们多记录一个$use[x]$，表示$x$这个点有没有被加入，每次处理的时候如果$use[x]=0$则需要添加节点；如果$use[x]=1$则需要删除节点，每次处理之后都对$use[x]$异或$1$就可以了 上面说的欧拉序之类的东西都可以用树剖做出来，然后就做完了 因为$st,ed$的大小都是$n$，所以取块的大小时要用$2n$，而不是$n$ 习题 SP10707COT2 裸的树上莫队，注意下权值很大要离散化就好了 P4689[Ynoi]这是我自己的发明 由乃oi题个个都很毒瘤 询问两个点子树中权值相等的数对个数，支持换根操作 首先我们要知道还完根后对于一个点$x$，我们应该如何去找其子树，有三种情况： 我们默认树根是$1$，每次记录下换的根$rt$ $x=rt$，子树是整棵树 $lca(x,rt)\\ne x$，直接访问$x$的子树 $lca(x,rt)=x$，子树为与$x$的相邻的点中和$rt$最近的点的补集 既然已经会处理换根的操作，那么询问也就很好做了 我们用$f_{l,r\\cap L,R}$来表示$l-r$与$L-R$这两个区间的答案，$f_{1,n\\cap1,i}$可以预处理出来，然后对于不同种情况，大力容斥一波，剩下的只需要求$f_{l,r\\cap L,R}$，转换成$4$个莫队求解就可以了 树上带修莫队其实只需要把树上莫队和带修莫队结合起来就好了，然后要注意一点 在更新版本的时候，我们不能像以前一样判断在不在$[l,r]$这个区间内更新值，而是看这个位置有没有被选，这应该非常好理解 Part-Code1234567891011121314151617181920void jia1s(int x) //到下一个版本&#123; if (use[p[x].x]) //被选了 &#123; calc(p[x].x); a[p[x].x]=p[x].z; calc(p[x].x); &#125; else a[p[x].x]=p[x].z;&#125;void jian1s(int x) //到上一个版本&#123; if (use[p[x].x]) //被选了 &#123; calc(p[x].x); a[p[x].x]=p[x].lx; calc(p[x].x); &#125; else a[p[x].x]=p[x].lx;&#125; 取块的大小注意下是$2n$就好了，排序什么的跟之前是一样的习题 P4074糖果公园 这个题询问树上两点路径之间$\\sum_i\\sum_jV_i\\times W_j$，$i$为出现的糖果的种类，$j$为出现的次数，所以很显然就是用莫队维护了 注意一下统计答案时的操作就好了 如果有其他莫队的题我会慢慢放上来的QAQ","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://sdlang.ml/categories/学习笔记/"}],"tags":[{"name":"分块","slug":"分块","permalink":"https://sdlang.ml/tags/分块/"},{"name":"莫队","slug":"莫队","permalink":"https://sdlang.ml/tags/莫队/"}]},{"title":"SP10707 COT2 - Count on a tree II","slug":"sp10707","date":"2019-07-10T16:00:00.000Z","updated":"2019-08-27T08:52:49.861Z","comments":true,"path":"2019/07/11/sp10707/","link":"","permalink":"https://sdlang.ml/2019/07/11/sp10707/","excerpt":"给定一个n个节点的树，每个节点表示一个整数，问u到v的路径上有多少个不同的整数。","text":"给定一个n个节点的树，每个节点表示一个整数，问u到v的路径上有多少个不同的整数。 裸的树上莫队 其实和普通莫队上一样的，只不过我们要把树转化为线性结构，这就需要欧拉序，我们从根对这棵树进行$dfs$，点进栈时记一个时间戳$st$，出栈时再记一个时间戳$ed$，画个图理解一下 这棵树的欧拉序为$(1,2,4,5,5,6,6,7,7,4,2,3,3)$，那么每次询问的节点$u,v$有两种情况 $u$在$v$的子树中（$v$在$u$的子树中同理），比如$u=6,v=2$，我们拿出$(st[2],st[6])$这段区间$(2,4,5,5,6)$，$5$出现了两次，因为搜索的时候$5$不属于这条链，所以进去之后就出去了，而出现一次的都在这条链上，就都可以统计 $u$和$v$不在同一个子树中，比如$u=5,v=3$，这次拿出$(ed[5],st[3])$这段区间$(5,6,6,7,7,4,2,3)$，要保证$st[u]&lt;st[v]$，出现两次的可以忽略，然而这次只统计了$5,4,2,3$，所以最后再统计上$lca$就好了 至于如何忽略掉区间内出现了两次的点，这个很简单，我们多记录一个$use[x]$，表示$x$这个点有没有被加入，每次处理的时候如果$use[x]=0$则需要添加节点；如果$use[x]=1$则需要删除节点，每次处理之后都对$use[x]$异或$1$就可以了 而欧拉序可以用树剖来求，$lca$也就求出来了，非常的方便 排序的话没有区别，可以普通排序，也可以奇偶性排序 因为$st,ed$的大小都是$n$，所以取块的大小时要用$2n$，而不是$n$ 最后要注意的一点就是这个题权值比较大，需要离散化 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;vector&gt;#define N 200000using namespace std;struct node&#123; int l,r,ll,rr,id,lca;&#125;q[N+5];int n,m,a[N+5],st[N+5],ed[N+5],dfn[N+5],f[N+5],num,size[N+5],his[N+5],dep[N+5],son[N+5],top[N+5],c[N+5],tmp,blo,l=1,r,use[N+5],ans[N+5],data[N+5];vector &lt;int&gt; d[N+5];void dfs1(int u,int fa) //树剖第一次深搜&#123; f[u]=fa;st[u]=++num; size[u]=1;his[num]=u; dep[u]=dep[fa]+1; vector &lt;int&gt;::iterator it; for (it=d[u].begin();it!=d[u].end();it++) &#123; int v=(*it); if (v==fa)continue; dfs1(v,u); size[u]+=size[v]; if (size[v]&gt;size[son[u]])son[u]=v; &#125; ed[u]=++num;his[num]=u;&#125;void dfs2(int u,int to) //树剖第二次深搜&#123; top[u]=to; if (son[u])dfs2(son[u],to); vector &lt;int&gt;::iterator it; for (it=d[u].begin();it!=d[u].end();it++) &#123; int v=(*it); if (v!=son[u]&amp;&amp;v!=f[u])dfs2(v,v); &#125;&#125;int Lca(int x,int y) //树剖求lca&#123; while (top[x]!=top[y]) &#123; if (dep[top[x]]&lt;dep[top[y]])swap(x,y); x=f[top[x]]; &#125; if (dep[x]&gt;dep[y])swap(x,y); return x;&#125;void add(int x)&#123; tmp+=(++c[a[x]]==1);&#125;void del(int x)&#123; tmp-=(--c[a[x]]==0);&#125;void calc(int x) //对点进行加入或删除&#123; (!use[x])?add(x):del(x); use[x]^=1;&#125;int cmp(node x,node y) //排序&#123; return (x.ll==y.ll)?(x.ll%2==1?x.r&lt;y.r:x.r&gt;y.r):x.l&lt;y.l;&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); for (int i=1;i&lt;=n;i++) scanf(\"%d\",&amp;a[i]),data[i]=a[i]; sort(data+1,data+n+1); for(int i=1;i&lt;=n;i++)a[i]=lower_bound(data+1,data+n+1,a[i])-data; //离散化 int x,y; for (int i=1;i&lt;n;i++) &#123; scanf(\"%d%d\",&amp;x,&amp;y); d[x].push_back(y); d[y].push_back(x); &#125; dfs1(1,0); dfs2(1,1); blo=n*2/sqrt(m*2/3); for (int i=1;i&lt;=m;i++) &#123; scanf(\"%d%d\",&amp;x,&amp;y); if (st[x]&gt;st[y])swap(x,y); //保证stx&lt;sty q[i].id=i; q[i].lca=Lca(x,y); if (q[i].lca==x) //x,y在以x为根的子树中 &#123; q[i].l=st[x]; q[i].r=st[y]; q[i].ll=st[x]/blo; q[i].rr=st[y]/blo; q[i].lca=0; &#125; else &#123; q[i].l=ed[x]; q[i].r=st[y]; q[i].ll=ed[x]/blo; q[i].rr=st[y]/blo; &#125; &#125; sort(q+1,q+m+1,cmp); for (int i=1;i&lt;=m;i++) &#123; while (l&gt;q[i].l)calc(his[--l]); while (r&lt;q[i].r)calc(his[++r]); while (l&lt;q[i].l)calc(his[l++]); while (r&gt;q[i].r)calc(his[r--]); if (q[i].lca)calc(q[i].lca); ans[q[i].id]=tmp; if (q[i].lca)calc(q[i].lca); &#125; for (int i=1;i&lt;=m;i++) printf(\"%d\\n\",ans[i]); return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"分块","slug":"分块","permalink":"https://sdlang.ml/tags/分块/"},{"name":"树上莫队","slug":"树上莫队","permalink":"https://sdlang.ml/tags/树上莫队/"}]},{"title":"洛谷 P4450 双亲数","slug":"p4450","date":"2019-07-09T16:00:00.000Z","updated":"2019-08-27T03:15:18.811Z","comments":true,"path":"2019/07/10/p4450/","link":"","permalink":"https://sdlang.ml/2019/07/10/p4450/","excerpt":"小 D 是一名数学爱好者，他对数字的着迷到了疯狂的程度。 我们以 d = gcd(a, b) 表示 a 、b 的最大公约数，小D执著的认为，这样亲密的关系足可以用双亲来描述，此时，我们称有序数对 (a, b) 为d的双亲数。 与正常双亲不太相同的是，对于同一个 d ，他的双亲太多了 &gt;_&lt; 比如， (4, 6), (6, 4), (2, 100) 都是 2 的双亲数。于是一个这样的问题摆在眼前，对于 0&lt;a&lt;=A, 0&lt;b&lt;=B ，有多少有序数对 (a, b) 是 d 的双亲数？","text":"小 D 是一名数学爱好者，他对数字的着迷到了疯狂的程度。 我们以 d = gcd(a, b) 表示 a 、b 的最大公约数，小D执著的认为，这样亲密的关系足可以用双亲来描述，此时，我们称有序数对 (a, b) 为d的双亲数。 与正常双亲不太相同的是，对于同一个 d ，他的双亲太多了 &gt;_&lt; 比如， (4, 6), (6, 4), (2, 100) 都是 2 的双亲数。于是一个这样的问题摆在眼前，对于 0&lt;a&lt;=A, 0&lt;b&lt;=B ，有多少有序数对 (a, b) 是 d 的双亲数？ 看完题目，就知道了是要求这个式子 \\sum_{a=1}^A\\sum_{b=1}^B\\ [gcd(a,b)=d]考虑莫反，设$f(x)=\\begin{cases} 1&amp;(x=d)&amp;\\\\ 0&amp;(x\\ne d)&amp;\\end{cases}$ 那么我们要找到一个$g$使得$f=g1$，即$f(x)=\\sum_{k|x}g(x)$，因为$1$的逆是$\\mu$，所以$g=f\\mu$ g(x)=\\sum_{k|x}\\mu(\\frac{x}{k})[k=d]g(x)=\\mu(\\frac{x}{d})[d|x]假设我们已经求出来$g$，那么就可以对式子进行化简了 \\sum_{a=1}^A\\sum_{b=1}^B\\ f(gcd(a,b))\\sum_{a=1}^A\\sum_{b=1}^B\\sum_{k|a,k|b}\\ g(k)\\sum_{k=1}^{min(A,B)}g(k)\\ \\sum_{a=1}^A\\sum_{b=1}^B\\ [k|a]\\ [k|b]\\sum_{k=1}^{min(A,B)}g(k)\\ \\lfloor\\frac{A}{k}\\rfloor\\ \\lfloor\\frac{B}{k}\\rfloor然后对这个式子整除分块就可以了 至于$g$怎么求，我们把$\\mu$筛出来，然后就可以求每个$g(x)$，再做一个前缀和就可以$O(1)$询问区间$g$的和了 Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;iostream&gt;#include &lt;cstdio&gt;#define N 1000000using namespace std;int a,b,d,mul[N+5],v[N+5],prime[N+5],cnt,g[N+5],sg[N+5];long long ans;void make()&#123; mul[1]=1;v[1]=1; for (int i=2;i&lt;=N;i++) //线筛筛μ &#123; if (!v[i]) &#123; prime[++cnt]=i; mul[i]=-1; &#125; for (int j=1;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=N;j++) &#123; v[prime[j]*i]=1; if (i%prime[j]!=0)mul[i*prime[j]]=-mul[i]; else &#123; mul[i*prime[j]]=0; break; &#125; &#125; &#125; for (int i=1;i&lt;=N;i++) //处理g函数 if (i%d==0) g[i]=mul[i/d]; for (int i=1;i&lt;=N;i++) //前缀和 sg[i]=sg[i-1]+g[i];&#125;int main()&#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;d; make(); if (a&gt;b)swap(a,b); for (int l=1,r;l&lt;=a;l=r+1) 整除分块 &#123; r=min(a/(a/l),b/(b/l)); ans+=(sg[r]-sg[l-1])*1LL*(a/l)*1LL*(b/l)*1LL; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; 常数大，代码丑(╯︵╰)**","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"莫比乌斯反演","slug":"莫比乌斯反演","permalink":"https://sdlang.ml/tags/莫比乌斯反演/"}]},{"title":"洛谷 P4454 [CQOI2018]破解D-H协议","slug":"p4454","date":"2019-06-27T16:00:00.000Z","updated":"2019-08-27T03:15:24.469Z","comments":true,"path":"2019/06/28/p4454/","link":"","permalink":"https://sdlang.ml/2019/06/28/p4454/","excerpt":"求解类似如下方程 A\\equiv g^a\\ (mod\\ P),B\\equiv g^b\\ (mod\\ P)K\\equiv A^b\\ (mod\\ P),K\\equiv B^a\\ (mod\\ P)","text":"求解类似如下方程 A\\equiv g^a\\ (mod\\ P),B\\equiv g^b\\ (mod\\ P)K\\equiv A^b\\ (mod\\ P),K\\equiv B^a\\ (mod\\ P) 第一个行的式子很熟悉啊QAQ，$g$和$p$不互质，就是$\\text{Ex_BSGS}$了 求出$A$之后带到下面的式子快速幂就完了 就拿第一行左边的$A\\equiv g^a (mod P)$来说了 设$G=gcd(g,P)$，如果$G&gt;1$，就对$A/G,P/G,g/G$ 式子变成了$g^{a-1}\\times \\frac{g}{G}\\equiv\\frac{A}{G} (mod \\frac{P}{G})$ 而如果$G\\nmid A$并且$A\\ne-1$，方程无解（此题没有无解的情况） 这样子一直到$G=1$，再把$\\frac{g}{G}$移到右边，然后就可以用$BSGS$算法求解了 $BSGS$算法是用来求解形如$A^x\\equiv B (mod P)$，其中$A,P$互质，的最小正整数解$x$ 就拿刚刚的字母写了 设$M=\\left \\lfloor \\sqrt P \\right \\rfloor,x=iM-j,1\\le i,j\\le M$ 带到方程中$A^{iM-j}\\equiv B (mod P)$ 化一下得到$(A^M)^i\\equiv B\\times A^j (mod P)$ 然后对$B\\times A^j$哈希一下就做完了 sb了，没看到是原根，所以直接bsgs= = Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;map&gt;#include &lt;cmath&gt;#define int long longusing namespace std;int A,B,p,g,n,a,b,K;map &lt;int,int&gt; f;int gcd(int a,int b) //最大公约数&#123; if (!b)return a; return gcd(b,a%b);&#125;int mypow(int a,int x,int p) //快速幂&#123; int s=1; while (x) &#123; if (x&amp;1)s=s*a%p; a=a*a%p; x&gt;&gt;=1; &#125; return s;&#125;int exgcd(int a,int b,int &amp;x,int &amp;y) //扩欧求逆元&#123; if (!b)x=1,y=0; else &#123; exgcd(b,a%b,x,y); int t=x; x=y; y=t-a/b*y; &#125;&#125;int inv(int a,int b) //逆元&#123; int x,y; exgcd(a,b,x,y); return (x%b+b)%b;&#125;int bsgs(int a,int b,int p)&#123; f.clear(); int m=ceil(sqrt(p)); for (int i=1;i&lt;=m;i++) &#123; b=b*a%p; f[b]=i; &#125; b=1; int tmp=mypow(a,m,p); for (int i=1;i&lt;=m;i++) &#123; b=b*tmp%p; if (f[b])return (i*m-f[b]+p)%p; &#125;&#125;int exbsgs(int a,int b,int p)&#123; if (b==1||p==1)return 0; int g=gcd(a,p),k=0,na=1; while (g!=1) &#123; k++;b/=g;p/=g;na=na*(a/g)%p; if (na==b)return k; g=gcd(a,p); &#125; return bsgs(a,b*inv(na,p)%p,p)+k;&#125;signed main()&#123; cin&gt;&gt;g&gt;&gt;p&gt;&gt;n; g%=p; for (int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;A&gt;&gt;B; A%=p; B%=p; b=exbsgs(g,B,p); a=mypow(A,b,p); cout&lt;&lt;a&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"bsgs","slug":"bsgs","permalink":"https://sdlang.ml/tags/bsgs/"}]},{"title":"洛谷 P4861 按钮","slug":"p4861","date":"2019-06-27T16:00:00.000Z","updated":"2019-08-27T03:16:36.819Z","comments":true,"path":"2019/06/28/p4861/","link":"","permalink":"https://sdlang.ml/2019/06/28/p4861/","excerpt":"房间的铁门上有一个按钮，还有一个显示屏显示着“1”。旁边还有一行小字：“这是一个高精度M进制计算器，每按一次按钮，屏幕上的数便会乘以K。当个位数再次变为1时，门就开了。”由于Ada急于出去，所以你要在1s之内求出她的最小按键次数。","text":"房间的铁门上有一个按钮，还有一个显示屏显示着“1”。旁边还有一行小字：“这是一个高精度M进制计算器，每按一次按钮，屏幕上的数便会乘以K。当个位数再次变为1时，门就开了。”由于Ada急于出去，所以你要在1s之内求出她的最小按键次数。 首先我们看到题目，每次在$M$进制下对$1$乘$k$，也就是对$k$乘方，最后还是得到$1$ 这样我们就可以列出同余方程$k^x\\equiv 1 (mod M)$ 而初始状态为$1$，即$k^0=1$ 所以答案就是满足方程的最小的正整数$x$ 其实这道题是$\\text{Ex_BSGS}$，因为题目不满足$k$和$M$互质 考虑我们在做$\\text{Ex_BSGS}$时，每次取出$g=gcd(k,M),b’=\\frac{b}{g},M’=\\frac{M}{g},k’=\\frac{k}{g}$ 得到新方程$k^{x-1}\\times k’\\equiv b’ (mod M’)$ 移项得到$k^{x-1}\\equiv \\frac{b’}{k’} (mod M’)$ 无解的情况就是$g\\nmid b$并且$b\\ne1$ 证明就不证了，不会的可以去看这篇文章QAQ 直到$g=1$，即$k$，$M$互质，就可以用$BSGS$求解了 而题目给的$b$是$1$，那么我们回去看这个过程，$k,M$不互质说明$g&gt;1$ g>1,x\\ne0\\Rightarrow g\\nmid b\\Rightarrow \\text{无解}所以这个题特判下$k,M$互不互质然后跑$BSGS$就好了 简单说下$BSGS$怎么写吧 设$n=\\left \\lfloor \\sqrt M \\right \\rfloor,x=i\\times n-j,1\\le i,j\\le n$，原方程就变为 k^{i\\times n-j}\\equiv 1\\ (mod\\ M)(k^n)^i\\equiv k^j\\ (mod\\ M)然后把$k^j$求出来哈希一下就可以啦 Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;map&gt;#include &lt;cmath&gt;#define int long longusing namespace std;int m,k;map &lt;int,int&gt; f;int mypow(int a,int x,int p) //快速幂&#123; int s=1; while (x) &#123; if (x&amp;1)s=s*a%p; a=a*a%p; x&gt;&gt;=1; &#125; return s;&#125;int gcd(int a,int b) //最大公约数&#123; if (!b)return a; return gcd(b,a%b);&#125;signed main()&#123; cin&gt;&gt;m&gt;&gt;k; if (gcd(m,k)!=1) //特判无解 &#123; cout&lt;&lt;\"Let's go Blue Jays!\"&lt;&lt;endl; return 0; &#125; int n=ceil(sqrt(m)),b=1; for (int i=1;i&lt;=n;i++) //k^j &#123; b=b*k%m; f[b]=i; &#125; b=1; int tmp=mypow(k,n,m); for (int i=1;i&lt;=n;i++) //(k^n)^i &#123; b=b*tmp%m; if (f[b]&amp;&amp;(i*n-f[b]+m)%m!=0) //有解且不为0 &#123; cout&lt;&lt;(i*n-f[b]+m)%m&lt;&lt;endl; return 0; &#125; &#125; cout&lt;&lt;\"Let's go Blue Jays!\"&lt;&lt;endl; //无解 return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"bsgs","slug":"bsgs","permalink":"https://sdlang.ml/tags/bsgs/"}]},{"title":"一周总结19.6.23-19.6.28","slug":"week1","date":"2019-06-27T16:00:00.000Z","updated":"2019-09-08T11:20:46.635Z","comments":true,"path":"2019/06/28/week1/","link":"","permalink":"https://sdlang.ml/2019/06/28/week1/","excerpt":"这周学了数论，感觉好颓废啊","text":"这周学了数论，感觉好颓废啊 先是照着一本通的进度来的，质数啊，乘方啊，什么的 把之前学的快速幂，线性筛又复习了一遍，那个素数分布定理挺重要的 质因数分解没啥好说的，樱花那道题是道比较好玩的题 然后就是约数，什么$\\sqrt N$求出约数，然后那个唯一分解定理是很重要的，很多题都要用到 最大公约数和最小公倍数的求法，都很熟悉了，还有高精版的求最大公约数，就是把那两个数约一约再求 把$Hankson$的趣味题写了，很久以前的坑终于填上了，以前的方法太麻烦，还是推式子化式子有意思 最重要的一章是同余问题 说下那些定理吧，不说怎么证的了（也说不过来） 欧拉定理，费马小定理（这个很好证，带到欧拉定理就行了），欧拉定理的推论（这个一带也证完了） 然后扩展欧几里得定理，这个定理非常的重要！！求逆元，中国剩余定理都要用到 扩欧解同余方程，这个化一下式子就很简单了 逆元，在模意义下除一个数，因为一些奇怪的性质，所以相当于乘逆元，求逆元的话解同余方程或者模数是质数用费马小定理就可以直接算了 中国剩余定理，求解同余方程组，而模数都是两两互质的，这个比较好做啊，不多说了 然后跑去学了扩展中国剩余定理，是在模数两两不互质的情况下，这就需要用到扩欧解同余方程了，然后对解处理一下也做完了 话说只要会扩展中国剩余定理就可以做出来$NOI2018$的$t1$辣，然后就有铜牌了，莫名激动QAQ 高次同余方程，这个用$BSGS$求解，思路很简单，大体上是分块思想，然后用哈希就做完了 学完这个又跑去学了扩展$BSGS$，这个是处理所有情况的，只要对式子都除一些东西，然后继续跑$BSGS$就完事了 同余完了是矩阵 第一次觉得矩阵乘法不难 矩阵快速幂的思想和快速幂的思想是一样的，然后学了矩阵加速，那天日推有高斯消元就做了，矩阵魅力无穷qwq 组合数 这个东西以前一直没学好，现在可能理解点了 二项式定理，以前觉得好神仙啊，看不懂哇，现在看看也挺简单的嘛 $Lucas$定理，是求在模意义下的组合数，这个定理很好用，写起来也很简单，但要保证模数是质数 $ExLucas$，这个是不保证模数是质数，也比较简单，找个规律，暴力处理阶乘就好了 卡特兰数，这个东西的证明真的有意思，似乎不太常用，数据一大就得高精了，真麻烦 博弈论不说了，学的不太好 夏令营似乎要讲莫反和杜教筛，跑去学了狄里克雷卷积和莫反，非常自闭，就写了一道题练练 dsq：lrz学数学的能力和他写别的题的能力形成鲜明对比 然后有一天日推有个数论分块，就去学了，不是很难，又把模积和做了，之后就是找比较简单的题做了 学数学真的好颓废啊QAQ 鼓励鼓励自己QAQ 与其被自己的本性牵着走而痛苦，倒不如试着改变自己。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://sdlang.ml/categories/随笔/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"}]},{"title":"洛谷 P4195 【模板】exBSGS/Spoj3105 Mod","slug":"p4195","date":"2019-06-26T16:00:00.000Z","updated":"2019-08-27T03:15:13.105Z","comments":true,"path":"2019/06/27/p4195/","link":"","permalink":"https://sdlang.ml/2019/06/27/p4195/","excerpt":"已知数a,p,b，求满足a^x≡b(mod p)的最小自然数x。","text":"已知数a,p,b，求满足a^x≡b(mod p)的最小自然数x。 扩展BSGS的板子题回忆$BSGS$算法，给定整数$a,b,p$，其中$a,p$互质，求方程$a^x\\equiv b (mod p)$的最小整数解$x$ 做法：设$x=i\\times m-j,m=\\left \\lceil \\sqrt p \\right \\rceil,1\\le j\\le m,1\\le i\\le m$ 方程变为$a^{im-j}\\equiv b (mod p)$ 化一下$(a^m)^i\\equiv b\\times a^j (mod p)$ 这时只要把$(a^m)^i$和$b\\times a^j$预处理出来丢到哈希表里就做完了 而现在的$a,p$不互质了，所以我们要考虑其他的方法，也就是$\\text{Ex_BSGS}$ 那么我们设$g=gcd(a,p)$ 根据模的分配率，方程变为$\\frac{a^x}{g}\\equiv \\frac{b}{g} (mod \\frac{p}{g})$ 无解情况就是$g\\nmid b$并且$b\\ne 1$ 我们来证明一下 设$a’=\\frac{a}{g},p’=\\frac{p}{g}$，那么$a=a’g,p=p’g$ 代入到原方程中变为$(a’g)^x\\equiv b (mod p’g)$ a'^xg^x+yp'g=bg(a'^xg^{x-1}+yp')=b这样子$g$就是$b$的因子，而只有在$b=1$时，$a^0=1$，其余情况若$g\\nmid b$，方程无解 证毕 那么我们再把上面的式子化一下变为$a^{x-1}\\times\\frac{a}{g}\\equiv \\frac{b}{g} (mod \\frac{p}{g})$ 而$\\frac{p}{g}$一定是比$p$小的，所以可以一直约到$a,\\frac{p}{g}$互质 设$na=\\prod_{i=1}^k\\frac{a}{g_i}$ 原式就可以写成$a^{x-k}\\equiv \\frac{b}{\\prod_{i=1}^k g\\times na}(mod \\frac{p}{\\prod_{i=1}^kg})$ ，$k$是做了几次化简 这样子就可以用$BSGS$求解啦 有一点需要注意，因为是在模意义下运算，所以除以$na$时要乘其逆元 因为最后一直化到了$\\frac{a}{\\prod_{i=1}^kg}$和$\\frac{p}{\\prod_{i=1}^kg}$互质，所以$na$和$\\frac{p}{\\prod_{i=1}^kg}$看起来也很互质 就可以用扩欧求逆元了 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;#include &lt;map&gt;#include &lt;cmath&gt;#define int long longusing namespace std;int a,p,b;map &lt;int,int&gt; f;int gcd(int a,int b) //最大公约数&#123; if (!b)return a; return gcd(b,a%b);&#125;void exgcd(int a,int b,int &amp;x,int &amp;y) //扩欧&#123; if (!b)x=1,y=0; else &#123; exgcd(b,a%b,x,y); int t=x; x=y; y=t-a/b*y; &#125;&#125;int inv(int a,int b) //逆元&#123; int x,y; exgcd(a,b,x,y); return (x%b+b)%b;&#125;int mypow(int a,int x,int p)&#123; int s=1; while (x) &#123; if (x&amp;1)s=s*a%p; a=a*a%p; x&gt;&gt;=1; &#125; return s;&#125;int bsgs(int a,int b,int p) //BSGS算法&#123; f.clear(); int m=ceil(sqrt(p)); b%=p; for (int i=1;i&lt;=m;i++) &#123; b=b*a%p; f[b]=i; &#125; int tmp=mypow(a,m,p); b=1; for (int i=1;i&lt;=m;i++) &#123; b=b*tmp%p; if (f[b])return (i*m-f[b]+p)%p; &#125; return -1;&#125;int exbsgs(int a,int b,int p)&#123; if (b==1||p==1)return 0; //特殊情况，x=0时最小解 int g=gcd(a,p),k=0,na=1; while (g&gt;1) &#123; if (b%g!=0)return -1; //无法整除则无解 k++;b/=g;p/=g;na=na*(a/g)%p; if (na==b)return k; //na=b说明前面的a的次数为0，只需要返回k g=gcd(a,p); &#125; int f=bsgs(a,b*inv(na,p)%p,p); if (f==-1)return -1; return f+k;&#125;signed main()&#123; cin&gt;&gt;a&gt;&gt;p&gt;&gt;b; while(a||b||p) &#123; a%=p;b%=p; int t=exbsgs(a,b,p); if (t==-1)cout&lt;&lt;\"No Solution\"&lt;&lt;endl; else cout&lt;&lt;t&lt;&lt;endl; cin&gt;&gt;a&gt;&gt;p&gt;&gt;b; &#125; return 0;&#125; $BSGS$写挂了调了半天QAQ","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"bsgs","slug":"bsgs","permalink":"https://sdlang.ml/tags/bsgs/"}]},{"title":"洛谷 P2183 [国家集训队]礼物","slug":"p2183","date":"2019-06-25T16:00:00.000Z","updated":"2019-08-27T03:14:18.620Z","comments":true,"path":"2019/06/26/p2183/","link":"","permalink":"https://sdlang.ml/2019/06/26/p2183/","excerpt":"一年一度的圣诞节快要来到了。每年的圣诞节小E都会收到许多礼物，当然他也会送出许多礼物。不同的人物在小E心目中的重要性不同，在小E心中分量越重的人，收到的礼物会越多。小E从商店中购买了n件礼物，打算送给m个人，其中送给第i个人礼物数量为wi。请你帮忙计算出送礼物的方案数（两个方案被认为是不同的，当且仅当存在某个人在这两种方案中收到的礼物不同）。由于方案数可能会很大，你只需要输出模P后的结果。","text":"一年一度的圣诞节快要来到了。每年的圣诞节小E都会收到许多礼物，当然他也会送出许多礼物。不同的人物在小E心目中的重要性不同，在小E心中分量越重的人，收到的礼物会越多。小E从商店中购买了n件礼物，打算送给m个人，其中送给第i个人礼物数量为wi。请你帮忙计算出送礼物的方案数（两个方案被认为是不同的，当且仅当存在某个人在这两种方案中收到的礼物不同）。由于方案数可能会很大，你只需要输出模P后的结果。 看到题之后，应该就能写出式子 ans=\\prod_{i=1}^{m}C_{n-\\sum_{j=1}^{i-1}w_j}^{w_i}(mod\\ P)式子看起来很麻烦，其实很好想 当我们给第一个人送礼物的时候，我们有$n$个礼物，要选$w_1$个，方案就有$C_n^{w_{1}}$种 然后给第二个人送礼物的时候，我们剩下$n-w_1$个礼物，要选$w_2$个，方案有$C_{n-w_1}^{w_2}$种 就这样一直送到第$m$个人，而根据乘法原理，就得到这个式子了 这道题似乎就做完了，但在算$C_n^m(mod p_i^{c_i})$时又遇到了瓶颈：$p_i^{c_i}$不是质数 既然不是质数，我们就不能用$Lucas$定理来求，这就需要用到$ExLucas$了 虽然是扩展的，但和$Lucas$完全沾不上边 我们观察到题目给了$P=\\prod _{i=1}^{t}p_{i}^{c_i}$ 而$p_i$是质数，那么所有的$p_i^{c_i}$都是互质的 那么我们只要对于每个$p_i^{k=c_i}$求出其$C_n^m mod p_i^k$的值，然后用中国剩余定理就可以算出最小正整数解 问题转化成了如何快速的求$C_n^m mod p^k$ 把组合数展开，我们得到 \\frac{n!}{m!(n-m)!}\\ mod\\ p^k那么只要快速求出模意义下的阶乘就好了 如果我们要求$x! mod p^k$，假设$x=17,p=2,k=3$，观察一下式子 17!=1\\times2\\times3\\times4\\times5\\times6\\times7\\times8\\times9\\times10\\times11\\times12\\times13\\times14\\times15\\times16\\times17化式子$17!=$ 2\\times4\\times6\\times8\\times10\\times12\\times14\\times16\\times1\\times3\\times5\\times7\\times9\\times11\\times13\\times15\\times17(2\\times1)\\times(2\\times2)\\times(2\\times3)\\times…\\times(2\\times8)\\times(1\\times3\\times5\\times…\\times17)2^8\\times(1\\times2\\times3\\times…\\times8)\\times(1\\times3\\times5\\times…\\times17)2^8\\times8!\\times(1\\times3\\times5\\times7\\times9\\times11\\times13\\times15\\times17)而在模$p^k=2^3=8$意义下$1\\times3\\times5\\times7=9\\times11\\times13\\times15$ 所以式子就变成了 2^8\\times8!\\times(1\\times3\\times5\\times7)^2\\times17那么$x!$就变成了$p^n\\times t!\\times(a_1\\times a_2\\times…a_m)^r\\times a_{m+1}\\times…a_{q}$ 可以看出$n=t=\\left \\lfloor \\frac{x}{p} \\right \\rfloor,r=\\left \\lfloor \\frac{x}{p^k} \\right \\rfloor$，其中$t!$可以一直递归求解，然后后面的暴力算 这样这个题就做完啦QAQ Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#define int long longusing namespace std;int p[200000],n,m,P,cnt,z[200000],a[200000],ans;void exgcd(int a,int b,int &amp;x,int &amp;y) //扩欧&#123; if (!b)x=1,y=0; else &#123; exgcd(b,a%b,x,y); int t=x; x=y; y=t-a/b*y; &#125;&#125;int mypow(int a,int x,int p) //快速幂&#123; int s=1; while (x) &#123; if (x&amp;1)s=s*a%p; a=a*a%p; x&gt;&gt;=1; &#125; return s;&#125;int fac(int n,int a,int b) //求阶乘&#123; if (!n)return 1; int s=1; for (int i=1;i&lt;=b;i++) //处理a1*a2*…am if (i%a!=0) s=s*i%b; s=mypow(s,n/b,b); for (int i=1;i&lt;=n%b;i++) //处理am+1*…aq if (i%a!=0) s=s*i%b; return s*fac(n/a,a,b)%b; //递归求解&#125;int inv(int a,int b) //求逆元&#123; int x,y; exgcd(a,b,x,y); return (x%b+b)%b;&#125;int C(int m,int n,int a,int b) //处理组合数&#123; int nn=fac(n,a,b),mm=fac(m,a,b),nm=fac(n-m,a,b),po=0; //求阶乘 for (int i=n;i;i/=a) //处理n^p中的p po+=i/a; for (int i=m;i;i/=a) po-=i/a; for (int i=n-m;i;i/=a) po-=i/a; return nn*mypow(a,po,b)%b*inv(mm,b)%b*inv(nm,b)%b; &#125;signed main()&#123; cin&gt;&gt;n&gt;&gt;m&gt;&gt;P; int pp=P; for (int i=2;i*i&lt;=P;i++) //分解 if (pp%i==0) &#123; int x=i; z[++cnt]=i; while (pp%x==0)x*=i; x/=i; p[cnt]=x; pp/=x; &#125; if (pp!=1)p[++cnt]=pp,z[cnt]=pp; for (int i=1;i&lt;=cnt;i++) a[i]=C(m,n,z[i],p[i]); for (int i=1;i&lt;=cnt;i++) //中国剩余定理 &#123; int pi=P/p[i],x,y; exgcd(pi,p[i],x,y); ans=((ans+pi*a[i]*x%P)+P)%P; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"组合数","slug":"组合数","permalink":"https://sdlang.ml/tags/组合数/"},{"name":"lucas","slug":"lucas","permalink":"https://sdlang.ml/tags/lucas/"},{"name":"中国剩余定理","slug":"中国剩余定理","permalink":"https://sdlang.ml/tags/中国剩余定理/"}]},{"title":"Catalan数","slug":"Catalan","date":"2019-06-24T16:00:00.000Z","updated":"2019-08-27T03:12:45.803Z","comments":true,"path":"2019/06/25/Catalan/","link":"","permalink":"https://sdlang.ml/2019/06/25/Catalan/","excerpt":"学了$Catalan$数，赶紧复习怕自己忘记","text":"学了$Catalan$数，赶紧复习怕自己忘记 先丢个问题吧 问题：给$n$个$0$和$n$个$1$，它们按照某种顺序排成长度为$2n$的数列，对于每个前缀，$0$的数量都不少于$1$的数量的数列个数。 解：令这些数排成一个长度为$2n$的数列，且不满足每个前缀中$0$的数列不少于$1$的数量，那么必定存在一个最小的位置$2i+1∈[1,2n]$，使得这个前缀中有$i$个$0$，$i+1$个$1$，而对后面的数取反后，有$n-i-1$个$0$，$n-i$个$1$，于是我们得到了一个有$n-1$个$0$，$n+1$个$1$排成的数列。 同理，如果把有$n-1$个$0$，$n+1$个$1$排成的数列继续进行上述操作，就得到了有$n$个$0$，$n$个$1$排成的数列。 这便构成了一个双射： 由$n$个$0$和$n$个$1$排成的存在一个前缀中$1$比$0$多的数列。 由$n-1$个$0$和$n+1$个$1$排成的数列。 然后式子就出来了 Cat_n=C_{2n}^n-C_{2n}^{n-1}=\\frac{(2n)!}{n!\\times n!}-\\frac{(2n)!}{(n-1)!\\times(n+1)!}=\\frac{1}{n+1}\\times C_{2n}^n这就是卡特兰$(Catalan)$数了","categories":[{"name":"随笔","slug":"随笔","permalink":"https://sdlang.ml/categories/随笔/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"卡特兰数","slug":"卡特兰数","permalink":"https://sdlang.ml/tags/卡特兰数/"},{"name":"组合数","slug":"组合数","permalink":"https://sdlang.ml/tags/组合数/"}]},{"title":"Lucas定理以及证明","slug":"Lucas","date":"2019-06-24T16:00:00.000Z","updated":"2019-08-27T03:13:35.626Z","comments":true,"path":"2019/06/25/Lucas/","link":"","permalink":"https://sdlang.ml/2019/06/25/Lucas/","excerpt":"对着无数篇博客终于$yy$懂了$Lucas$定理，兴奋之际赶紧写下来","text":"对着无数篇博客终于$yy$懂了$Lucas$定理，兴奋之际赶紧写下来 内容如果$p$是质数，那么$C_{n}^{m}\\equiv C_{n\\mod p}^{m\\mod p}\\times C_{n/p}^{m/p}(mod p)$ 证明首先我们要知道一个性质： 如果$p$为质数，那么有$C_{p}^{n}\\equiv 0(mod p)$，其中$n\\ne 0,p$ 这个很显然吧，考虑把组合数的式子写出来：$C_p^n=\\frac{p!}{n!(p-n)!}$ 把$p$提出来就变成了$\\frac{(p-1)!}{n!(p-n)!}\\times p$，就证完了 这个性质有什么用呢？别着急，我们先往下走 由二项式定理得：$(x+1)^p=\\sum _{i=0}^{p}C_p^i\\times x^i$ 而根据上面的性质，因为$n$只有在等于$0$或$p$时才为$1$，其余时都为$0$得到在模$p$意义下 (x+1)^p\\equiv x^p+1(mod\\ p)设$n=\\left \\lfloor \\frac{n}{p} \\right \\rfloor\\times p+n mod p$ 那么可得$(x+1)^n\\equiv (x+1)^{\\left \\lfloor \\frac{n}{p} \\right \\rfloor\\times p}+(x+1)^{n mod p}(mod p)$ 替换得$(x+1)^n\\equiv (x^p+1)^{\\left \\lfloor \\frac{n}{p} \\right \\rfloor}+(x+1)^{n mod p}(mod p)$ 根据二项式定理，展开得 \\sum_{i=0}^{n}C_n^i\\times x^i\\equiv \\sum_{j=0}^{\\left \\lfloor \\frac{n}{p} \\right \\rfloor}C_{\\left \\lfloor \\frac{n}{p} \\right \\rfloor}^j\\times x^j+\\sum_{k=0}^{n\\ mod\\ p}C_{n\\ mod\\ p}^{k}\\times x^k(mod\\ p)观察这个式子，我们发现对于每一个$i$，都一定存在$j,k$与其对应，保证$x^i=x^j\\times x^k$，约掉之后就是$Lucas$了 证毕 代码很好写，丢下板子题代码QAQ12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &lt;cstdio&gt;#define int long longusing namespace std;int t,m,n,p;int mypow(int a,int x)&#123; int s=1; while (x) &#123; if (x&amp;1)s=s*a%p; a=a*a%p; x&gt;&gt;=1; &#125; return s;&#125;int C(int m,int n)&#123; if (m&gt;n)return 0; int a=1,b=1; for (int i=1;i&lt;=n;i++)a=a*i%p; for (int i=1;i&lt;=m;i++)b=b*i%p; for (int i=1;i&lt;=n-m;i++)b=b*i%p; return a*mypow(b,p-2)%p;&#125;int lucas(int m,int n)&#123; if (!m)return 1; return C(m%p,n%p)*lucas(m/p,n/p)%p;&#125;signed main()&#123; cin&gt;&gt;t; while (t--) &#123; cin&gt;&gt;n&gt;&gt;m&gt;&gt;p; cout&lt;&lt;lucas(m,m+n)&lt;&lt;endl; &#125; return 0;&#125; 扩展$Lucas$我会尽快学了补上的QAQ","categories":[{"name":"随笔","slug":"随笔","permalink":"https://sdlang.ml/categories/随笔/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"组合数","slug":"组合数","permalink":"https://sdlang.ml/tags/组合数/"},{"name":"lucas","slug":"lucas","permalink":"https://sdlang.ml/tags/lucas/"}]},{"title":"洛谷 P4159 [SCOI2009]迷路","slug":"p4159","date":"2019-06-24T16:00:00.000Z","updated":"2019-08-27T03:15:07.381Z","comments":true,"path":"2019/06/25/p4159/","link":"","permalink":"https://sdlang.ml/2019/06/25/p4159/","excerpt":"windy在有向图中迷路了。 该有向图有 N 个节点，windy从节点 0 出发，他必须恰好在 T 时刻到达节点 N-1。 现在给出该有向图，你能告诉windy总共有多少种不同的路径吗？ 注意：windy不能在某个节点逗留，且通过某有向边的时间严格为给定的时间。","text":"windy在有向图中迷路了。 该有向图有 N 个节点，windy从节点 0 出发，他必须恰好在 T 时刻到达节点 N-1。 现在给出该有向图，你能告诉windy总共有多少种不同的路径吗？ 注意：windy不能在某个节点逗留，且通过某有向边的时间严格为给定的时间。 根据题意，可以写出转移方程 f_{i,j}=\\sum f_{r,j-w[r]}$f_{i,j}$表示第$j$时刻在第$i$个点时的方案数，$r$为$i$的前驱，$w[r]$为距离 而$T\\le 10^9$，所以肯定是不可行的，就要用到矩阵加速 如果对于上面那个转移方程是无法矩阵加速的 但是边权只有$1…9$，我们可以把$j$分开表示，也就是把所有距离的情况都表示出来 那么对于上面的那个转移方程就有两种转移形式 这个距离$j$不是真正的距离，那么$f_{r,j}$可以从$f_{r,j-1}$继承 这个$j$是真正的距离，那么$f_{r,j}$对$f_{i,j}$是有贡献的 代码和拆点一样= = Code12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;int n,t,d[500][500],s[500][500],b[500][500],p=2009;char ch;void jzc(int x[500][500],int y[500][500])&#123; for (int i=1;i&lt;=n*9;i++) for (int j=1;j&lt;=n*9;j++) for (int k=1;k&lt;=n*9;k++) b[i][j]=(b[i][j]+x[i][k]*y[k][j]%p)%p; for (int i=1;i&lt;=n*9;i++) for (int j=1;j&lt;=n*9;j++) x[i][j]=b[i][j],b[i][j]=0;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;t; for (int i=1;i&lt;=n;i++) &#123; for (int j=1;j&lt;=8;j++) //第一个的继承关系 d[i+j*n][i+(j-1)*n]=1; for (int j=1;j&lt;=n;j++) &#123; cin&gt;&gt;ch; d[i][j+n*((ch-'0')-1)]=1; //真正的边 &#125; &#125; for (int i=1;i&lt;=n*9;i++) s[i][i]=1; while (t) &#123; if (t&amp;1)jzc(s,d); jzc(d,d); t&gt;&gt;=1; &#125; cout&lt;&lt;s[1][n]&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"dp","slug":"dp","permalink":"https://sdlang.ml/tags/dp/"},{"name":"矩阵加速","slug":"矩阵加速","permalink":"https://sdlang.ml/tags/矩阵加速/"}]},{"title":"关于快速那些事","slug":"fast","date":"2019-06-23T16:00:00.000Z","updated":"2019-09-08T11:20:16.296Z","comments":true,"path":"2019/06/24/fast/","link":"","permalink":"https://sdlang.ml/2019/06/24/fast/","excerpt":"这段时间学了些关于快速$*$的东西，及时复习一下以免忘记","text":"这段时间学了些关于快速$*$的东西，及时复习一下以免忘记 快速幂求$b^pmod k$，其中$p$是个很大的数，比如……$10^{100}$ 暴力就t了，所以我们考虑 如果$p$是偶数，那么$b^p=b^{p/2}\\times b^{p/2}$ 如果$p$是奇数，那么$b^p=b^{p/2}\\times b^{p/2}\\times b$ 这个过程可以一直下去，最后时间复杂度就是$O(log(p))$的 Code1234567s=1;while (p)&#123; if (p&amp;1)s=s*b%k; b=b*b%k; p&gt;&gt;=2;&#125; 快速(龟速)乘求$a\\times b mod k$，其中$a,b$都是长整型数，也就是说相乘就会爆$long long$ 怎么办呢，我们仍然考虑和快速幂一样的思路 如果$b$是偶数，那么$a\\times b=a\\times (b/2)+ a\\times(b/2)$ 如果$b$是奇数，那么$a\\times b=a\\times(b/2)+a\\times(b/2)+a$ 这个过程跟快速幂很类似，虽然时间是$O(log(b))$的，但很好的避免了爆$long long $的问题 不过话虽这么说，多个大常数很容易使程序t掉，所以如果不得已最好不要用快速乘 Code1234567s=0; while (b) &#123; if (b&amp;1)s=(s+a)%k; a=a*2%k; b&gt;&gt;=1; &#125; 口胡代码，有错见谅 矩阵快速幂给你一个方阵$A$，求$A^k mod p$ 既然是快速幂，那肯定避免不了乘法，首先我们要了解矩阵乘法的定义 设$A,B$是两个矩阵，$C=A\\times B$那么 $A$的列数必须和$B$的行数相等 如果$A$是$n\\times r$的矩阵，$B$是$r\\times m$的矩阵，那么$C$是一个$n\\times m$的矩阵 $C_{i,j}=\\sum_{k=1}^{r}A_{i,k}\\times B_{k,j}$ 根据运算过程，显然矩阵乘法只有结合律没有交换律 而对于矩阵的乘幂来说，只有方阵，即行列个数相等的矩阵，可以进行乘幂运算 在此，我们还需要了解一个概念——单位矩阵 主对角线上的元素都是$1$，通常用$I$或$E$表示，图长这样子 I=\\begin{bmatrix}1&0&0&0&0\\\\0&1&0&0&0\\\\0&0&1&0&0\\\\0&0&0&1&0\\\\0&0&0&0&1\\end{bmatrix}这个东西可是非常的有用，任何数乘它都等于那个数本身，相当于线性运算中的$1$ 然后矩阵快速幂就很好写出来啦12345678910111213141516171819202122232425262728293031323334353637#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#define int long longusing namespace std;int n,k,p=1e9+7,a[500][500],s[500][500],b[500][500];void jzc(int x[500][500],int y[500][500])&#123; memset(b,0,sizeof(b)); for (int i=1;i&lt;=n;i++) for (int j=1;j&lt;=n;j++) for (int k=1;k&lt;=n;k++) b[i][j]=(b[i][j]+x[i][k]*y[k][j])%p; for (int i=1;i&lt;=n;i++) for (int j=1;j&lt;=n;j++) x[i][j]=b[i][j];&#125;signed main()&#123; cin&gt;&gt;n&gt;&gt;k; for (int i=1;i&lt;=n;i++) for (int j=1;j&lt;=n;j++) cin&gt;&gt;a[i][j],s[i][i]=1; while (k) &#123; if (k&amp;1)jzc(s,a); jzc(a,a); k&gt;&gt;=1; &#125; for (int i=1;i&lt;=n;i++) &#123; for (int j=1;j&lt;=n;j++) cout&lt;&lt;s[i][j]&lt;&lt;\" \"; cout&lt;&lt;endl; &#125; return 0;&#125; 可能还会有其他的一些快速$*$，以后学了会补充上。咕咕咕","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://sdlang.ml/categories/学习笔记/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"}]},{"title":"洛谷 P2421 [NOI2002]荒岛野人","slug":"p2421","date":"2019-06-23T16:00:00.000Z","updated":"2019-08-27T03:14:32.173Z","comments":true,"path":"2019/06/24/p2421/","link":"","permalink":"https://sdlang.ml/2019/06/24/p2421/","excerpt":"克里特岛以野人群居而著称。岛上有排列成环行的M个山洞。这些山洞顺时针编号为1,2,…,M。岛上住着N个野人，一开始依次住在山洞C1,C2,…,CN中，以后每年，第i个野人会沿顺时针向前走Pi个洞住下来。 每个野人i有一个寿命值Li，即生存的年数。 奇怪的是，虽然野人有很多，但没有任何两个野人在有生之年处在同一个山洞中，使得小岛一直保持和平与宁静，这让科学家们很是惊奇。他们想知道，至少有多少个山洞，才能维持岛上的和平呢？","text":"克里特岛以野人群居而著称。岛上有排列成环行的M个山洞。这些山洞顺时针编号为1,2,…,M。岛上住着N个野人，一开始依次住在山洞C1,C2,…,CN中，以后每年，第i个野人会沿顺时针向前走Pi个洞住下来。 每个野人i有一个寿命值Li，即生存的年数。 奇怪的是，虽然野人有很多，但没有任何两个野人在有生之年处在同一个山洞中，使得小岛一直保持和平与宁静，这让科学家们很是惊奇。他们想知道，至少有多少个山洞，才能维持岛上的和平呢？ 根据题目，设$x$为相遇天数，可以得到式子 c_{i}+p_{i}\\times x\\equiv c_{j}+p_{j}\\times x(mod\\ M)\\ (1\\le i,j\\le N)我们要保证对于每一对$(i,j)$，这个式子都要无解或者求出来的$x&gt;min(l[i],[j])$，即在两个人有一个人死了之后相遇 把这个式子化一下，就变成了 (p_i-p_j)\\times x\\equiv c_j-c_i(mod\\ M)写成方程的形式 (p_i-p_j)\\times x+M\\times y=c_j-c_i怎么解呢，我们不妨设$a=p_i-p_j,b=M,c=c_i-c_j$ 方程就成了 ax+by=c设$g=gcd(a,b)$，当$g|c$时，设$a’=a/g,b’=b/g,c’=c/g$ 我们可以用$exgcd$，即扩展欧几里得算发求出$a’x’+b’y’=1$的一组解$x’,y’$ 两边乘$c’$，得到$a’c’x’+b’c’y’=c’$ 两边乘$g$，得到$a’gc’x’+b’gc’y’=c’g$ 化简得到$ac’x’+bc’y’=c$ 于是我们得到了方程一组解$x_0=x’c’,y_0=y’c’$ 因为$M$最大到$10^6$，所以从$Max_{i=1}^{n}c_i-10^6$枚举$M$，如果方程都无解或者$x&gt;min(l[i],[j])$，那这个$M$就是答案了 Code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;iostream&gt;#include &lt;cstdio&gt;#define N 1000000#define int long longusing namespace std;int n,d[500],p[500],l[500],mm;int gcd(int x,int y)&#123; if (!y)return x; return gcd(y,x%y);&#125;void exgcd(int a,int b,int &amp;x,int &amp;y)&#123; if (!b)x=1,y=0; else &#123; exgcd(b,a%b,x,y); int t=x; x=y; y=t-a/b*y; &#125;&#125;int check(int m)&#123; for (int i=1;i&lt;n;i++) for (int j=i+1;j&lt;=n;j++) &#123; int a=p[i]-p[j],b=m,c=d[j]-d[i],g=gcd(a,b),x,y; if (c%g!=0)continue; a/=g,b/=g,c/=g; exgcd(a,b,x,y); if (b&lt;0)b=-b; x=(x*c%b+b)%b; if (x&lt;=min(l[i],l[j]))return 0; &#125; return 1;&#125;signed main()&#123; cin&gt;&gt;n; for (int i=1;i&lt;=n;i++) cin&gt;&gt;d[i]&gt;&gt;p[i]&gt;&gt;l[i],mm=max(mm,d[i]); for (int i=mm;i&lt;=N;i++) &#123; if (check(i)) &#123; cout&lt;&lt;i&lt;&lt;endl; return 0; &#125; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"扩展欧几里得","slug":"扩展欧几里得","permalink":"https://sdlang.ml/tags/扩展欧几里得/"}]},{"title":"洛谷 P3846 [TJOI2007]可爱的质数","slug":"p3846","date":"2019-06-23T16:00:00.000Z","updated":"2019-08-27T03:14:52.139Z","comments":true,"path":"2019/06/24/p3846/","link":"","permalink":"https://sdlang.ml/2019/06/24/p3846/","excerpt":"题意：求一个最小的$L$，满足$B^L\\equiv N(mod P)$","text":"题意：求一个最小的$L$，满足$B^L\\equiv N(mod P)$ 这就需要用到$BSGS(Baby Step Giant Step)$算法了（其实就是个裸的板子题QAQ） 首先要知道$P$是质数，所以原式中的$L$会在模$P$意义下循环，最小解在$[0,P-1]$ 我们设$L=i\\times m-j$，其中$m=\\left \\lceil {\\sqrt P} \\right \\rceil$，$1\\le j\\le m$, 则方程变为$B^{i\\times m-j}\\equiv N(mod P)$ 移项得到$(B^{m})^{i}\\equiv N\\times B^{j}(mod P)$ 而$B,m,n,P$都是已知的，我们选择哈希，把右边$N\\times B^{j}mod P$的值预处理出来丢到$map$里 每次枚举$i$，计算出$(B^{m})^{i}mod P$的值，如果在$map$里出现，说明原方程成立，计算出来的$L$就是最小解了 有一点要注意的是，如果$B$是$P$的倍数，那么$N$必须也是$P$的倍数，否则无解，这个情况特判下就可以了 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;map&gt;#include &lt;cmath&gt;#define int long longusing namespace std;int p,b,n;map &lt;int,int&gt; f; //哈希int mypow(int a,int x,int p) //快速幂&#123; int s=1; while (x) &#123; if (x&amp;1)s=s*a%p; a=a*a%p; x&gt;&gt;=1; &#125; return s;&#125; signed main()&#123; cin&gt;&gt;p&gt;&gt;b&gt;&gt;n; if (b%p==0&amp;&amp;n%p!=0) &#123; cout&lt;&lt;\"no solution\"&lt;&lt;endl; return 0; &#125; int m=ceil(sqrt(p)),now=n%p; for (int i=1;i&lt;=m;i++) //预处理N*B^j mod p &#123; now=now*b%p; if (!f[now])f[now]=i; &#125; now=mypow(b,m,p); int tmp=now; //枚举i for (int i=1;i&lt;=m;i++) &#123; if (f[now]) &#123; cout&lt;&lt;((i*m-f[now])%p+p)%p&lt;&lt;endl; //防止负数 return 0; &#125; now=now*tmp%p; &#125; cout&lt;&lt;\"no solution\"&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"bsgs","slug":"bsgs","permalink":"https://sdlang.ml/tags/bsgs/"}]},{"title":"欧拉定理以及费马小定理的推论和证明","slug":"olfm","date":"2019-06-22T16:00:00.000Z","updated":"2019-09-08T11:20:27.333Z","comments":true,"path":"2019/06/23/olfm/","link":"","permalink":"https://sdlang.ml/2019/06/23/olfm/","excerpt":"今天连续对着三篇博客终于懂了欧拉定理和费马小定理的推论和证明，及时复习以免忘记。","text":"今天连续对着三篇博客终于懂了欧拉定理和费马小定理的推论和证明，及时复习以免忘记。 欧拉定理内容：若正整数$a,n$互质，那么$a^{\\varphi(n)} \\equiv 1(mod n)$ 证明：我们知道1~n中和$n$互质的数有${\\varphi(n)}$个，为$x_{1},x_{2},x_{3}……x_{\\varphi(n)}$，那么就可以设一个集合$M$，其元素为 $m_{1}=a\\times x_{1}$ $m_{2}=a\\times x_{2}$ $m_{3}=a\\times x_{3}$ $……$ $m_{\\varphi(n)}=a\\times x_{\\varphi(n)}$ 那么得到两条性质 性质一：集合$M$中的任意两个元素都不模$n$同余 证明：反证法。 假设$M$中有两个元素$m_{i},m_{j}$模$n$同余 所以$m_{i}\\equiv m_{j}(mod n)$ 替换得$a\\times x_{i}\\equiv a\\times x_{j}(mod n)$ 根据同余的同加性得到$a\\times (x_{i}-x_{j})\\equiv 0(mod n)$ 因为$a$和$n$互质，所以$x_{i}-x{j}$是$n$的倍数 而每个$x_{i}$和$x_{j}$都比$n$小，所以上述结论不成立，原结论成立。 证毕 性质二：集合$M$中的数除以$n$的余数都与$n$互质 证明：首先$m_{i}=a\\times x_{i}$，其中$x_{i},a$都与与$n$互质，那么$m_{i}$与$n$互质 由互质得$gcd(m_{i},n)=1$ 由欧几里得定理得$gcd(m_{i},n)=gcd(n,m_{i} mod n)=1$ 证毕 然后就可以化式子了 由性质二我们知道集合$M$中所有元素模$n$都能找到唯一一个$x_{i}$与其对应，即对于每个$m_{i}$都有一个$x_{j}$和它模$n$同余 那么把它们乘起来得到 $m_{1}\\times m_{2}\\times m_{3}……m_{\\varphi (n)}\\equiv x_{1}\\times x_{2}\\times x_{3}……x_{\\varphi (n)}(mod n)$ 带入 $a\\times x_{1}\\times a\\times x_{2}\\times a\\times x_{3}……a\\times x_{\\varphi (n)}\\equiv x_{1}\\times x_{2}\\times x_{3}……x_{\\varphi (n)}(mod n)$ 化简 $a^{\\varphi(n)}\\times x_{1}\\times x_{2}\\times x_{3}……x_{\\varphi (n)}\\equiv x_{1}\\times x_{2}\\times x_{3}……x_{\\varphi (n)}(mod n)$ 根据同余的同乘性得 $a^{\\varphi(n)} \\equiv 1(mod n)$ 证毕 费马小定理内容：若$p$是质数，则对于任意正整数$a$，有$a^p\\equiv a(mod p)$ 证明：根据欧拉函数的性质可得$\\varphi(p)=p-1$ 则$a^{\\varphi(p)+1}\\equiv a(mod p)$ 由欧拉定理可得$a^{\\varphi(p)}\\equiv 1(mod p)$成立 故原式成立 证毕 欧拉定理的推论内容：若正整数$a,n$互质，则对于任意正整数$b$，都有$a^b\\equiv a^{b mod \\varphi(n)}(mod n)$ 证明：移项得$a^{b-b mod \\varphi(n)}\\equiv 1(mod n)$ 因为$\\varphi(n)|b-b mod \\varphi(n)$，所以可设$b-b mod \\varphi(n)=k\\times \\varphi(n)$ 式子变为$a^{k\\times \\varphi(n)}\\equiv 1(mod n)$ $(a^{k})^{\\varphi(n)}\\equiv 1(mod n)$ 由于$a,n$互质，那么$a^{k},n$也互质 再根据欧拉定理，原式成立 证毕","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://sdlang.ml/categories/学习笔记/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"}]},{"title":"洛谷 P3868 [TJOI2009]猜数字","slug":"p3868","date":"2019-06-22T16:00:00.000Z","updated":"2019-09-08T12:47:13.349Z","comments":true,"path":"2019/06/23/p3868/","link":"","permalink":"https://sdlang.ml/2019/06/23/p3868/","excerpt":"现有两组数字，每组k个，第一组中的数字分别为：a1，a2，…，ak表示，第二组中的数字分别用b1，b2，…，bk表示。其中第二组中的数字是两两互素的。求最小的非负整数n，满足对于任意的i，n - ai能被bi整除。","text":"现有两组数字，每组k个，第一组中的数字分别为：a1，a2，…，ak表示，第二组中的数字分别用b1，b2，…，bk表示。其中第二组中的数字是两两互素的。求最小的非负整数n，满足对于任意的i，n - ai能被bi整除。 中国剩余定理的裸题 题目要求的是最小的非负整数$n$满足$b_{i}|n-a_{i}(1\\le i\\le k)$ 将其转化成同余问题的方程组 $\\begin{cases}n&amp;\\equiv &amp;a_{1}(mod b_{1})\\\\n&amp;\\equiv &amp;a_{2}(mod b_{2})\\\\n&amp;\\equiv &amp;a_{3}(mod b_{3})\\\\…&amp;…&amp;\\\\n&amp;\\equiv &amp;a_{k}(mod b_{k})\\end{cases}$ 那么如何去求呢，这就要用到中国剩余定理了 我们设$M=\\prod_{i=1}^{n}b_{i}$，$m_{i}=M/b_{i}$ $x_{i}$是方程$m_{i}\\times x_{i}\\equiv 1(mod b_{i})$的一个解，可以由扩展欧几里得算法求得 那么答案$n$就为$\\sum_{i=1}^{n}a_{i}\\times m_{i}\\times x_{i}$ 为什么呢，我们来证明一下 因为$m_{i}=M/b_{i}$是除了$b_{i}$之外的所有$b$的积 所以$\\forall k\\ne i,a_{i}\\times m_{i}\\times x_{i}\\equiv 0(mod m_{k})$ 由$t_{i}$是方程$m_{i}\\times x_{i}\\equiv 1(mod b_{i})$，的一个解得$a_{i}\\times m_{i}\\times x_{i}\\equiv a_{i}(mod b_{i})$ 代入$n=\\sum_{i=1}^{n}a_{i}\\times m_{i}\\times x_{i}$，原方程组成立。 而我们要求的是最小非负整数解，那么只需要将$n$取模$M$使其落在0~M-1的范围内即可。 这道题的坑点在于直接相乘的话会爆$long long$，那么就需要用到快速乘了，思想跟快速幂一样，写起来也很简单 还有一点就是对于负数的情况要加上$M$再模$M$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;cstdio&gt;#define int long longusing namespace std;int k,a[20],b[20],M=1,ans;void exgcd(int a,int b,int &amp;x,int &amp;y) //扩展欧几里得算法求线性同余方程的解&#123; if (!b)x=1,y=0; else &#123; exgcd(b,a%b,x,y); int t=x; x=y; y=t-a/b*y; &#125;&#125;int cc(int x,int y) //快速乘&#123; int s=0; x=(x%M+M)%M; y=(y%M+M)%M; //先将负数转化为正数 while (y) &#123; if (y&amp;1)s=(s+x)%M; x=x*2%M; y&gt;&gt;=1; &#125; return s;&#125;signed main()&#123; cin&gt;&gt;k; for (int i=1;i&lt;=k;i++) cin&gt;&gt;a[i]; for (int i=1;i&lt;=k;i++) cin&gt;&gt;b[i],M*=b[i]; for (int i=1;i&lt;=k;i++) &#123; int m=M/b[i],x=0,y=0; exgcd(m,b[i],x,y); ans=(ans+cc(cc(a[i],m),x))%M; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"数论","slug":"数论","permalink":"https://sdlang.ml/tags/数论/"},{"name":"中国剩余定理","slug":"中国剩余定理","permalink":"https://sdlang.ml/tags/中国剩余定理/"}]},{"title":"一周总结19.6.17-19.6.21","slug":"week2","date":"2019-06-20T16:00:00.000Z","updated":"2019-10-30T06:19:09.804Z","comments":true,"path":"2019/06/21/week2/","link":"","permalink":"https://sdlang.ml/2019/06/21/week2/","excerpt":"回到$slyz$高中部的第一周，感觉一个星期过得好快啊，还想着趁那些dalao不在偷偷多学点，本来以为会很不愉快，但是也挺快乐的。","text":"回到$slyz$高中部的第一周，感觉一个星期过得好快啊，还想着趁那些dalao不在偷偷多学点，本来以为会很不愉快，但是也挺快乐的。 周一回来把咕了一个月的树剖题给调好了(到底是哪出锅我也记不清了)，就开始学平衡树，先看的二叉搜索树$(BST)$，然后是$Treap$，把板子题打了，之前听说有个叫$Splay$的，就开始学，学着学着就自闭了，本来对平衡树的旋转就理解的有点乱，再一看那个彻底懵逼了，于是弃疗…… 打完平衡树的题(其实都很裸)，就往后学$dp$了，刚开始是区间$dp$，这个还好，以前也写了一些这方面的题，挺好理解。 接下来是树形$dp$，刚开始对这种$dp$方式不太习惯，因为自己没写过递归或者说是记忆化搜索(也不能算是记忆化搜索)，但是本质都是从已知往未知转移，只不过树形$dp$是先到叶子节点(相当于$f[1]$由$f[0]$转移过来)，这样也就能明白了。 然后是数位$dp$，一本通给的那道引例好难(自我感觉)，自己yy了一晚上，后面的题就都是板子了，主要思想就是从最高位到最低位进行记忆化搜索，把各种状态带上，更新就完事了。 到了状压$dp$，这个难度不大，对状态压缩一下，变成一串数(通常是二进制)，这样二维就变一维了，转移方程也一般是用$f[i][j]$表示前$i$个用第$j$种状态的最优解，转移随便转移就好了。 最后是$dp$的两种优化方式，第一个是单调队列优化，为了学单调队列，专门跑去写了滑动窗口，单调队列是个很强大的东西，可以在队尾插入和弹出，队头弹出，队头访问，有些转移方程长成$fi=max(fj-sj)+si$之类的，其中$j$在一个长度固定的区间，那么中间的$max$就可以用一个单调队列来维护，时间复杂度就可以降一个方。 斜率优化也不是很难，是对于那些转移方程长成$fi=max(fj+si+sj+ti\\times tj)$这样的，中间有个$ti\\times tj$，那么我们可以把这个化为一个形如$y=kx+b$的一次函数，其中只含$j$的项为$y$，含$i*j$的项为$kx$，这里面含$i$的为$k$，含$j$的为$x$，其他的就是$y$了，会有很多决策点，它们会长成像凸包一样的东西，当我们将一次函数平移，第一个碰到的点就是最优决策点了，这种题一般会有几种情况：1.$k$是单调的，决策点有顺序，那么就可以用单调队列维护；2.$k$不单调，我们要用队列来维护凸包，每次找最优决策点时二分查找，复杂度就多了个$log$；3.决策点也无顺序，那就要用一些数据结构来维护，比如平衡树。 写完了$dp$，去数论开了个头，把快速幂和质数给写了写，有的以前自己会，但再看之后再写一遍板子真的有不同的理解，数论一直是自己的弱项，希望下周能学完并有所提高。 来句话鼓励自己QAQ 我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://sdlang.ml/categories/随笔/"}],"tags":[{"name":"dp","slug":"dp","permalink":"https://sdlang.ml/tags/dp/"}]},{"title":"洛谷 P2704 [NOI2001]炮兵阵地","slug":"p2704","date":"2019-06-18T16:00:00.000Z","updated":"2019-09-08T12:48:44.994Z","comments":true,"path":"2019/06/19/p2704/","link":"","permalink":"https://sdlang.ml/2019/06/19/p2704/","excerpt":"司令部的将军们打算在NM的网格地图上部署他们的炮兵部队。一个NM的地图由N行M列组成，地图的每一格可能是山地（用“H” 表示），也可能是平原（用“P”表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上能攻击到上下左右两个格 现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。","text":"司令部的将军们打算在NM的网格地图上部署他们的炮兵部队。一个NM的地图由N行M列组成，地图的每一格可能是山地（用“H” 表示），也可能是平原（用“P”表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上能攻击到上下左右两个格 现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。 这道题一看$M$那么小，每个点只有两种状态，那就肯定是状压$dp$了，至于什么是状压$dp$，简单来说就是将连续的一串数据转化成一个数的形式来存，这道题就可以将每一行都转化为一个二进制数，用$1$表示选，用$0$表示不选。但是因为还有平原和山地这样的限制条件，我们就可以将这个条件存下来，用$1$表示平原，即为可以放；用$0$表示山地，即为不可以放。然后我们对每种放的状态预处理出来，写出转移方程就可以$dp$了。（很多状压$dp$题都可以这么做） 刚开始我做的时候是用$f[i][j]$表示第$i$行的排列方式为$j$时，前$i$行的最大炮兵数，写出状态转移方程：$f[i][j]=max(f[i-1][k])+num[j]$，其中$k$为第$i-1$行的合法的一种排列，$num[j]$表示一行中第$j$种排列的炮兵数，然后枚举$i-1$行的状态，即为$k$；$i-2$行的状态。这样做显然是不行的，因为有的不合法的情况用来更新答案了。(也就我这样的zz会想出这么sb的做法） 所以我们考虑加一维，来维护第$i-1$行的状态，那么$f[i][j][k]$表示第$i$行的排列方式为$j$时，且第$i-1$行的排列方式为$k$时，前$i$行的最大炮兵数，方程也很好写:$f[i][j][k]=max(f[i-1][k][h])+num[j]$，其中$h$为第$i-2$行的合法的一种排列，初始化：$f[1][i][0]=num[i]$（$i$的这种排列合法），$dp$时注意下在第$2$行时用$f[i-1][k][0]$比较就行了，然后这道题做完了。 Code1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;iostream&gt;#include &lt;cstdio&gt;using namespace std;int n,m,goal[500],zh[200],f[200][500][500],state[5000],cnt,num[5000],ans;void make()&#123; for (int i=0;i&lt;(1&lt;&lt;m);i++) if (!(i&amp;(i&lt;&lt;1))&amp;&amp;!(i&amp;(i&lt;&lt;2))) //如果这个格子放炮兵，那么四周不能放，四周再往外一格也不能放，所以将i按位与i左移1位和左移两位 &#123; state[++cnt]=i; int x=i; while (x) &#123; num[cnt]+=x%2; //统计这种排列方案的炮兵数 x&gt;&gt;=1; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; char x; zh['P']=1; zh['H']=0; for (int i=1;i&lt;=n;i++) for (int j=1;j&lt;=m;j++) &#123; cin&gt;&gt;x; goal[i]=goal[i]*2+zh[x]; //把题目中的限制表示的二进制转换为十进制 &#125; make(); //预处理出这一行可行的排列 for (int i=1;i&lt;=cnt;i++) if ((state[i]|goal[1])==goal[1]) f[1][i][0]=num[i]; //初始化 for (int i=2;i&lt;=n;i++) for (int j=1;j&lt;=cnt;j++) for (int k=1;k&lt;=cnt;k++) for (int h=1;h&lt;=cnt;h++) &#123; if (state[j]&amp;state[k])continue; if (state[k]&amp;state[h])continue; if (state[h]&amp;state[j])continue; //前三个均为上下不相邻 if ((state[j]|goal[i])!=goal[i])continue; if ((state[k]|goal[i-1])!=goal[i-1])continue; if ((state[h]|goal[i-2])!=goal[i-2])continue; //后三个为符合放置在平地上 if (i==2)f[i][j][k]=max(f[i][j][k],f[i-1][k][0]+num[j]); //第二行时用来更新状态的第一行的f没有上一行，所以特别处理一下 f[i][j][k]=max(f[i][j][k],f[i-1][k][h]+num[j]); &#125; for (int i=1;i&lt;=cnt;i++) for (int j=1;j&lt;=cnt;j++) ans=max(ans,f[n][i][j]); //在最后一行和倒数第二行的所有排列中取个最大值 cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"状压dp","slug":"状压dp","permalink":"https://sdlang.ml/tags/状压dp/"},{"name":"dp","slug":"dp","permalink":"https://sdlang.ml/tags/dp/"}]},{"title":"UVA302 John's trip","slug":"uva302","date":"2019-05-13T16:00:00.000Z","updated":"2019-08-27T08:50:17.774Z","comments":true,"path":"2019/05/14/uva302/","link":"","permalink":"https://sdlang.ml/2019/05/14/uva302/","excerpt":"John有很多朋友住在不同的街，想去拜访每位朋友，同时希望走的路最短。因为道路很窄，John在一条路上不能往回走。 John希望从家出发，拜访完所有的朋友之后回到自己的家，且总路程最短。John意识到如果可以每条路径都走一次，然后返回起点，应该是最短的路径。写一个程序帮助John找到这样的路径。 给出的每条街连接两个路口，最多有1995条街（编号从1到n），44个路口（编号从1到m）。","text":"John有很多朋友住在不同的街，想去拜访每位朋友，同时希望走的路最短。因为道路很窄，John在一条路上不能往回走。 John希望从家出发，拜访完所有的朋友之后回到自己的家，且总路程最短。John意识到如果可以每条路径都走一次，然后返回起点，应该是最短的路径。写一个程序帮助John找到这样的路径。 给出的每条街连接两个路口，最多有1995条街（编号从1到n），44个路口（编号从1到m）。 裸的欧拉回路题，可以不用$dfs$。 我们用两个栈，一个用来模拟，一个用来记答案。因为答案要求保证字典序最小的那一组，所以我们先对与每个点相连的点按从小到大排序，这样先选编号小的点，就可以保证找到的第一组答案就是字典序最小的那一组答案了。 小优化：当我们访问完一条边后，把当前选的这个点连的边删除，这样就可以保证每次访问的边都是未访问过的边了，时间复杂度也由$O(N×M)$降为了$O(N+M)$。 还有最要注意的一点就是每一组解行末无空格。（被卡了好久= =） Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;using namespace std;struct edge&#123; int to,id;&#125;stk[10000];int st,d[50],n,ans[10000],num,top,vis[10000],m; //d存每个点的度,如果有度数是奇数的点，那么肯定无欧拉回路.vector &lt;edge&gt; a[50];int cmp(edge x,edge y)&#123; return x.id&lt;y.id;&#125;void euler(int s) //找欧拉回路&#123; stk[++top].to=s; //模拟栈 vector &lt;edge&gt;::iterator it; while (top&gt;0) &#123; int u=stk[top].to,w=stk[top].id,fl=0; for (it=a[u].begin();it!=a[u].end();it++) &#123; int v=(*it).to,i=(*it).id; if (!vis[i]) //vis代替删边 &#123; fl=1; stk[++top].to=v; stk[top].id=i; vis[i]=1; break; //进入下一层 &#125; &#125; if (!fl) //回溯 &#123; top--; ans[++num]=w; //更新答案栈 &#125; &#125;&#125;void clear()&#123; for (int i=1;i&lt;=n;i++) a[i].clear(),d[i]=0,vis[i]=0; for (int i=1;i&lt;=1995;i++) vis[i]=0; num=0; m=0;&#125;int main()&#123; int x,y,z; cin&gt;&gt;x&gt;&gt;y; while (x||y) &#123; clear(); int fl=0; cin&gt;&gt;z; n=max(x,y); st=min(x,y); m++; a[x].push_back((edge)&#123;y,z&#125;); a[y].push_back((edge)&#123;x,z&#125;); d[x]++; d[y]++; cin&gt;&gt;x&gt;&gt;y; while (x||y) &#123; cin&gt;&gt;z; a[x].push_back((edge)&#123;y,z&#125;); a[y].push_back((edge)&#123;x,z&#125;); n=max(max(x,y),n); d[x]++; d[y]++; m++; cin&gt;&gt;x&gt;&gt;y; &#125; for (int i=1;i&lt;=n;i++) if (d[i]%2!=0) &#123; cout&lt;&lt;\"Round trip does not exist.\"&lt;&lt;endl; fl=1; break; &#125; if (!fl) &#123; for (int i=1;i&lt;=n;i++) sort(a[i].begin(),a[i].end(),cmp);//排序保证解的字典序最小 euler(st); for (int i=num-1;i&gt;=2;i--) cout&lt;&lt;ans[i]&lt;&lt;\" \"; cout&lt;&lt;ans[1]&lt;&lt;endl; &#125; cin&gt;&gt;x&gt;&gt;y; cout&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"欧拉回路","slug":"欧拉回路","permalink":"https://sdlang.ml/tags/欧拉回路/"}]},{"title":"SP41 WORDS1 - Play on Words","slug":"sp41","date":"2019-05-12T16:00:00.000Z","updated":"2019-08-27T03:16:42.618Z","comments":true,"path":"2019/05/13/sp41/","link":"","permalink":"https://sdlang.ml/2019/05/13/sp41/","excerpt":"秘密的门里藏着一些字谜。一些考古学家希望打开这些门，因此他们需要解开这些字谜。由于没有任何其他方式（不要总想着暴力！）可以打开这扇门，这个字谜对我们来说尤其重要。 每一扇门上都有很多磁性的盘子，每一个盘子上面都写着一个单词。这些盘子必须要按照一种特殊的顺序排列，即除了第一个单词以外的每一个单词的首字母必须是前面一个单词的结尾字母。你的任务就是编写一个程序，测试给出的单词能否按照要求的顺序排列并且顺利地打开这扇门。对每一个单词从首字母连一条到尾字母的有向边，然后判断是不是欧拉路径。","text":"秘密的门里藏着一些字谜。一些考古学家希望打开这些门，因此他们需要解开这些字谜。由于没有任何其他方式（不要总想着暴力！）可以打开这扇门，这个字谜对我们来说尤其重要。 每一扇门上都有很多磁性的盘子，每一个盘子上面都写着一个单词。这些盘子必须要按照一种特殊的顺序排列，即除了第一个单词以外的每一个单词的首字母必须是前面一个单词的结尾字母。你的任务就是编写一个程序，测试给出的单词能否按照要求的顺序排列并且顺利地打开这扇门。对每一个单词从首字母连一条到尾字母的有向边，然后判断是不是欧拉路径。 Code``` cpp include include include include include include using namespace std;int t,n,in[50],to[50],cnt,vis[50],f[50];char ch[2000];vector a[50];void clear(){ for (int i=1;i&lt;=26;i++) vis[i]=f[i]=in[i]=to[i]=0,a[i].clear();}int bfs(int st) //bfs判断基图是否连通{ queue q; q.push(st); vector ::iterator it; vis[st]=1; int num=1; while (!q.empty()) { int u=q.front();q.pop(); for (it=a[u].begin();it!=a[u].end();it++) { int v=(*it); if (!vis[v]) q.push(v),vis[v]=1,num++; } } int x=0; for (int i=1;i&lt;=26;i++) if (f[i]) x++; if (num==x) return 1; return 0;}int main(){ cin&gt;&gt;t; while (t—) { clear(); cin&gt;&gt;n; int fl1=0,fl2=0,fl3=0,st=0; for (int i=1;i&lt;=n;i++) { scanf(“%s”,ch+1); int l=strlen(ch+1),u=ch[1]-‘a’+1,v=ch[l]-‘a’+1; a[u].push_back(v); a[v].push_back(u); to[u]++; //出度 in[v]++; //入度 f[u]=1; f[v]=1; st=u; //bfs时随便的一个起点 } for (int i=1;i&lt;=26;i++) if (in[i]==to[i]) fl3++; else if (in[i]==to[i]+1) fl1++; else if (in[i]+1==to[i]) fl2++; if ((fl3==24&amp;&amp;fl1&amp;&amp;fl2||fl3==26)&amp;&amp;bfs(st)) //判断欧拉路径 cout&lt;&lt;”Ordering is possible.”&lt;&lt;endl; else cout&lt;&lt;”The door cannot be opened.”&lt;&lt;endl; } return 0;}~~~","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"欧拉路径","slug":"欧拉路径","permalink":"https://sdlang.ml/tags/欧拉路径/"}]},{"title":"P2169 正则表达式","slug":"p2169","date":"2019-05-11T16:00:00.000Z","updated":"2019-08-27T03:14:12.042Z","comments":true,"path":"2019/05/12/p2169/","link":"","permalink":"https://sdlang.ml/2019/05/12/p2169/","excerpt":"在Internet网络中的每台电脑并不是直接一对一连通的，而是某些电脑之间存在单向的网络连接，也就是说存在A到B的连接不一定存在B到A的连接，并且有些连接传输速度很快，有些则很慢，所以不同连接传输所花的时间是有大有小的。另外，如果存在A到B的连接的同时也存在B到A的连接的话，那么A和B实际上处于同一局域网内，可以通过本地传输，这样花费的传输时间为0。 现在小Z告诉你整个网络的构成情况，他希望知道从他的电脑（编号为1），到小X的电脑（编号为n）所需要的最短传输时间。","text":"在Internet网络中的每台电脑并不是直接一对一连通的，而是某些电脑之间存在单向的网络连接，也就是说存在A到B的连接不一定存在B到A的连接，并且有些连接传输速度很快，有些则很慢，所以不同连接传输所花的时间是有大有小的。另外，如果存在A到B的连接的同时也存在B到A的连接的话，那么A和B实际上处于同一局域网内，可以通过本地传输，这样花费的传输时间为0。 现在小Z告诉你整个网络的构成情况，他希望知道从他的电脑（编号为1），到小X的电脑（编号为n）所需要的最短传输时间。 题意：给你一个带权有向图，如果两个点之间可以互相到达，那么他们之间的边权为$0$，求从起点$1$到$n$的最短路。 缩点+最短路 缩完点把在同一个强连通分量里的点边权设成$0$ Code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;vector&gt;#include &lt;queue&gt;#define N 250000#define INF 99999999using namespace std;struct edge&#123; int to,cost;&#125;;vector &lt;edge&gt; a[N];queue &lt;int&gt; q;int n,m,dfn[N],low[N],co[N],stk[N],top,num,cnt,dis[N],vis[N];void tarjan(int u) //tarjan求强连通分量&#123; low[u]=dfn[u]=++cnt; stk[++top]=u; vector &lt;edge&gt;::iterator it; for (it=a[u].begin();it!=a[u].end();it++) &#123; int v=(*it).to; if (!dfn[v]) &#123; tarjan(v); low[u]=min(low[u],low[v]); &#125; else if (!co[v]) low[u]=min(low[u],dfn[v]); &#125; if (low[u]==dfn[u]) &#123; co[u]=++num; //给强连通分量编号 while (stk[top]!=u) co[stk[top]]=num,top--; top--; &#125;&#125;void spfa() //单源最短路&#123; for (int i=1;i&lt;=n;i++) dis[i]=INF; dis[1]=0; q.push(1); vis[1]=1; vector &lt;edge&gt;::iterator it; while (!q.empty()) &#123; int u=q.front();q.pop(); vis[u]=0; for (it=a[u].begin();it!=a[u].end();it++) &#123; int v=(*it).to,w=(*it).cost; if (co[u]==co[v])w=0; if (dis[v]&gt;dis[u]+w) &#123; dis[v]=dis[u]+w; if (!vis[v]) q.push(v),vis[v]=1; &#125; &#125; &#125;&#125;int main()&#123; scanf(\"%d%d\",&amp;n,&amp;m); int x,y,z; for (int i=1;i&lt;=m;i++) &#123; scanf(\"%d%d%d\",&amp;x,&amp;y,&amp;z); a[x].push_back((edge)&#123;y,z&#125;); &#125; for (int i=1;i&lt;=n;i++) if (!dfn[i]) tarjan(i); spfa(); printf(\"%d\",dis[n]); return 0;&#125; 偷懒写的$spfa$和$vector$QAQ","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"最短路","slug":"最短路","permalink":"https://sdlang.ml/tags/最短路/"},{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"缩点","slug":"缩点","permalink":"https://sdlang.ml/tags/缩点/"}]},{"title":"Trie与可持久化Trie","slug":"Trie","date":"2019-04-27T16:00:00.000Z","updated":"2019-08-27T08:52:40.608Z","comments":true,"path":"2019/04/28/Trie/","link":"","permalink":"https://sdlang.ml/2019/04/28/Trie/","excerpt":"经过两天的奋斗，我终于点满了Trie树的技能树","text":"经过两天的奋斗，我终于点满了Trie树的技能树 Trie树（字典树）顾名思义，对于一个字符串，将其各个字符建成树，其中包含一定的父子关系（第$i$个字符是第$i+1$个字符的父亲），像这样，当对若干个字符串进行建树操作时，两两字符串的公共部分就会沿着树走下来，在不同处分叉，这个显然是很好理解的。 我们看着个图，原先的Trie树已经有了$ABC$,$AC$,$BC$这三个串（根节点为空）。当要插入$CD$这个串时，由于原来的树没有以$C$为字节点的子树，那么就只能将这个串插到根节点下面；而插入$ACBD$这个串时，由于原树已经有了一条$AC$的路径，那么我们只需要把$BD$接到$C$后面即可。 这个操作看起来简单，其实用代码实现起来也是很简单的。123456789101112int insert(char *ch) //trie[u][x]表示u节点的x字符指针指向的节点&#123; int u=0,l=strlen(ch+1);//u为初始指针指向根节点 for (int i=1;i&lt;=l;++i) &#123; int x=ch[i]-'A'; //每次取出字符串中的第i位 if (!trie[u][x])trie[u][x]=++tot; //如果Trie中没有x这个节点，那就插进去 u=trie[u][x]; //往下走 &#125; p[u]=1; //给结尾打标记 return 0;&#125; 那么查询操作也是同理，从选取字符串的每一位，从树根往下遍历就可以了。1234567891011int query(char *ch)&#123; int u(0),l=strlen(ch+1);//u位初始指针指向根节点 for (int i=1;i&lt;=l;++i) &#123; int x=ch[i]-'A'; //取出 if (!trie[u][x])return 0; //指针指向空，表示匹配不成功，直接退出 u=trie[u][x]; //往下走 &#125; return p[u]; //返回结尾标记值 &#125; 时间复杂度：单次$O(l)$。空间复杂度：$O(\\sum_{i=1}^{N}l[i]*B)$($B$为字符集大小) 习题 Phone List 给出$N$个字符串，看是否有一个串$A$为串$B$的前缀。 因为我们在Trie树插入操作中已经对每一串字符串都打上了标记，所以满足答案的关系只有两种，一种是插入的串是之前的串的前缀，那么只要看在插入过程中是不是没有新增节点，另一种是插入的串包括之前的串，也就是之前的串是插入的串的前缀，这个只要看看有没有走到打了标记的点就好了。 完整代码 把清空写炸了害我交了好几次 L语言 给出$N$个单词，和$M$个句子，问每个句子中包含这些单词的最长前缀是多少。 考虑对着$M$个单词建一个Trie树，$f[i]$表示前$i$个字符是否可行，便可以每次访问$j+1,l$，在访问过程中访问到标记，就可以直接更新$f[i]$，复杂度$O(NM)$. 完整代码 不在$query$函数中更新$f[i]$复杂度是$O(N^2M)$，会TLE！ 秘密消息Secret Message 给出$N$个01串，和$M$个01串，问这$M$个串的每一个串中满足和这$N$个串其中的一个串有着相同的前缀（前者是后者的前缀或后者是前者的前缀）。 再用一个数组$q[u]$来记录经过$u$节点有多少个01串，用$p[u]$来记录以$u$节点结尾的01串有多少个，我们先每次往后访问，用$p[u]$来更新$ans$,答案显而易见也只有两种可能，一种是走到一个指向空的节点，这时候只要返回$ans$就好了，另一种是这个串包含了路径上的所有串，这时要返回$ans+q[u]-p[u]$（因为有重复计算，这个自己模拟下感性理解就好了）。 完整代码 没啥好说的emmmm 01TrieTrie树就只能对着字符串一顿胡乱操作？答案肯定不是。有一类题，让你求出一些数中$A\\oplus B$的最大值。我们很容易想到用枚举暴力去求，但是复杂度$O(N^2)$着实让人受不了，于是就可以用01Trie进行求解。 就拿刚才的题目——最大异或数对来说，考虑把所有的数转成二进制插入Trie树中，那么接下来有一种贪心的策略：因为对于两个二进制数，只有这一位上不同，也就是一个是$0$一个一个是$1$才会取$1$，否则取$0$，那么在找数的过程中贪心的走和当前位相反的那一位，如果相反那一位指向空，就只能走下面这一位，这样子就找到了序列中和这一个数最大的异或值，只需要从$[1,N]$的各个数找一个最大的答案即可。 这样说太抽象，我们看下面这张图： 我们把$9(1001)$，$7(0111)$，$5(0101)$，$2(0010)$依次插入树中（最高位补足0），当我们要找和$9$异或的最大值，只需要贪心的走反路就可以啦，没有反路那就只能往下走了。感性理解感性理解 而由于题目的数据一般会比较大，我们需要建一个$30$位的01Trie。 代码实现起来也很简单 123456789101112int query(int x)&#123; int u(0),an(0); //an记录当前数x与序列中的数的异或最大值 for (int i=30;i&gt;=0;i--) //从高到低位走 &#123; int ch=(x&gt;&gt;i)&amp;1; //取出 if (trie[u][!ch])u=trie[u][!ch],an+=1&lt;&lt;i; //如果可以走反路，就走反路，更新an else u=trie[u][ch]; //走不了就只能往下走了 &#125; return an; &#125; 时空复杂度：单次$O(log\\text{值域})$，总共$O(Nlog\\text{值域})$，已经可以满足很多题的需要了。 完整代码 一定要按题目数据来开树的长度！ 习题 Nikitosh 和异或 在一个有$N$个元素的序列$A$中，找出$(A[l1]\\oplus A[l1+1]\\oplus …\\oplus A[r1])+(A[l2]\\oplus A[l2+1]\\oplus…\\oplus A[r2])$的最大值，其中，$1\\le l1\\le r1&lt;l2\\le r2\\le N$。 设$l[i]$表示$1\\le l\\le r\\le i$，最大的$A[l]\\oplus A[l+1]\\oplus…\\oplus A[r]$，$r[i]$表示$i\\le l\\le r\\le N$最大的$A[l]\\oplus A[l+1]\\oplus…\\oplus A[r]$，那么答案为最大的$l[i]+r[i+1]$。 我们首先要知道一个异或的性质：对于一个序列$A$的区间$[l,r]$,都有$A[l]\\oplus A[l+1]\\oplus…\\oplus A[r]=(A[1]\\oplus A[2]\\oplus…\\oplus A[l-1])\\oplus(A[1]\\oplus A[2]\\oplus…\\oplus A[r])$ 于是设$x[i]$表示$A[0]\\oplus A[1]\\oplus…\\oplus Ai$，所以$l[i]=max(x[i]\\oplus x[j])(0\\le j&lt;i)$，$r[i]=max(x[i]\\oplus x[j])(i&lt;j\\le N)$ 然后这个题就很好做啦。 完整代码 数组开大千万别RE 最长异或路径 给定一棵$N$个点的带权树，结点下标从$1$开始到$N$。寻找树中找两个结点，求最长的异或路径。（异或路径指的是指两个结点之间唯一路径上的所有边权的异或） 题意感性理解好了 先$dfs$跑出所有节点到根节点的异或路径丢进$xorr$数组中，问题便转化成了求最大的$xorr[i]\\oplus xorrj$，是不是似曾相识呢，没错，这道题就变成了最大异或数对啦！ 完整代码 我竟然写炸了快读？？？ 可持久化数据结构——主席树主席树？？？？？这个Trie有什么关系吗？别着急，当然是有关系啦。没关系我也不会去学啊（大雾 主席树，全名可持久化线段树，是一种支持对历史版本修改和访问的数据结构，主要思想就是对其每个版本都建一棵线段树。 然而这样子空间和时间都受不了，而我们想每次建新的线段树过程中，并不是所有元素都不一样，许多元素都是上个版本继承过来的，于是只要把这些碎片拼在一起，就是主席树了。 我们看这个图片，假设黑色的是第一个版本，红色的是第二个版本，也就是新的版本，当新建红色这个树时，只需要继承上个版本的一些元素，再修改并重新拼接元素就可以了，这样时空复杂度都是很优秀的。 板子题——可持久化数组 基本操作就拿这个题来说吧。 存储变量12345struct ff&#123; int lc,rc,val; //存放左子树，右子树，权值&#125;s[40000500];int n,m,a[40000500],rt[40000500],node_cnt; //a表示序列，rt是根，node_cnt是节点数 建树123456789101112void build(int &amp;k,int l,int r)&#123; k=++node_cnt; //新的一个节点 if (l==r) &#123; s[k].val=a[l]; return; &#125; int mid=l+r&gt;&gt;1; build(s[k].lc,l,mid); //更新左子树 build(s[k].rc,mid+1,r); //更新右子树 &#125; 和线段树的建树方式差不了多少，就不详细说了。 修改1234567891011121314int change(int k,int l,int r,int x,int cnt)&#123; int root=++node_cnt; //更新也要新建节点 s[root]=s[k]; //继承 if (l==r) &#123; s[root].val=cnt; //点修改 return root; &#125; int mid=l+r&gt;&gt;1; if (x&lt;=mid)s[root].lc=change(s[root].lc,l,mid,x,cnt); //更新左子树 else s[root].rc=change(s[root].rc,mid+1,r,x,cnt); //更新右子树 return root;&#125; 也和线段树是差不多的。 访问1234567int query(int k,int l,int r,int x)&#123; if (l==r)return s[k].val; //点访问 int mid=l+r&gt;&gt;1; if (x&lt;=mid)return query(s[k].lc,l,mid,x);//如果在左边，就找左子树 else return query(s[k].rc,mid+1,r,x); //如果在右边，就找右子树 &#125; 这就是主席树啦！是不是很简单。 完整代码 我再也不乱用没返回值的函数了，然后再次感谢评论区的大佬：qwaszx（dsq）,Mital。 另一道板子题——可持久化线段树1 先对序列排序+离散化，然后在离散化的数组的基础下建一颗空的主席树，对于每一个区间$[1,i]$插入到主席树，访问的时候只要将主席树$[1,r]-[1,l-1]$就是区间$[l,r]$了，推荐去看这篇博客，因为我不太会讲。还不是没理解 完整代码 数组一定不要开小了！ 可持久化Trie学完主席树，就可以学可持久化Trie啦，我们先看这道题——最大异或和 有一个序列$A$，每次可以进行两种操作，一是在序列尾插入一个数，序列长度$N$变为$N+1$，二是在区间$[l,r]$中找到一个$p$,满足$l\\le p\\le r$,并使得$A[p]\\oplus A[p+1]\\oplus…\\oplus A[N]\\oplus x$最大，输出这个最大值。 首先，我们把这个式子拆开，也就变成了$(A[1]\\oplus A[2]\\oplus…\\oplus A[N])\\oplus(A[1]\\oplus A[2]\\oplus…\\oplus A[p-1])\\oplus x$，似乎很简单，但是这道题还有一个在末尾插入的操作，就需要我们用到可持久化Trie了。 其实可持久化Trie和主席树的思想是类似的，实现方式也有相同之处，就是对每一个前缀异或建一个01Trie，该继承的继承，该修改的修改，这样就完成了。 插入123456789101112131415void insert(int x)&#123; int rt=root[node_cnt]; //取出上一个根节点的信息 root[++node_cnt]=++node; //新建节点 for (register int i=24;i&gt;=0;i--) &#123; int ch=(x&gt;&gt;i)&amp;1; //取出 size[node]=size[rt]+1; //长度增加 trie[node][ch]=node+1; //给节点编号 trie[node][!ch]=trie[rt][!ch]; //继承上一个根节点的部分子树信息 rt=trie[rt][ch]; //往下走 node++; &#125; size[node]=size[rt]+1;&#125; 访问1234567891011121314151617void query(int l,int r,int x)&#123; int lc=root[l],rc=root[r],ans=0; //取出左右子树 for (register int i=24;i&gt;=0;i--) &#123; int ch=(x&gt;&gt;i)&amp;1; //取出 if (size[trie[rc][!ch]]-size[trie[lc][!ch]]&gt;0) //如果反路有路可走 lc=trie[lc][!ch],rc=trie[rc][!ch],ans|=1&lt;&lt;i; //走反路并更新答案 else lc=trie[lc][ch],rc=trie[rc][ch]; //否则只能往下走 &#125; write(ans); putchar(10);&#125; 时空复杂度：总共：$O(31(N+M))$ 代码应该是比较好理解的 对于这个题，每次插入一次前缀异或，共$N+$访问中位添加操作的次数，访问时只要访问区间$[l-1,r]$的答案就好了。 完整代码 不会卡常的我写了点奇怪的卡常+$O2$竟然跑到了最优解$Rank57$？？？ 今年省选还考了一道Trie树的题——异或粽子，相信参加省选的dalao看到这么简单的题都切掉了，我这个初四蒟蒻反正看到题是不会做。 这道题其实是让你求在长度为$N$的序列$A$中，前$K$大的$A[l]\\oplus A[l+1]\\oplus…\\oplus Ar$，的和。 反正我刚开始是不会做，在dsq神仙的帮助和指点下，彻底的大彻大悟。 其实就是先对序列$A$进行一个前缀异或得到序列$sum$，然后只要求$K$对最大的$sum[i]\\oplus sumj$，就好了。 那么我们该怎么求呢，在我迷茫无助之时，dsq给我指点了道题序列合并。 拿这道题来说，我们要对序列$A$，$B$升序排序，然后将$A[i]+B[1]$丢进小根堆中，每次取出堆顶，然后把$A[i]+B[2]$丢进去，如果丢过了，那就丢$A[i]+B[3]$，同理往下，就做完啦。 回到这道题，仔细一样是不是和那道题的思想一样呢？我们用堆存值，编号（也就是$i$）和第几大就好了。 可是怎么求第$k$大的值呢？我们依旧建一个01Trie，访问便用到了平衡树（然而我并不会平衡树）的思想，在建树的时候多存一个$size[u]$记录$u$的子树大小，在访问时看能不能走反路，如果可以走，那就要看看$k$和$size[trie[u][!ch]]$大小，如果$k\\le size[trie[u][!ch]]$,那么答案在反着的那条路径，我们就走，并更新$ans$值，否则答案就在不走反的那条路径，走，并且$k$要减去$size[trie[u][!ch]]$，这个就很显然了。 也可以选择去看dsq的题解。 完整代码 一定要开longlong","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://sdlang.ml/categories/学习笔记/"}],"tags":[{"name":"Trie","slug":"Trie","permalink":"https://sdlang.ml/tags/Trie/"},{"name":"可持久化Trie","slug":"可持久化Trie","permalink":"https://sdlang.ml/tags/可持久化Trie/"},{"name":"主席树","slug":"主席树","permalink":"https://sdlang.ml/tags/主席树/"}]},{"title":"洛谷 P1168 中位数","slug":"p1168","date":"2019-03-26T16:00:00.000Z","updated":"2019-08-27T03:13:48.122Z","comments":true,"path":"2019/03/27/p1168/","link":"","permalink":"https://sdlang.ml/2019/03/27/p1168/","excerpt":"给一个序列a，求前1,3,5……数的中位数","text":"给一个序列a，求前1,3,5……数的中位数 用$S[]$来存$Ai$这个数出现了几次，但是$Ai&lt;=10^9$,如果直接建好树，那就直接爆掉了。所以我们动态开点，就要每次插入一个路径，如果路径上的数没出现过，那么就要插入这个点。当读进去一个数$X$，看有没有到叶子节点，如果到了，那么$S[k]++$，再更新节点，如果没到，那么就开一个新的点来存$X$出现的次数，所以我们需要两个数组$lc[]$和$rc[]$来存左右儿子。访问时也很简单，只要进行递归就行了，不过要注意，如果左儿子个数比要访问的$X$数小，也就是当$X&gt;S[lc[k]]$时，我们要访问右儿子，这时候是一个新的区间，所以$X$要变成$X-S[lc[k]]$。 完整代码12345678910111213141516171819202122232425262728293031323334353637#include &lt;iostream&gt;using namespace std;const int N=1e9;int n,s[5000000],lc[5000000],rc[5000000],nc;int insert(int &amp;k,int l,int r,int v)&#123; if (!k)nc++,k=nc; if (l==r) &#123; s[k]++; return 0; &#125; int mid=l+r&gt;&gt;1; if (v&lt;=mid)insert(lc[k],l,mid,v); else insert(rc[k],mid+1,r,v); s[k]=s[lc[k]]+s[rc[k]];&#125;int query(int k,int l,int r,int x)&#123; if (l==r)return l; int mid=l+r&gt;&gt;1; if (x&lt;=s[lc[k]])return query(lc[k],l,mid,x); else return query(rc[k],mid+1,r,x-s[lc[k]]);&#125;int main()&#123; int x,rt=0; cin&gt;&gt;n; for (int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;x; insert(rt,1,N,x); if (i%2==1) cout&lt;&lt;query(1,1,N,(i+1)/2)&lt;&lt;endl; &#125; return 0;&#125; 代码丑见谅qwq","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"},{"name":"动态开点","slug":"动态开点","permalink":"https://sdlang.ml/tags/动态开点/"}]},{"title":"洛谷 P1198 [JSOI2008]最大数","slug":"p1198","date":"2019-03-20T16:00:00.000Z","updated":"2019-08-27T03:13:53.058Z","comments":true,"path":"2019/03/21/p1198/","link":"","permalink":"https://sdlang.ml/2019/03/21/p1198/","excerpt":"现在请求你维护一个数列(初始数列为空)，要求提供以下两种操作： 1、 查询操作。 功能：查询当前数列中末尾L个数中的最大的数，并输出这个数的值。 2、 插入操作。 功能：将n加上t，其中t是最近一次查询操作的答案（如果还未执行过查询操作，则t=0)，并将所得结果对一个固定的常数D取模，将所得答案插入到数列的末尾。","text":"现在请求你维护一个数列(初始数列为空)，要求提供以下两种操作： 1、 查询操作。 功能：查询当前数列中末尾L个数中的最大的数，并输出这个数的值。 2、 插入操作。 功能：将n加上t，其中t是最近一次查询操作的答案（如果还未执行过查询操作，则t=0)，并将所得结果对一个固定的常数D取模，将所得答案插入到数列的末尾。 如何每一次在末尾插入一个数并维护最大值因为一共有$M$次操作，所以最多也只有可能$M$个数，那么当插入第$Q$个数时我们就把它放在第$Q$个位置，这样子就解决了插入操作。 查询也是很简单的，之前我们把每个数放在了末尾，现在放在了前面，所以每次只要查询从最后一个有数的位置往前$L$个位置，也就是$[Q-L+1,Q]$。 这样这道题就变成了一道单点修改区间和的板子题辣~! 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;iostream&gt;using namespace std;char ch;int ma[8000001],ad[8000001],m,d,t,q,n;int build(int k,int l,int r)&#123; if (l==r) &#123; ma[k]=0; return 0; &#125; int mid=l+r&gt;&gt;1; build(k&lt;&lt;1,l,mid); build(k&lt;&lt;1|1,mid+1,r);&#125;int insert(int k,int l,int r,int x,int v)&#123; if (l==r)return ma[k]=v; int mid=l+r&gt;&gt;1; if (x&lt;=mid)insert(k&lt;&lt;1,l,mid,x,v); else insert(k&lt;&lt;1|1,mid+1,r,x,v); ma[k]=max(ma[k&lt;&lt;1],ma[k&lt;&lt;1|1]);&#125;int que(int k,int l,int r,int x,int y)&#123; if (l&gt;=x&amp;&amp;r&lt;=y)return ma[k]; int mid=l+r&gt;&gt;1,ans=0; if (x&lt;=mid)ans=max(ans,que(k&lt;&lt;1,l,mid,x,y)); if (y&gt;mid)ans=max(ans,que(k&lt;&lt;1|1,mid+1,r,x,y)); ma[k]=max(ma[k&lt;&lt;1],ma[k&lt;&lt;1|1]); return ans;&#125;int main()&#123; cin&gt;&gt;m&gt;&gt;d; int a1; n=m; //build(1,1,n); for (int i=1;i&lt;=m;i++) &#123; cin&gt;&gt;ch&gt;&gt;a1; if (ch=='A') &#123; q++; insert(1,1,n,q,(a1+t)%d); &#125; else &#123; t=que(1,1,n,q-a1+1,q); cout&lt;&lt;t&lt;&lt;endl; &#125; &#125; return 0;&#125; 代码丑见谅qwq","categories":[{"name":"题解","slug":"题解","permalink":"https://sdlang.ml/categories/题解/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"}]},{"title":"线段树学习笔记","slug":"seg","date":"2019-03-17T16:00:00.000Z","updated":"2019-09-08T11:20:42.282Z","comments":true,"path":"2019/03/18/seg/","link":"","permalink":"https://sdlang.ml/2019/03/18/seg/","excerpt":"很久之前写的学习笔记，就搬过来了","text":"很久之前写的学习笔记，就搬过来了 Q:线段树是什么?A:一种数据结构，支持$O(log(N))$修改和查询区间，所以在$N$的序列$M$次查询下，复杂度只有$O(Mlog(N))$，相比起朴素算法的$O(N)$查询和修改，优秀的很多。 那么怎么实现呢？我们不妨考虑一种下面这样的结构 怎么样，是不是很像一棵完全二叉树，这样子不难看出复杂度是$O(log(N))$级别的，但是要注意的一点是，线段树的数组一定要开到$4N$！ 建树对于这个题而言，我们用$su[4N]$数组来维护区间的和，那么此线段树可以通过递归的到，即$build(k2,l,mid)$取得左儿子，$build(k2+1,mid+1,r)$取得右儿子，当$l=r$时$su$便等于当前值$a[l]$。代码如下123456789101112ll build(ll k,ll l,ll r)&#123; if (l==r) &#123; su[k]=a[l]; return 0; &#125; ll mid=(l+r)&gt;&gt;1; build(k*2,l,mid); build(k*2+1,mid+1,r); su[k]=su[k*2]+su[k*2+1];&#125; 区间加如果说直接将v加到su里，那么肯定会tle,所以我们考虑用一个标记，即Lazy Tag,当要对区间$[x,y]$进行加法，那么我们给这段区间打上标记，$add[k]=v$，在之后的询问和修改中再把标记进行下放，这样子的复杂的仍然是$O(log(N))$。代码如下123456789101112131415161718192021ll add(ll k,ll l,ll r,ll v) //打标记&#123; ad[k]+=v; su[k]+=(r-l+1)*v;&#125;ll pd(ll k,ll l,ll r,ll mid) //下放标记&#123; if (!ad[k])return 0; add(k*2,l,mid,ad[k]); add(k*2+1,mid+1,r,ad[k]); ad[k]=0;&#125;ll change(ll k,ll l,ll r,ll x,ll y,ll v) //区间加&#123; if (l&gt;=x&amp;&amp;r&lt;=y)return add(k,l,r,v); ll mid=(l+r)&gt;&gt;1; pd(k,l,r,mid); if (x&lt;=mid)change(k*2,l,mid,x,y,v); if (mid&lt;y)change(k*2+1,mid+1,r,x,y,v); su[k]=su[k*2]+su[k*2+1];&#125; 区间询问和这个就变得非常简单了，只要分别递归有关x和y的区间，加起来即可。注意在询问时也要下放标记。 代码如下123456789ll que(ll k,ll l,ll r,ll x,ll y)&#123; if (l&gt;=x&amp;&amp;r&lt;=y)return su[k]; ll mid=(l+r)&gt;&gt;1,res=0; pd(k,l,r,mid); if (x&lt;=mid)res+=que(k*2,l,mid,x,y); if (mid&lt;y)res+=que(k*2+1,mid+1,r,x,y); return res;&#125; 区间乘既然多了乘法，我们肯定就要再开一个$LazyTag:mu[4N]$，*开始时一定要初始化为1！，而和加法的$LazyTag$不同的是在改变乘法$LazyTag$时，也要改变加法的$LazyTag$,即123456ll mul(ll k,ll l,ll r,ll v)&#123; mu[k]=(mu[k]*v)%p; ad[k]=(ad[k]*v)%p; su[k]=(su[k]*v)%p;&#125; 然后我们再考虑$pushdown$操作，假如一个序列$[1,3,5,9,12]$,先在$[2,4]$区间加上一个数$k$,序列变为$[1,3+k,5+k,9+k,12]$,然后在$[3,5]$区间乘上一个数$r$,序列变为$[1,3+k,(5+k)r,(9+k)r,12r]$,由此看出，我们如果先$pushdown$加法，再$pushdown$乘法，会导致之前的加法也被乘一次，也就是$(a+b)c$但$b$并不需要$c$,也就是我们想要$ac+b$,所以就要先$pushdown$乘法，再$pushdown$加法,即12pudn(k,l,r,mid);//乘法pd(k,l,r,mid);//加法","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://sdlang.ml/categories/学习笔记/"}],"tags":[{"name":"线段树","slug":"线段树","permalink":"https://sdlang.ml/tags/线段树/"}]},{"title":"洛谷 P4779 【模板】单源最短路径（标准版）","slug":"p4779","date":"2019-02-22T16:00:00.000Z","updated":"2019-08-27T08:53:04.230Z","comments":true,"path":"2019/02/23/p4779/","link":"","permalink":"https://sdlang.ml/2019/02/23/p4779/","excerpt":"给你一个有向图，求出从这个点到其他所有点的最短路径（边权不为负）","text":"给你一个有向图，求出从这个点到其他所有点的最短路径（边权不为负） 思路一看到最短路，就想到了spfa和dijkstra算法，于是随随便便就写了出来。 dijkstra怎么写？在一个有向图中，我们从起点出发，找出和它的距离最小（也就是dis）的点，再取出所有与这个点相连的边，做一遍松弛。 什么是松弛？如果从点u到点v的路径中，有一个中转点k使得k.cost+dis[v}&lt;dis[v]，那么就刷新dis[v]，即dis[v]=k.cost+dis[v]。 这样子dijkstra的时间复杂度为O(n^2)。 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;struct edge&#123; int to,cost;&#125;;int n,m,st,dis[100001],vis[100001];vector &lt;edge&gt; s[100001];vector &lt;edge&gt;::iterator it; int main()&#123; cin&gt;&gt;n&gt;&gt;m&gt;&gt;st; for (int i=1;i&lt;=n;i++) dis[i]=2147483647; edge a; int b; for (int i=1;i&lt;=m;i++) &#123; cin&gt;&gt;b&gt;&gt;a.to&gt;&gt;a.cost; s[b].push_back(a); &#125; dis[st]=0; for (int i=1;i&lt;=n;i++) &#123; int zd=2147483647,k=0; for (int j=1;j&lt;=n;j++) if (!vis[j]&amp;&amp;dis[j]&lt;zd) &#123; zd=dis[j]; k=j; &#125; if (k==0) break; vis[k]=1; for (it=s[k].begin();it!=s[k].end();it++) if (dis[k]+(*it).cost&lt;dis[(*it).to]) dis[(*it).to]=dis[k]+(*it).cost; &#125; for (int i=1;i&lt;=n;i++) cout&lt;&lt;dis[i]&lt;&lt;\" \"; return 0;&#125; 可是 关于spfa，它死了在一些数据中很容易被卡掉，所以就不具体介绍了，如果想写spfa可以去P3371。 TLE！这是为什么呢，我们看下数据，n&lt;=1e5,如果单纯的跑dijkstra，而时间复杂度是O（n^2），所以肯定会T。 我们考虑下对于每次找出与起点相连的dis最小的点，时间复杂度为O(n),能不能优化呢？当然是可以。 堆这就要用到了我们万能的堆，用堆访问最小的dis时间复杂度为O（log（n）），所以堆优化dijkstra的时间复杂的为O（(m+n)log（n）），这个题就够用了。而这并不能掩盖我不会写别种的优化的事实。 代码如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;utility&gt;using namespace std;struct edge&#123; int to,cost;&#125;;struct cmp&#123; int u,d; bool operator&lt;(const cmp &amp;a) const &#123; return d&gt;a.d; &#125;&#125;;int n,m,st,vis[100001];vector &lt;edge&gt; s[100001];vector &lt;edge&gt;::iterator it;priority_queue &lt;cmp&gt; dis;int main()&#123; cin&gt;&gt;n&gt;&gt;m&gt;&gt;st; dis.push((cmp)&#123;st,0&#125;); for (int i=1;i&lt;=n;i++) vis[i]=2147483647; edge a; int b; for (int i=1;i&lt;=m;i++) &#123; cin&gt;&gt;b&gt;&gt;a.to&gt;&gt;a.cost; s[b].push_back(a); &#125; vis[st]=0; dis.push((cmp)&#123;st,vis[st]&#125;); while (!dis.empty()) &#123; cmp k=dis.top(); dis.pop(); if (vis[k.u]!=k.d) continue; for (it=s[k.u].begin();it!=s[k.u].end();it++) if (vis[k.u]+(*it).cost&lt;vis[(*it).to]) &#123; vis[(*it).to]=vis[k.u]+(*it).cost; dis.push((cmp)&#123;(*it).to,vis[(*it).to]&#125;); &#125; &#125; for (int i=1;i&lt;=n;i++) cout&lt;&lt;vis[i]&lt;&lt;\" \"; return 0;&#125; 蒟蒻的第一篇题解，码风不好，讲的也不清楚，希望大家多多包涵。","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://sdlang.ml/categories/学习笔记/"}],"tags":[{"name":"最短路","slug":"最短路","permalink":"https://sdlang.ml/tags/最短路/"},{"name":"图论","slug":"图论","permalink":"https://sdlang.ml/tags/图论/"},{"name":"dijkstra","slug":"dijkstra","permalink":"https://sdlang.ml/tags/dijkstra/"}]}]}