<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[洛谷 P3554 [POI2013]LUK-Triumphal arch]]></title>
      <url>/2019/10/30/p3554/</url>
      <content type="html"><![CDATA[<p>给一颗树，1号节点已经被染黑，其余是白的，两个人轮流操作，一开始B在1号节点，A选择k个点染黑，然后B走一步，如果B能走到A没染的节点则B胜，否则当A染完全部的点时，A胜。求能让A获胜的最小的k</p>
<a id="more"></a>
<p>首先我们直接二分</p>
<p>然后考虑怎么验证答案</p>
<p>对于B而言，一定是只能从根往叶子节点走的，因为如果回到父亲就相当于白走了一次，从而多让A染了色</p>
<p>而对于A来说，首先要染的一定是B当前所在的点的所有儿子节点</p>
<p>于是我们可以设$f_u$表示以u为根的子树中，u点不染色会多出来几个点没被染色</p>
<p>这个没被染色的意思是在B在u点时，B胜后u这棵树有多少个点没被染色，或者B是输的</p>
<p>理解了状态就能写出转移方程了</p>
<script type="math/tex; mode=display">f_u=max(0,\sum_{v\in son(u)}f_v\ +\ to_u-x)</script><p>其中x是二分的答案，$to_u$是u的儿子数</p>
<p>简单来说就是这棵子树中如果有没染的节点也就是$f_v$，那么这次就要染上。0表示B是输的。这样就比较好理解了QAQ</p>
<p>当然，在二分的时候，我们还可以确定出一个下界也就是$to_1$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans,f[N + <span class="number">5</span>],to[N + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u,x);</span><br><span class="line">        sum += f[v];</span><br><span class="line">    &#125;</span><br><span class="line">    f[u] = max(<span class="number">0</span>,to[u] + sum - x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,x);</span><br><span class="line">    <span class="keyword">return</span> f[<span class="number">1</span>] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">        to[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        d[u].push_back(v);</span><br><span class="line">        d[v].push_back(u);</span><br><span class="line">        to[u]++;</span><br><span class="line">        to[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">int</span> l = to[<span class="number">1</span>],r = n,mid;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid))</span><br><span class="line">            r = mid - <span class="number">1</span>,ans = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二分答案 </tag>
            
            <tag> 树上dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACO17DEC Barn Painting]]></title>
      <url>/2019/10/28/p3047/</url>
      <content type="html"><![CDATA[<p>给你一颗大小为n&lt;=1e5的树，三种颜色，每个点涂一种颜色，相邻点不能同色。下面告诉你一些点已经被涂色，并<br>且告诉你是哪一种颜色，问你涂完整棵树有多少种方法?mod 1e9+7。</p>
<a id="more"></a>
<p>考虑树上dp，设$f_{u,i}$表示以u为根的子树中，u被染成i这个颜色的方案数，于是考虑状态转移方程</p>
<p>如果这个点被指定染色了，那么有</p>
<script type="math/tex; mode=display">f_{u,c_u}=\prod_{v\in son(u)}\sum_{i=1}^3 f_{v,i}\ (i\ne c_u)</script><p>因为假如u选了一个颜色，那么它的每个儿子都只能有两种颜色可选，先用加法原理统计儿子可选的颜色，然后再用乘法原理统计这棵子树的答案</p>
<p>然后可以得出未被指定颜色点的方程</p>
<script type="math/tex; mode=display">\begin{cases}f_{u,1}=\prod_{v\in son(u)}\ (f_{v,2}+f_{v,3})\\f_{u,2}=\prod_{v\in son(u)}\ (f_{v,1}+f_{v,3})\\f_{u,3}=\prod_{v\in son(u)}\ (f_{v,1}+f_{v,2})
\end{cases}</script><p>这样就做完了QAQ</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,c[N + <span class="number">5</span>],f[N + <span class="number">5</span>][<span class="number">4</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">int</span> sum[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        <span class="keyword">if</span> (c[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span>;i++)</span><br><span class="line">                <span class="keyword">if</span> (i != c[u])  </span><br><span class="line">                    s = (s + f[v][i]) % p;</span><br><span class="line">            sum[c[u]] = <span class="number">1l</span>l * sum[c[u]] * s % p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">3</span>;j++)</span><br><span class="line">                    <span class="keyword">if</span> (i != j)</span><br><span class="line">                        s = (s + f[v][j]) % p;</span><br><span class="line">                sum[i] = <span class="number">1l</span>l * sum[i] * s % p;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c[u])</span><br><span class="line">        f[u][c[u]] = sum[c[u]];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span>;i++)</span><br><span class="line">            f[u][i] = sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        d[u].push_back(v);</span><br><span class="line">        d[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        c[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;((f[<span class="number">1</span>][<span class="number">1</span>] + f[<span class="number">1</span>][<span class="number">2</span>]) % p + f[<span class="number">1</span>][<span class="number">3</span>]) % p&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树上dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Comet OJ - Contest 13「龙颈之玉 -五色的弹丸-」]]></title>
      <url>/2019/10/26/c13t3/</url>
      <content type="html"><![CDATA[<p>Gromah 最近沉迷于一款叫做 “贪吃蛇大作战” 的游戏。</p>
<p>给定一个 $n\times m$ 的地图，其中有些格子是空的，有些格子上有食物。初始时贪吃蛇的头在地图中的某个格子上，且贪吃蛇初始只有一个头，每次 Gromah 会控制贪吃蛇的头朝着上下左右四个方向中的一个方向移动一个单位，如果贪吃蛇的头撞到了墙（即坐标不在 $(1,1) - (n,m)$ 范围内），则其立即死亡，否则如果贪吃蛇的头所到达的格子上有一个食物，则贪吃蛇会吃掉这个食物，然后身体立即增加 1 的长度，当然一个食物被吃掉之后就会消失。</p>
<p>具体地，每当进行一次移动，如果没有吃掉一个食物，则贪吃蛇在头部按照给定方向进行移动的同时，身体的每一段也朝着前一段身体的方向进行移动；如果吃掉了一个食物，则只有头部进行移动，原来身体不进行移动，原来的头部位置长出一个单位的身体，即贪吃蛇的身体增加 1 的长度。</p>
<p>特别地，贪吃蛇的头可以和自己的身体重合（起码游戏里是这样子的），保证贪吃蛇的初始位置上不存在食物。</p>
<p>现给定地图，贪吃蛇的头的初始位置，移动序列。如果贪吃蛇中途撞到了墙，则输出GG，否则如果贪吃蛇最后还活着，输出地图的最后状态，具体请见输出格式及样例输出。</p>
<a id="more"></a>
<p>这恶题想复杂了卡我好久，别人都用的队列，就我一个玩奇怪转化</p>
<p>队列方法就不说了，光说说我的做法</p>
<p>首先我们考虑移动位置是可以转化成区间加的，所以就可以把操作对x和y的贡献做一个前缀和</p>
<p>然后再考虑一个食物在第i个操作被吃了之后，如果之后不吃东西，它会在头后面一直跟着走，也就是会进行i+1~n这段操作</p>
<p>那么再考虑吃了一个食物后对身子的影响：它们会全都停顿一下，那么应该进行到n操作就只能到n-1了</p>
<p>这样就非常好做了，我们记录这个食物被吃的时候的操作编号i，这个食物是第几个被吃的mov</p>
<p>那么这个点进行的操作就是i+1~n-mov这段，然后用前缀和就能直接算出贡献了</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,len,stx,sty,mov[N + <span class="number">5</span>][N + <span class="number">5</span>],cntx[M + <span class="number">5</span>],cnty[M + <span class="number">5</span>],cnt,mm[N + <span class="number">5</span>][N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> ch[N + <span class="number">5</span>][N + <span class="number">5</span>],t[M + <span class="number">5</span>],ans[N + <span class="number">5</span>][N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t + <span class="number">1</span>);</span><br><span class="line">    len = <span class="built_in">strlen</span>(t + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">            <span class="keyword">if</span> (ch[i][j] == <span class="string">'@'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                stx = i;</span><br><span class="line">                sty = j;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cntx[i] = cntx[i - <span class="number">1</span>];</span><br><span class="line">        cnty[i] = cnty[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="string">'W'</span>)</span><br><span class="line">            cntx[i]--;</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="string">'A'</span>)</span><br><span class="line">            cnty[i]--;</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="string">'S'</span>)</span><br><span class="line">            cntx[i]++;</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="string">'D'</span>)</span><br><span class="line">            cnty[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x = stx,y = sty;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="string">'W'</span>)</span><br><span class="line">            x--;</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="string">'A'</span>)</span><br><span class="line">            y--;</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="string">'S'</span>)</span><br><span class="line">            x++;</span><br><span class="line">        <span class="keyword">if</span> (t[i] == <span class="string">'D'</span>)</span><br><span class="line">            y++;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"GG"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ch[x][y] == <span class="string">'o'</span>)</span><br><span class="line">            mm[x][y] = i,mov[x][y] = ++cnt,ch[x][y] = <span class="string">'.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">            ans[i][j] = ch[i][j];</span><br><span class="line">    ans[stx][sty] = <span class="string">'.'</span>;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">            <span class="keyword">if</span> (mov[i][j])</span><br><span class="line">                ans[i + cntx[len - mov[i][j]] - cntx[mm[i][j]]][j + cnty[len - mov[i][j]] - cnty[mm[i][j]]] = <span class="string">'X'</span>;</span><br><span class="line">    ans[x][y] = <span class="string">'@'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans[i][j];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前缀和 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P1084 疫情控制]]></title>
      <url>/2019/10/25/p1084/</url>
      <content type="html"><![CDATA[<p>H 国有 n个城市，这 n 个城市用n−1条双向道路相互连通构成一棵树，1号城市是首都，也是树中的根节点。</p>
<p>H国的首都爆发了一种危害性极高的传染病。当局为了控制疫情，不让疫情扩散到边境城市（叶子节点所表示的城市），决定动用军队在一些城市建立检查点，使得从首都到边境城市的每一条路径上都至少有一个检查点，边境城市也可以建立检查点。但特别要注意的是，首都是不能建立检查点的。</p>
<p>现在，在 H 国的一些城市中已经驻扎有军队，且一个城市可以驻扎多个军队。一支军队可以在有道路连接的城市间移动，并在除首都以外的任意一个城市建立检查点，且只能在一个城市建立检查点。一支军队经过一条道路从一个城市移动到另一个城市所需要的时间等于道路的长度（单位：小时）。</p>
<p>请问最少需要多少个小时才能控制疫情。注意：不同的军队可以同时移动。</p>
<a id="more"></a>
<p>一看就很可以二分的样子</p>
<p>然后得到时间后我们每个军队都一定是要往上走的，一种是还没走到根节点就停下了，还有一种是走到根节点后可以往下走</p>
<p>这个可以预处理倍增出来，处理出能走到根节点的军队和剩余距离</p>
<p>然后我们在现在走完的图上dfs一遍找出根节点的儿子中没有被控制的点，再记录下到根节点的距离</p>
<p>因为我们填这些没有被控制的节点肯定是剩余路程多的军队走到里根节点远的距离</p>
<p>所以可以对没被控制的节点和可以移动的军队排个序</p>
<p>但是在选的时候还有一种情况就是这个点的子树里有能跳上根的军队，所以我们还要维护每个子树里能调到根的剩余路径最小的军队</p>
<p>去控制点的时候先看看子树里最小的军队有没有被使用，被使用了就去找排好序里可以用的军队</p>
<p>然后就做完了，时间复杂度$O(nlog^2n)$</p>
<p><strong>Code</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">1e14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="built_in">log</span> = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">army</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> len;</span><br><span class="line">&#125;a[N + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sos</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,l;</span><br><span class="line">&#125;b[N + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">near</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ml;</span><br><span class="line">&#125;c[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> used[N + <span class="number">5</span>],n,m,in[N + <span class="number">5</span>],fa[N + <span class="number">5</span>][<span class="built_in">log</span> + <span class="number">2</span>],na,nb,to[N + <span class="number">5</span>],t[N + <span class="number">5</span>],beat[N + <span class="number">5</span>],cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis[N + <span class="number">5</span>][<span class="built_in">log</span> + <span class="number">2</span>],ans = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">vector</span> &lt;node&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[u][<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">log</span>;i++)</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>],dis[u][i] = dis[u][i - <span class="number">1</span>] + dis[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to,w = (*it).cost;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dis[v][<span class="number">0</span>] = w;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    beat[u] = t[u];</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">int</span> fl = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (d[u].size() == <span class="number">1</span>)</span><br><span class="line">        fl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to;</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        search(v,u);</span><br><span class="line">        fl &amp;= beat[v];</span><br><span class="line">    &#125;</span><br><span class="line">    beat[u] |= fl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmpa</span><span class="params">(army x,army y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.len &gt; y.len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmpb</span><span class="params">(sos x,sos y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.l &gt; y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="keyword">sizeof</span>(t));</span><br><span class="line">    <span class="built_in">memset</span>(beat,<span class="number">0</span>,<span class="keyword">sizeof</span>(beat));</span><br><span class="line">    <span class="built_in">memset</span>(used,<span class="number">0</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        c[i].ml = INF;</span><br><span class="line">    na = nb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = in[i];</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = x;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">log</span>;j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span> (res &gt;= dis[u][j] &amp;&amp; fa[u][j] &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res -= dis[u][j];</span><br><span class="line">                u = fa[u][j];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (fa[u][<span class="number">0</span>] == <span class="number">1</span> &amp;&amp; res &gt;= dis[u][<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            res -= dis[u][<span class="number">0</span>];</span><br><span class="line">            a[++na] = (army)&#123;i,res&#125;;</span><br><span class="line">            <span class="keyword">if</span> (c[u].ml &gt; res)</span><br><span class="line">                c[u].ml = res,c[u].u = i;</span><br><span class="line">            u = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t[u] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    beat[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = d[<span class="number">1</span>].begin();it != d[<span class="number">1</span>].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to,w = (*it).cost;</span><br><span class="line">        search(v,<span class="number">1</span>);</span><br><span class="line">        beat[<span class="number">1</span>] &amp;= beat[v];</span><br><span class="line">        <span class="keyword">if</span> (beat[v] == <span class="number">0</span>)</span><br><span class="line">            b[++nb] = (sos)&#123;v,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beat[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    sort(a + <span class="number">1</span>,a + na + <span class="number">1</span>,cmpa);</span><br><span class="line">    sort(b + <span class="number">1</span>,b + nb + <span class="number">1</span>,cmpb);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= nb;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!used[c[b[i].u].u] &amp;&amp; c[b[i].u].ml != INF)</span><br><span class="line">            used[c[b[i].u].u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> ((used[a[l].u] || a[l].len &lt; b[i].l) &amp;&amp; l &lt;= na)</span><br><span class="line">                l++;</span><br><span class="line">            <span class="keyword">if</span> (l &gt; na)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            used[a[l].u] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        d[u].push_back((node)&#123;v,w&#125;);</span><br><span class="line">        d[v].push_back((node)&#123;u,w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in[i]);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">0</span>,r = INF,mid;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid))</span><br><span class="line">            r = mid - <span class="number">1</span>,ans = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> 二分答案 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P1131 [ZJOI2007]时态同步]]></title>
      <url>/2019/10/23/p1131/</url>
      <content type="html"><![CDATA[<p>小Q在电子工艺实习课上学习焊接电路板。一块电路板由若干个元件组成，我们不妨称之为节点，并将其用数字1,2,3….进行标号。电路板的各个节点由若干不相交的导线相连接，且对于电路板的任何两个节点，都存在且仅存在一条通路（通路指连接两个元件的导线序列）。</p>
<p>在电路板上存在一个特殊的元件称为“激发器”。当激发器工作后，产生一个激励电流，通过导线传向每一个它所连接的节点。而中间节点接收到激励电流后，得到信息，并将该激励电流传向与它连接并且尚未接收到激励电流的节点。最终，激烈电流将到达一些“终止节点”――接收激励电流之后不再转发的节点。</p>
<p>激励电流在导线上的传播是需要花费时间的，对于每条边e，激励电流通过它需要的时间为$t_e$<br>，而节点接收到激励电流后的转发可以认为是在瞬间完成的。现在这块电路板要求每一个“终止节点”同时得到激励电路――即保持时态同步。由于当前的构造并不符合时态同步的要求，故需要通过改变连接线的构造。目前小Q有一个道具，使用一次该道具，可以使得激励电流通过某条连接导线的时间增加一个单位。请问小Q最少使用多少次道具才可使得所有的“终止节点”时态同步？</p>
<p>就是给你一个有根树，让你每次给一个边加1直到根到所有叶子节点的距离相同，问最少操作</p>
<a id="more"></a>
<p>这题好像很水的样子QAQ</p>
<p>考虑树上dp，设$f_u$表示u的子树时态同步的最小代价，$dis_u$表示u的子树时态同步后的子树边权和</p>
<p>然后写出状态转移方程</p>
<script type="math/tex; mode=display">\begin{cases}
    dis_u=max_{v\in son(u)}dis_v+dist(u,v)\\
    f_u=\sum_{v\in son(u)}f_v+dis_u-dis_v-dist(u,v)
\end{cases}</script><p>$dist(u,v)$表示u到v的距离</p>
<p>因为边权只能加1，所以我们只能找最大的边来作为相同的边，也就是儿子的dis加上这条边取最大值</p>
<p>然后贡献的话首先要把所有儿子变相同的加起来，然后再把比dis小的边的贡献算上就可以了</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,s;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N + <span class="number">5</span>],dis[N + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;node&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to,w = (*it).cost;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        maxx = max(maxx,w);</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        f[u] += f[v];</span><br><span class="line">        dis[u] = max(dis[v] + w,dis[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to,w = (*it).cost;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        f[u] += dis[u] - dis[v] - w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;s);</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        d[u].push_back((node)&#123;v,w&#125;);</span><br><span class="line">        d[v].push_back((node)&#123;u,w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(s,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[s]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树上dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P2470 [SCOI2007]压缩]]></title>
      <url>/2019/10/20/p2470/</url>
      <content type="html"><![CDATA[<p>给一个由小写字母组成的字符串，我们可以用一种简单的方法来压缩其中的重复信息。压缩后的字符串除了小写字母外还可以（但不必）包含大写字母R与M，其中M标记重复串的开始，R重复从上一个M（如果当前位置左边没有M，则从串的开始算起）开始的解压结果（称为缓冲串）。</p>
<p>求一个仅含小写字母的字符串压缩后的最短长度</p>
<a id="more"></a>
<p>一道区间dp题，<del>但是可能不太好想？</del></p>
<p>首先我们如果设$f_{l,r}$表示区间l~r的最短长度，发现M的位置是会影响我们统计的</p>
<p>所以我们不妨设$f_{l,r,1/0}$表示区间l~r有或没有M的最短长度，并且默认l-1的位置是有M的</p>
<p>这样就容易转移多了</p>
<script type="math/tex; mode=display">\begin{cases}
    f_{l,r,0}=f_{l,mid,0}+1\ \ \ (2|(r-l+1)\& s_{l\dots mid}=s_{mid+1\dots r}) \\
    f_{l,r,0}=min_{k=l}^{r-1}(f_{l,k,0}+r-k) \\
    f_{l,r,1}=min_{k=l}^{r-1}(min(f_{l,k,0},f_{l,k,0})+1+min(f_{k+1,r,0},f_{k+1,r,1}))
\end{cases}</script><p>第一种情况是左半边等于右半边，那么就可以被压缩，因为l-1有M，所以添个R就可以了</p>
<p>第二种情况是l~k这段被压缩过，因为这段区间没有M，所以后面不能被压缩，只能加上原长度</p>
<p>第三种情况因为这个区间插入了个M，所以两边有没有M无所谓了</p>
<p><strong>Code</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,f[N + <span class="number">5</span>][N + <span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> ch[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l;i &lt;= mid;i++)</span><br><span class="line">        <span class="keyword">if</span> (ch[i] != ch[mid + i - l + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(ch + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j + i - <span class="number">1</span> &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[j][j + i - <span class="number">1</span>][<span class="number">0</span>] = f[j][j + i - <span class="number">1</span>][<span class="number">1</span>] = i;</span><br><span class="line">            <span class="keyword">int</span> mid = (j + j + i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; check(j,j + i - <span class="number">1</span>))</span><br><span class="line">                f[j][j + i - <span class="number">1</span>][<span class="number">0</span>] = min(f[j][j + i - <span class="number">1</span>][<span class="number">0</span>],f[j][mid][<span class="number">0</span>] + <span class="number">1</span>);     </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j;k &lt; j + i - <span class="number">1</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[j][j + i - <span class="number">1</span>][<span class="number">0</span>] = min(f[j][j + i - <span class="number">1</span>][<span class="number">0</span>],f[j][k][<span class="number">0</span>] + j + i - <span class="number">1</span> - k);</span><br><span class="line">                f[j][j + i - <span class="number">1</span>][<span class="number">1</span>] = min(f[j][j + i - <span class="number">1</span>][<span class="number">1</span>],min(f[j][k][<span class="number">1</span>],f[j][k][<span class="number">0</span>]) + min(f[k + <span class="number">1</span>][j + i - <span class="number">1</span>][<span class="number">0</span>],f[k + <span class="number">1</span>][j + i - <span class="number">1</span>][<span class="number">1</span>]) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;min(f[<span class="number">1</span>][n][<span class="number">1</span>],f[<span class="number">1</span>][n][<span class="number">0</span>])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区间dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[USACO08JAN 手机网络Cell Phone Network]]></title>
      <url>/2019/10/17/p2899/</url>
      <content type="html"><![CDATA[<p>John想让他的所有牛用上手机以便相互交流(也是醉了。。。)，他需要建立几座信号塔在N块草地中。<br>已知与信号塔相邻的草地能收到信号。给你N-1个草地(A，B)的相邻关系，问：最少需要建多少个信号塔能实现所有草地都有信号。<br>（其实就是最小支配集大小）</p>
<a id="more"></a>
<p>考虑树上dp</p>
<p>$f_{u,1}$表示以u为根的子树中，u选时候的答案</p>
<p>$f_{u,0}$表示以u为根的子树中，u不选且儿子不选（也就是u必须要被父亲覆盖）时候的答案</p>
<p>$f_{u,2}$表示以u为根的子树中，u不选且至少有一个儿子选时候的答案</p>
<p>于是我们可以得到转移方程</p>
<script type="math/tex; mode=display">\begin{cases}
f_{u,1}=1+\sum_{v\in son(u)}min(f_{v,0},f_{v,1},f_{v,2})& \\
f_{u,0}=\sum_{v\in son(u)}f_{v,2}& \\
f_{u,2}=f_{x,1}\ (x\in son(u))+\sum_{v\in son(u)\& v\ne x}min(f_{v,1},f_{v,2})
\end{cases}</script><p>u选的时候儿子是随便选的</p>
<p>u不选而且儿子不选那么儿子就要被儿子的儿子覆盖到</p>
<p>u不选但儿子选就要保证有一个点是选的，所以我们找到一个x满足$f_{x,1}-min(f_{x,1},f_{x,2})$最小，然后剩下的在这个点选或者不选且被儿子覆盖（因为u不选所以不能选择被父亲覆盖）里取较小的</p>
<p>然后注意下根是没有$f_{1,0}$的，叶子节点没有$f_{u,2}$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,f[N + <span class="number">5</span>][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">int</span> mm = N + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        f[u][<span class="number">1</span>] += min(min(f[v][<span class="number">0</span>],f[v][<span class="number">1</span>]),f[v][<span class="number">2</span>]);</span><br><span class="line">        f[u][<span class="number">0</span>] += f[v][<span class="number">2</span>];</span><br><span class="line">        f[u][<span class="number">2</span>] += min(f[v][<span class="number">1</span>],f[v][<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span> (mm &gt; f[v][<span class="number">1</span>] - min(f[v][<span class="number">1</span>],f[v][<span class="number">2</span>]))</span><br><span class="line">            mm = f[v][<span class="number">1</span>] - min(f[v][<span class="number">1</span>],f[v][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    f[u][<span class="number">2</span>] += mm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        d[u].push_back(v);</span><br><span class="line">        d[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;min(f[<span class="number">1</span>][<span class="number">2</span>],f[<span class="number">1</span>][<span class="number">1</span>])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树上dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CF101915D Largest Group]]></title>
      <url>/2019/10/16/cf101915d/</url>
      <content type="html"><![CDATA[<p>有一天，你们学校决定做一些统计。他们想研究男孩和女孩之间的友谊关系，以及这种关系对他们成绩的影响。<br>你们大学的奇怪之处在于男生和女生的人数完全一样。更正式的说法是，这所大学的男生人数是从1到P，女生人数是从1到P。<br>我们知道，任何一对男孩肯定是朋友，任何一对女孩肯定是朋友。然而，男孩和女孩并不总是朋友。确切地说，这所大学有一个长度为N的列表，其中包含了男孩和女孩之间的友谊关系。第i个友谊关系是由两个整数bi和gi来描述的，意思是男孩的数字bi和女孩的数字gi是朋友。<br>你所在大学最感兴趣的统计数据之一，是最大的人群(男孩和女孩)，其中任何一对都是朋友。你能编写一个程序来解决这样的问题吗?</p>
<a id="more"></a>
<p>其实就是求二分图的最大团</p>
<p>我们用$fa_i$存第i个男生和女生的朋友关系（用二进制表示）</p>
<p>然后$f_s$表示当选这几个男生时女生的状态，所以得到下面的转移方程（可能连方程都不是）</p>
<script type="math/tex; mode=display">f_s=f_{s-(1<<x-1)} \& fa_i</script><p>x应该是可以随便找一个在s里的点，我用的是最后一个1的位置</p>
<p>然后有个非常好用的c++内置函数叫__builtin</p>
<p><strong>builtin_popcount返回用二进制表示下1的个数，</strong>builtin_ffs返回二进制表示下最后一个1的位置（注意是位置）</p>
<p><strong>Code(不要在意码风，应该都能看得懂QAQ)</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">%:include &lt;iostream&gt;</span><br><span class="line">%:include &lt;cstdio&gt;</span><br><span class="line">%:include &lt;algorithm&gt;</span><br><span class="line">%:include &lt;cstring&gt;</span><br><span class="line">%:include &lt;<span class="built_in">vector</span>&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,fa&lt;:N + <span class="number">5</span>:&gt;,f[(<span class="number">1</span> &lt;&lt; N) + <span class="number">5</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,bitand T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,bitand n,bitand m);</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        &lt;%</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,bitand u,bitand v);</span><br><span class="line">            fa&lt;:u:&gt; or_eq (<span class="number">1</span> &lt;&lt; v - <span class="number">1</span>);</span><br><span class="line">        %&gt;</span><br><span class="line">        ans = n;</span><br><span class="line">        f&lt;:<span class="number">0</span>:&gt; = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; (<span class="number">1</span> &lt;&lt; n);i++)</span><br><span class="line">        &lt;%</span><br><span class="line">            <span class="keyword">int</span> x = __builtin_ffs(i);</span><br><span class="line">            f&lt;:i:&gt; = f&lt;:i xor (<span class="number">1</span> &lt;&lt; x <span class="number">-1</span>):&gt; bitand fa&lt;:x:&gt;;</span><br><span class="line">            ans = max(ans,__builtin_popcount(i) + __builtin_popcount(f&lt;:i:&gt;));</span><br><span class="line">        %&gt;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    %&gt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 状压dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hdu 5418 Victor and World]]></title>
      <url>/2019/10/15/hdu5418/</url>
      <content type="html"><![CDATA[<p>经过多年的努力，维克多终于拿到了驾驶执照。为了庆祝一下，他打算给自己买一架飞机，飞遍全世界。地球上有n个国家，编号从1到n。它们由m个无向航班连接，第i次航班详细连接了ui国和vi国，如果Victor飞越这些国家，需要消耗Victor的飞机的燃油。他有可能从第一个国家飞到每一个国家。<br>Victor现在在一个编号为1的国家，他想知道最少需要多少燃料才能让他至少访问每个国家一次，最后回到第一个国家。</p>
<a id="more"></a>
<p>考虑状压dp，$f_{s,i}$表示s这个集合里的点全走并且走到i的最短路长，然后就能写出转移方程</p>
<script type="math/tex; mode=display">f_{s,j}=min(f_{s-(1<<j),k} + dis_{k,j})\ ,\ j,k\in s</script><p>$dis_{j,k}$就是j到k的最短路</p>
<p>其实就是像弗洛伊德一样枚举一个断点，然后去更新dp值</p>
<p>而我们是从点0出发的（我是从0~n-1存的点），所以一定要保证$1\in s$</p>
<p>最后只要取$min_{i=1}^{n-1}f_{(1&lt;&lt;n)-1,i}+dis_{i,0}$就好了</p>
<p>时间复杂度没算错的话应该是$O(2^{n-1}\times n^2)$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T,n,m,mp[N + <span class="number">5</span>][N + <span class="number">5</span>],f[(<span class="number">1</span> &lt;&lt; N) + <span class="number">5</span>][N + <span class="number">5</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> u,v,w;</span><br><span class="line">        <span class="built_in">memset</span>(mp,<span class="number">127</span>,<span class="keyword">sizeof</span>(mp));</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">127</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        ans = mp[<span class="number">0</span>][<span class="number">0</span>];        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">           mp[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            u--,v--;</span><br><span class="line">            <span class="keyword">if</span> (u != v)</span><br><span class="line">                mp[v][u] = mp[u][v] = min(mp[u][v],w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; n;k++)</span><br><span class="line">                    <span class="keyword">if</span> (mp[j][i] &lt; mp[n][n] &amp;&amp; mp[i][k] &lt; mp[n][n])</span><br><span class="line">                        mp[j][k] = min(mp[j][k],mp[j][i] + mp[i][k]);</span><br><span class="line">        f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt; (<span class="number">1</span> &lt;&lt; n);i++)</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; n;j++)</span><br><span class="line">                    <span class="keyword">if</span> (i &amp; (<span class="number">1</span> &lt;&lt; j))</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; n;k++)</span><br><span class="line">                            <span class="keyword">if</span> (k != j &amp;&amp; (i &amp; (<span class="number">1</span> &lt;&lt; k)))</span><br><span class="line">                                f[i][j] = min(f[i][j],f[i - (<span class="number">1</span> &lt;&lt; j)][k] + mp[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">            ans = min(ans,f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i] + mp[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 状压dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P3205 [HNOI2010]合唱队]]></title>
      <url>/2019/10/13/p3205/</url>
      <content type="html"><![CDATA[<p>为了在即将到来的晚会上有更好的演出效果，作为AAA合唱队负责人的小A需要将合唱队的人根据他们的身高排出一个队形。假定合唱队一共N个人，第i个人的身高为Hi米(1000&lt;=Hi&lt;=2000),并已知任何两个人的身高都不同。假定最终排出的队形是A 个人站成一排，为了简化问题，小A想出了如下排队的方式：他让所有的人先按任意顺序站成一个初始队形，然后从左到右按以下原则依次将每个人插入最终棑排出的队形中：</p>
<p>-第一个人直接插入空的当前队形中。</p>
<p>-对从第二个人开始的每个人，如果他比前面那个人高(H较大)，那么将他插入当前队形的最右边。如果他比前面那个人矮(H较小)，那么将他插入当前队形的最左边。</p>
<p>当N个人全部插入当前队形后便获得最终排出的队形。</p>
<a id="more"></a>
<p>例如，有6个人站成一个初始队形，身高依次为1850、1900、1700、1650、1800和1750,</p>
<p>那么小A会按以下步骤获得最终排出的队形：</p>
<p>1850</p>
<p>1850 , 1900 因为 1900 &gt; 1850</p>
<p>1700, 1850, 1900 因为 1700 &lt; 1900</p>
<p>1650 . 1700, 1850, 1900 因为 1650 &lt; 1700</p>
<p>1650 , 1700, 1850, 1900, 1800 因为 1800 &gt; 1650</p>
<p>1750， 1650, 1700，1850, 1900, 1800 因为 1750 &lt; 1800</p>
<p>因此，最终排出的队形是 1750，1650，1700，1850, 1900，1800</p>
<p>小A心中有一个理想队形，他想知道多少种初始队形可以获得理想的队形</p>
<p>状态可能不太好设计</p>
<p>不妨用$f_{l,r,0}$表示l~r这段区间中l从左边插入的方案数，$f_{l,r,1}$表示l~r这段区间中r从右边插入的方案数</p>
<p>于是我们得到如下的转移方程</p>
<p>$f_{l,r,0}+=\begin{cases}f_{l+1,r,0}&amp;\; (a_l&lt;a_{l+1})\ f_{l+1,r,1}&amp;\; (a_l&lt;a_r)\end{cases}$</p>
<p>从左边插入一定比上一个数小，而上一个数的来源只可能是l+1或者r，然后就可以更新答案</p>
<p>$f_{l,r,1}+=\begin{cases}f_{l,r-1,0}&amp;\; (a_r&gt;a_l) \ f_{l,r-1,1}&amp;\; (a_r&gt;a_{r-1})\end{cases}$</p>
<p>从右边插入一定比上一个数大，而上一个数的来源只可能是r-1或者l，然后就可以更新答案</p>
<p>$f_{1,n,0}+f_{1,n,1}$就是这道题答案了QAQ</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">19650827</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N + <span class="number">5</span>],f[N + <span class="number">5</span>][N + <span class="number">5</span>][<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        f[i][i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j + i - <span class="number">1</span> &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j + i - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">                f[j][j + i - <span class="number">1</span>][<span class="number">0</span>] += f[j + <span class="number">1</span>][j + i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>])</span><br><span class="line">                f[j][j + i - <span class="number">1</span>][<span class="number">0</span>] += f[j + <span class="number">1</span>][j + i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[j + i - <span class="number">1</span>] &gt; a[j + i - <span class="number">2</span>])</span><br><span class="line">                f[j][j + i - <span class="number">1</span>][<span class="number">1</span>] += f[j][j + i - <span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (a[j + i - <span class="number">1</span>] &gt; a[j])</span><br><span class="line">                f[j][j + i - <span class="number">1</span>][<span class="number">1</span>] += f[j][j + i - <span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">            f[j][j + i - <span class="number">1</span>][<span class="number">0</span>] %= p;</span><br><span class="line">            f[j][j + i - <span class="number">1</span>][<span class="number">1</span>] %= p;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(f[<span class="number">1</span>][n][<span class="number">0</span>] + f[<span class="number">1</span>][n][<span class="number">1</span>]) % p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 区间dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P2516 [HAOI2010]最长公共子序列]]></title>
      <url>/2019/10/11/p2516/</url>
      <content type="html"><![CDATA[<p>字符序列的子序列是指从给定字符序列中随意地（不一定连续）去掉若干个字符（可能一个也不去掉）后所形成的字符序列。令给定的字符序列X=“x0，x1，…，xm-1”，序列Y=“y0，y1，…，yk-1”是X的子序列，存在X的一个严格递增下标序列<i0，i1，…，ik-1>，使得对所有的j=0，1，…，k-1，有xi = yj。例如，X=“ABCBDAB”，Y=“BCDB”是X的一个子序列。对给定的两个字符序列，求出他们最长的公共子序列长度，以及最长公共子序列个数。</i0，i1，…，ik-1></p>
<a id="more"></a>
<p>其实就是让你求一个最长公共子序列的长度和方案数</p>
<p>因为长度最大是5000，所以考虑dp</p>
<p>$f_{i,j}$表示第一个字符串a的前1…i的子串和第二个字符串b的前1…j的子串的最长公共子序列长度</p>
<p>那么有两种情况</p>
<script type="math/tex; mode=display">f_{i,j}=\begin{cases}f_{i-1,j-1}&\; (a_i=b_j) \\ max(f_{i-1,j},f_{i,j-1})&\; (a_i\ne b_j)\end{cases}</script><p>然后就可以$O(n^2)$转移了</p>
<p>至于方案数也使用一样统计，开一个$dp_{i,j}$表示第一个字符串a的前1…i的子串和第二个字符串b的前1…j的子串的最长公共子序列的方案数</p>
<p>我们只需要统计$f_{i-1,j}$和$f_{i,j-1}$中与$f_{i,j}$相等的把方案数相加，然后又有两种情况</p>
<script type="math/tex; mode=display">dp_{i,j}+=\begin{cases}dp_{i-1,j-1}&\, (a_i=b_j\ \& \ f_{i,j}=f_{i-1,j-1}+1) \\ -dp_{i-1,j-1}&\, (a_i\ne b_j\ \& \ f_{i,j}=f_{i-1,j-1})\end{cases}</script><p>负数的情况就是减去算重的一次</p>
<p>初始化就是$dp_{i,0}=dp_{0,j}=1\quad(0\le i\le len_a,0\le j\le len_b)$</p>
<p>然后这题还卡空间(<del>真是毒瘤</del></p>
<p>但是这个转移方程滚动还是很显然的，第一维只留两个状态就可以了，然后算答案和统计方案数也可以放在一起做</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1e8</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,la,lb,dp[<span class="number">3</span>][N + <span class="number">5</span>],f[<span class="number">3</span>][N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> a[N + <span class="number">5</span>],b[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,b + <span class="number">1</span>);</span><br><span class="line">    la = <span class="built_in">strlen</span>(a + <span class="number">1</span>);</span><br><span class="line">    lb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line">    la--;</span><br><span class="line">    lb--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= lb;i++)</span><br><span class="line">        dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= la;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= lb;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i % <span class="number">2</span>][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j])</span><br><span class="line">            &#123;</span><br><span class="line">                f[i % <span class="number">2</span>][j] = f[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                dp[i % <span class="number">2</span>][j] += dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>]; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                f[i % <span class="number">2</span>][j] = max(f[i % <span class="number">2</span>][j - <span class="number">1</span>],f[(i - <span class="number">1</span>) % <span class="number">2</span>][j]);</span><br><span class="line">            <span class="keyword">if</span> (f[(i - <span class="number">1</span>) % <span class="number">2</span>][j] == f[i % <span class="number">2</span>][j])</span><br><span class="line">                dp[i % <span class="number">2</span>][j] += dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (f[i % <span class="number">2</span>][j - <span class="number">1</span>] == f[i % <span class="number">2</span>][j])</span><br><span class="line">                dp[i % <span class="number">2</span>][j] += dp[i % <span class="number">2</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (f[i % <span class="number">2</span>][j] == f[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>] &amp;&amp; a[i] != b[j])</span><br><span class="line">                dp[i % <span class="number">2</span>][j] -= dp[(i - <span class="number">1</span>) % <span class="number">2</span>][j - <span class="number">1</span>];                </span><br><span class="line">            dp[i % <span class="number">2</span>][j] = (dp[i % <span class="number">2</span>][j] + p) % p;            </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>,f[la % <span class="number">2</span>][lb],dp[la % <span class="number">2</span>][lb]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P5024 保卫王国]]></title>
      <url>/2019/10/10/p5024/</url>
      <content type="html"><![CDATA[<p>Z国有n座城市，n−1条双向道路，每条双向道路连接两座城市，且任意两座城市 都能通过若干条道路相互到达。</p>
<p>Z国的国防部长小Z要在城市中驻扎军队。驻扎军队需要满足如下几个条件：</p>
<ul>
<li>一座城市可以驻扎一支军队，也可以不驻扎军队。</li>
<li>由道路直接连接的两座城市中至少要有一座城市驻扎军队。</li>
<li>在城市里驻扎军队会产生花费，在编号为i的城市中驻扎军队的花费是$p_i$。</li>
</ul>
<p>小 Z 很快就规划出了一种驻扎军队的方案，使总花费最小。但是国王又给小Z提出了m个要求，每个要求规定了其中两座城市是否驻扎军队。小Z需要针对每个要求逐一给出回答。具体而言，如果国王提出的第j个要求能够满足上述驻扎条件（不需要考虑第j个要求之外的其它要求），则需要给出在此要求前提下驻扎军队的最小开销。如果 国王提出的第j个要求无法满足，则需要输出-1$(1\le j\le m)$。现在请你来帮助小Z。</p>
<a id="more"></a>
<p>真是一道noip的毒瘤题</p>
<p>最小权覆盖集=点权和-最大权独立集</p>
<p>每次询问选或不选相当于给每个点赋无穷小或无穷大，然后就可以ddp了，<del>好了做完了</del></p>
<p>但是这个题没有修改，所以我们考虑倍增</p>
<p>先预处理出来$f_{u,0/1}$表示u不选或选时以其为根子树的答案，$g_{u,0/1}$表示u不选或选时整棵树去掉以u为根的子树的答案</p>
<p>这两个都可以树上dp出来</p>
<p>然后我们维护一个倍增数组$dp_{u,i,0/1,0/1}$表示u不选或选和u的$2^i$祖先不选或选时，以u的$2^i$祖先为根的子树去掉以u为根的子树的答案</p>
<p>这个也可以顺着树上dp的思路倍增出来</p>
<p>然后根据倍增往上跳就可以了，顺便统计一下答案</p>
<p>当然，只有在a，b都不能驻扎军队并且a和b有边相连的情况下才会无解</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">1e15</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> dep[N + <span class="number">5</span>],fa[N + <span class="number">5</span>][<span class="number">25</span>];</span><br><span class="line">LL dp[N + <span class="number">5</span>][<span class="number">25</span>][<span class="number">2</span>][<span class="number">2</span>],f[N + <span class="number">5</span>][<span class="number">2</span>],g[N + <span class="number">5</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> F)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    fa[u][<span class="number">0</span>] = F;</span><br><span class="line">    f[u][<span class="number">1</span>] = p[u];</span><br><span class="line">    dep[u] = dep[F] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == F)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v,u);</span><br><span class="line">        f[u][<span class="number">1</span>] += min(f[v][<span class="number">0</span>],f[v][<span class="number">1</span>]);</span><br><span class="line">        f[u][<span class="number">0</span>] += f[v][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> F)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == F)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        g[v][<span class="number">0</span>] = g[u][<span class="number">1</span>] + f[u][<span class="number">1</span>] - min(f[v][<span class="number">1</span>],f[v][<span class="number">0</span>]);</span><br><span class="line">        g[v][<span class="number">1</span>] = min(g[u][<span class="number">0</span>] + f[u][<span class="number">0</span>] - f[v][<span class="number">1</span>],g[v][<span class="number">0</span>]);</span><br><span class="line">        dfs2(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x,<span class="keyword">int</span> b,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[a] &lt; dep[b])</span><br><span class="line">        swap(a,b),swap(x,y);</span><br><span class="line">    LL ta[<span class="number">2</span>] = &#123;INF,INF&#125;,tb[<span class="number">2</span>] = &#123;INF,INF&#125;,na[<span class="number">2</span>],nb[<span class="number">2</span>];</span><br><span class="line">    ta[x] = f[a][x];</span><br><span class="line">    tb[y] = f[b][y];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">18</span>;i &gt;= <span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (dep[fa[a][i]] &gt;= dep[b])</span><br><span class="line">        &#123;</span><br><span class="line">            na[<span class="number">0</span>] = na[<span class="number">1</span>] = INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= <span class="number">1</span>;j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k &lt;= <span class="number">1</span>;k++)</span><br><span class="line">                    na[j] = min(na[j],ta[k] + dp[a][i][k][j]);</span><br><span class="line">            ta[<span class="number">1</span>] = na[<span class="number">1</span>];</span><br><span class="line">            ta[<span class="number">0</span>] = na[<span class="number">0</span>];</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (a == b)</span><br><span class="line">        <span class="keyword">return</span> ta[y] + g[b][y];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">18</span>;i &gt;= <span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (fa[a][i] != fa[b][i])</span><br><span class="line">        &#123;</span><br><span class="line">            na[<span class="number">0</span>] = na[<span class="number">1</span>] = nb[<span class="number">0</span>] = nb[<span class="number">1</span>] = INF;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= <span class="number">1</span>;j++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k &lt;= <span class="number">1</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    na[j] = min(na[j],ta[k] + dp[a][i][k][j]);</span><br><span class="line">                    nb[j] = min(nb[j],tb[k] + dp[b][i][k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            ta[<span class="number">1</span>] = na[<span class="number">1</span>];</span><br><span class="line">            ta[<span class="number">0</span>] = na[<span class="number">0</span>];</span><br><span class="line">            tb[<span class="number">1</span>] = nb[<span class="number">1</span>];</span><br><span class="line">            tb[<span class="number">0</span>] = nb[<span class="number">0</span>];</span><br><span class="line">            a = fa[a][i];</span><br><span class="line">            b = fa[b][i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> lca = fa[a][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> min(f[lca][<span class="number">0</span>] - f[a][<span class="number">1</span>] - f[b][<span class="number">1</span>] + ta[<span class="number">1</span>] + tb[<span class="number">1</span>] + g[lca][<span class="number">0</span>],f[lca][<span class="number">1</span>] - min(f[a][<span class="number">0</span>],f[a][<span class="number">1</span>]) - min(f[b][<span class="number">0</span>],f[b][<span class="number">1</span>]) + min(ta[<span class="number">0</span>],ta[<span class="number">1</span>]) + min(tb[<span class="number">0</span>],tb[<span class="number">1</span>]) + g[lca][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        d[u].push_back(v);</span><br><span class="line">        d[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        sort(d[i].begin(),d[i].end());</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = INF;</span><br><span class="line">        dp[i][<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] = f[fa[i][<span class="number">0</span>]][<span class="number">0</span>] - f[i][<span class="number">1</span>];</span><br><span class="line">        dp[i][<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] = f[fa[i][<span class="number">0</span>]][<span class="number">1</span>] - min(f[i][<span class="number">0</span>],f[i][<span class="number">1</span>]);</span><br><span class="line">        dp[i][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = f[fa[i][<span class="number">0</span>]][<span class="number">1</span>] - min(f[i][<span class="number">0</span>],f[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">18</span>;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            fa[j][i] = fa[fa[j][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;x &lt;= <span class="number">1</span>;x++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>;y &lt;= <span class="number">1</span>;y++)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[j][i][x][y] = INF;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>;z &lt;= <span class="number">1</span>;z++)</span><br><span class="line">                        dp[j][i][x][y] = min(dp[j][i][x][y],dp[j][i - <span class="number">1</span>][x][z] + dp[fa[j][i - <span class="number">1</span>]][i - <span class="number">1</span>][z][y]);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">int</span> a,x,b,y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;a,&amp;x,&amp;b,&amp;y);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span> &amp;&amp; *lower_bound(d[a].begin(),d[a].end(),b) == b)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,solve(a,x,b,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> 树上dp </tag>
            
            <tag> 动态dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P3960 列队]]></title>
      <url>/2019/10/09/p3960/</url>
      <content type="html"><![CDATA[<p>Sylvia 是一个热爱学习的女孩子。</p>
<p>前段时间，Sylvia 参加了学校的军训。众所周知，军训的时候需要站方阵。</p>
<p>Sylvia 所在的方阵中有$n\times m$名学生，方阵的行数为n，列数为m。</p>
<p>为了便于管理，教官在训练开始时，按照从前到后，从左到右的顺序给方阵中的学生从1到$n\times m$编上了号码（参见后面的样例）。即：初始时，第i行第j列的学生的编号是$(i-1)\times m+j$。</p>
<p>然而在练习方阵的时候，经常会有学生因为各种各样的事情需要离队。在一天中，一共发生了q件这样的离队事件。每一次离队事件可以用数对$(x,y) (1 \le x \le n, 1 \le y \le m)$描述，表示第x行第y列的学生离队。</p>
<p>在有学生离队后，队伍中出现了一个空位。为了队伍的整齐，教官会依次下达这样的两条指令：</p>
<p>向左看齐。这时第一列保持不动，所有学生向左填补空缺。不难发现在这条指令之后，空位在第x行第m列。</p>
<p>向前看齐。这时第一行保持不动，所有学生向前填补空缺。不难发现在这条指令之后，空位在第n行第m列。</p>
<p>教官规定不能有两个或更多学生同时离队。即在前一个离队的学生归队之后，下一个学生才能离队。因此在每一个离队的学生要归队时，队伍中有且仅有第n行第m列一个空位，这时这个学生会自然地填补到这个位置。</p>
<p>因为站方阵真的很无聊，所以 Sylvia 想要计算每一次离队事件中，离队的同学的编号是多少。</p>
<p>注意：每一个同学的编号不会随着离队事件的发生而改变，在发生离队事件后方阵中同学的编号可能是乱序的。</p>
<a id="more"></a>
<p>考虑用线段树计算每一行第x个人的位置，因为n和m都很大，所以要动态开点，线段树的最长长度就是$max(n,m)+p$</p>
<p>计算第x人的位置很好算，维护一个区间内有多少个人被删除掉，查询的时候用类似于主席树的方法查询就可以了</p>
<p>这样删除操作也就说完了</p>
<p>而添加时我们开n+1个vector，1~n维护前m-1个人，第n+1维护最后一列，这是因为我们每次操作是先左移再上移</p>
<p>对于一对(x,y)，如果$y=m$，则只需要上移，所以直接在第n+1个vector里操作然后把这个数丢到vector最后就好了；否则就要先左移，需要查出第x个vector的第y个，删掉后丢到vector最后，然后上移，在第n+1个vector进行类似的操作</p>
<p>然后算编号也是很好算的，左移操作中如果我们得到的位置$ans &lt;= m-1$，那么编号为$(x-1)<em>n+ans$，否则为vector中第$[x][ans-m]$个数；上移操作中如果$ans &lt;= n$，那么编号为$ans</em>m$，否则为vector中第$[n+1][ans-n-1]$个数（vector下标是从0开始的）</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q,rt[N + <span class="number">5</span>],lc[N * <span class="number">20</span> + <span class="number">5</span>],rc[N * <span class="number">20</span> + <span class="number">5</span>],len,node_cnt;</span><br><span class="line"><span class="built_in">vector</span> &lt;LL&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> del[N * <span class="number">20</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">            <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>,y = mid - l + <span class="number">1</span> - del[lc[k]];</span><br><span class="line">        <span class="keyword">if</span> (y &gt;= x)</span><br><span class="line">            <span class="keyword">return</span> query(lc[k],l,mid,x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> query(rc[k],mid + <span class="number">1</span>,r,x - y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!k)</span><br><span class="line">            k = ++node_cnt;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            del[k]++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">            change(lc[k],l,mid,x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            change(rc[k],mid + <span class="number">1</span>,r,x);</span><br><span class="line">        del[k] = del[lc[k]] + del[rc[k]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">ask1</span><span class="params">(<span class="keyword">int</span> x,LL y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL ans = query(rt[n + <span class="number">1</span>],<span class="number">1</span>,len,x);      </span><br><span class="line">        change(rt[n + <span class="number">1</span>],<span class="number">1</span>,len,ans);</span><br><span class="line">        <span class="keyword">if</span> (ans &lt;= n)</span><br><span class="line">            ans *= <span class="number">1l</span>l * m;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = d[n + <span class="number">1</span>][ans - n - <span class="number">1</span>];</span><br><span class="line">        d[n + <span class="number">1</span>].push_back(y ? y : ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">ask2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LL ans = query(rt[x],<span class="number">1</span>,len,y);</span><br><span class="line">        change(rt[x],<span class="number">1</span>,len,ans);</span><br><span class="line">        <span class="keyword">if</span> (ans &lt;= m - <span class="number">1</span>)</span><br><span class="line">            ans = <span class="number">1l</span>l * (x - <span class="number">1</span>) * m + ans;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans = d[x][ans - m];</span><br><span class="line">        d[x].push_back(ask1(x,ans));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">    len = max(n,m) + q;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span> (y == m)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,tree.ask1(x,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,tree.ask2(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 动态开点 </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P1600 天天爱跑步]]></title>
      <url>/2019/10/08/p1600/</url>
      <content type="html"><![CDATA[<p>小c同学认为跑步非常有趣,于是决定制作一款叫做《天天爱跑步》的游戏。《天天爱跑步》是一个养成类游戏,需要玩家每天按时上线,完成打卡任务。</p>
<p>这个游戏的地图可以看作一棵包含 n个结点和n−1条边的树,每条边连接两个结点,且任意两个结点存在一条路径互相可达。树上结点编号为从1到n的连续正整数。</p>
<p>现在有m个玩家,第i个玩家的起点为 $S_i$,终点为$T_i$。每天打卡任务开始时,所有玩家在第0秒同时从自己的起点出发, 以每秒跑一条边的速度, 不间断地沿着最短路径向着自己的终点跑去, 跑到终点后该玩家就算完成了打卡任务。(由于地图是一棵树,所以每个人的路径是唯一的)</p>
<p>小c想知道游戏的活跃度, 所以在每个结点上都放置了一个观察员。在结点j的观察员会选择在第$W_j$秒观察玩家,一个玩家能被这个观察员观察到当且仅当该玩家在第$W_j$秒也理到达了结点j。小C想知道每个观察员会观察到多少人?<br>注意: 我们认为一个玩家到达自己的终点后该玩家就会结束游戏,他不能等待一段时间后再被观察员观察到。即对于把结点jj作为终点的玩家:若他在第$W_j$秒前到达终点,则在结点jj的观察员不能观察到该玩家;若他正好在第$W_j$秒到达终点,则在结点jj的观察员可以观察到这个玩家。</p>
<a id="more"></a>
<p>刚开始拿到这道题直接毫无头绪，但是思路其实挺简单的</p>
<p>首先我们可以把每一条路径拆成<strong>起点到lca的上行路</strong>和<strong>lca到终点的下行路</strong>这两条路径</p>
<p>对于每条上行路，节点i可以看作从i这个点出发向下走$w_i$步，也就是当$dep_s-dep_i=w_i$时，i点会产生贡献</p>
<p>而对于每条下行路，节点i可以看作从i出发向上走$w_i$步，也就是当$len(s,t)-dep_t+dep_i=w_i$，i点会产生贡献</p>
<p>于是我们开一个桶记录一下贡献，再减掉没有产生贡献的部分和减去一次多算了的lca的贡献就可以了</p>
<p>因为每次计算的贡献是以s为起点或以t为终点，而更新贡献的时候是从叶子往上更新的，所以要减掉lca的贡献</p>
<p>然后对于每个人，只有在$dep_s=dep_lca+w_lca$的情况下才会多算lca的答案，减去多算的一次即可</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">player</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s,t,lca,len;</span><br><span class="line">&#125;p[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,w[N + <span class="number">5</span>],ans[N + <span class="number">5</span>],c[N * <span class="number">2</span> + <span class="number">5</span>],s[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> dep[N + <span class="number">5</span>],size[N + <span class="number">5</span>],son[N + <span class="number">5</span>],top[N + <span class="number">5</span>],fa[N + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N + <span class="number">5</span>],sl[N + <span class="number">5</span>],tl[N + <span class="number">5</span>],ll[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">    size[u] = <span class="number">1</span>;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs1(v,u);</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">        <span class="keyword">if</span> (size[v] &gt; size[son[u]])</span><br><span class="line">            son[u] = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[u] = to;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        dfs2(son[u],to);</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v != fa[u] &amp;&amp; v != son[u])</span><br><span class="line">            dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[x]] &lt; dep[top[y]])</span><br><span class="line">            swap(x,y);</span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y])</span><br><span class="line">        swap(x,y);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs3</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> goal = dep[u] + w[u],res = c[goal];</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs3(v);</span><br><span class="line">    &#125;</span><br><span class="line">    c[dep[u]] += s[u];</span><br><span class="line">    ans[u] += c[goal] - res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; sl[u].size();i++)</span><br><span class="line">        c[dep[sl[u][i]]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs4</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> goal = w[u] - dep[u] + N,res = c[goal];</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs4(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; ll[u].size();i++)</span><br><span class="line">        c[ll[u][i] + N]++;</span><br><span class="line">    ans[u] += c[w[u] - dep[u] + N] - res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tl[u].size();i++)</span><br><span class="line">        c[tl[u][i] + N]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        d[u].push_back(v);</span><br><span class="line">        d[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i]);</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">1</span>);        </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].s,&amp;p[i].t);</span><br><span class="line">        p[i].lca = get_lca(p[i].s,p[i].t);</span><br><span class="line">        s[p[i].s]++;</span><br><span class="line">        p[i].len = dep[p[i].s] + dep[p[i].t] - <span class="number">2</span> * dep[p[i].lca];</span><br><span class="line">        sl[p[i].lca].push_back(p[i].s);</span><br><span class="line">        tl[p[i].lca].push_back(p[i].len - dep[p[i].t]);</span><br><span class="line">        ll[p[i].t].push_back(p[i].len - dep[p[i].t]);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs3(<span class="number">1</span>);</span><br><span class="line">    dfs4(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        <span class="keyword">if</span> (dep[p[i].s] == dep[p[i].lca] + w[p[i].lca])</span><br><span class="line">            ans[p[i].lca]--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树上差分 </tag>
            
            <tag> lca </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P2661 信息传递]]></title>
      <url>/2019/09/10/p2661/</url>
      <content type="html"><![CDATA[<p>有 n 个同学（编号为 1 到 n ）正在玩一个信息传递的游戏。在游戏里每人都有一个固定的信息传递对象，其中，编号为 i 的同学的信息传递对象是编号为$T_i$的同学。</p>
<p>游戏开始时，每人都只知道自己的生日。之后每一轮中，所有人会同时将自己当前所知的生日信息告诉各自的信息传递对象（注意：可能有人可以从若干人那里获取信息， 但是每人只会把信息告诉一个人，即自己的信息传递对象）。当有人从别人口中得知自己的生日时，游戏结束。请问该游戏一共可以进行几轮？</p>
<a id="more"></a>
<p>自己直接被降智，刚开始竟然没想出来</p>
<p>其实就是个并查集求最小环</p>
<p>果然不做做noip题就变傻了= =</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a,fa[N + <span class="number">5</span>],ans,cnt;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">if</span> (x == fa[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    ans = N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">        <span class="keyword">if</span> (find(a) == i)</span><br><span class="line">            ans = min(ans,cnt);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            fa[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P2664 树上游戏]]></title>
      <url>/2019/09/08/p2664/</url>
      <content type="html"><![CDATA[<p>lrb有一棵树，树的每个节点有个颜色。给一个长度为n的颜色序列，定义$s(i,j)$为$i$到$j$的颜色数量。以及</p>
<script type="math/tex; mode=display">sum_i = \sum_{j=1}^{n}s(i,j)</script><p>现在他想让你求出所有的$sum[i]$</p>
<a id="more"></a>
<p>这题真是难，点分治神题</p>
<p>我们考虑一个性质，对于一个点$i$，如果它的颜色在到根的路径中是第一次出现，那么对于和$i$不在一个子树的点$j$，对$j$都有$i$的子树大小$size_i$的贡献</p>
<p>然后有了这个性质，就好做了</p>
<p>找完重心后预处理出来实际的$size$，用$sum$来记录所有点的贡献，$s$是这个颜色的贡献</p>
<p>而我们不是用点去更新答案，是用颜色来更新答案，所以要枚举子树，去掉这个子树的贡献来统计答案</p>
<p>于是再有$X$表示除了这个子树的点数和，$co$表示这个点到根的颜色数</p>
<p>然后记录下这个点到根的所有颜色的$s$的和，$s$是要被减去的</p>
<p>那么$ans+=sum-s+co\times X$，然后单独更新一下根就是$ans+=sum-s_{c_{rt}}+size_{rt}$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,c[N + <span class="number">5</span>],size[N + <span class="number">5</span>],maxp[N + <span class="number">5</span>],rt,su,vis[N + <span class="number">5</span>],cnt[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum,s[N + <span class="number">5</span>],ros,X,ans[N + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u] = <span class="number">1</span>;</span><br><span class="line">    maxp[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        get_rt(v,u);</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">        maxp[u] = max(maxp[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxp[u] = max(maxp[u],su - size[u]);</span><br><span class="line">    <span class="keyword">if</span> (maxp[u] &lt; maxp[rt])</span><br><span class="line">        rt = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_size</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v])  </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        get_size(v,u);</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[c[u]]++;</span><br><span class="line">    <span class="keyword">if</span> (cnt[c[u]] == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s[c[u]] += w * size[u];</span><br><span class="line">        sum += w * size[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!cnt[c[rt]])</span><br><span class="line">        ros += w;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[c[u]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> co,<span class="keyword">int</span> su)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt[c[u]]++;</span><br><span class="line">    <span class="keyword">if</span> (cnt[c[u]] == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        co++;</span><br><span class="line">        su += s[c[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    ans[u] += sum - su + co * X;</span><br><span class="line">    <span class="keyword">if</span> (!cnt[c[rt]])</span><br><span class="line">        ans[u] += ros;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v])  </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        upd(v,u,co,su);</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[c[u]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u,<span class="number">-1</span>);</span><br><span class="line">        X = size[u] - size[v];</span><br><span class="line">        upd(v,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        dfs(v,u,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans[u] += sum - s[c[u]] + size[u];</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    ros = <span class="number">1</span>;</span><br><span class="line">    get_size(u,<span class="number">0</span>);</span><br><span class="line">    calc(u);</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        maxp[<span class="number">0</span>] = N;</span><br><span class="line">        su = size[v];</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        get_rt(v,<span class="number">0</span>);</span><br><span class="line">        solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i]);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        d[u].push_back(v);</span><br><span class="line">        d[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    su = n;</span><br><span class="line">    maxp[<span class="number">0</span>] = N;</span><br><span class="line">    get_rt(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    get_size(rt,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P4178 Tree]]></title>
      <url>/2019/09/05/p4178/</url>
      <content type="html"><![CDATA[<p>给你一棵树,以及这棵树上边的距离.问有多少对点它们两者间的距离小于等于K</p>
<a id="more"></a>
<p>点分治</p>
<p>我们如果开桶记录路径长度的数，那么需要维护一个单点加和前缀和，用树状数组维护就行了</p>
<p>不过还有种排序双指针的方法，复杂度一样，懒得写了qwq</p>
<p>复杂度$O(nlog^2n)$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">4e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,k,rt,maxp[N + <span class="number">5</span>],size[N + <span class="number">5</span>],su,vis[N + <span class="number">5</span>],ans,c[INF + <span class="number">5</span>],s[N + <span class="number">5</span>],num,cnt,now[N + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;node&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;x &lt;= k;x += lowbit(x))</span><br><span class="line">        c[x] += s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;x;x -= lowbit(x))</span><br><span class="line">        ans += c[x];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    maxp[u] = <span class="number">0</span>;</span><br><span class="line">    size[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        get_rt(v,u);</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">        maxp[u] = max(maxp[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxp[u] = max(maxp[u],su - size[u]);</span><br><span class="line">    <span class="keyword">if</span> (maxp[u] &lt; maxp[rt])</span><br><span class="line">        rt = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s &gt; k)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    now[++cnt] = s;</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to,w = (*it).cost;</span><br><span class="line">        <span class="keyword">if</span> (vis[v] || v == fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        get_dis(v,u,s + w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to,w = (*it).cost;</span><br><span class="line">        <span class="keyword">if</span> (vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        get_dis(v,u,w);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i++)</span><br><span class="line">            ans += query(k - now[i]) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s[++num] = now[i];</span><br><span class="line">            add(now[i],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= num;i++)</span><br><span class="line">        add(s[i],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    calc(u);</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        su = size[v];</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        maxp[<span class="number">0</span>] = INF;</span><br><span class="line">        get_rt(v,<span class="number">0</span>);</span><br><span class="line">        solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        d[u].push_back((node)&#123;v,w&#125;);</span><br><span class="line">        d[v].push_back((node)&#123;u,w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">    maxp[<span class="number">0</span>] = INF;</span><br><span class="line">    su = n;</span><br><span class="line">    get_rt(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 点分治 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P2634 [国家集训队]聪聪可可]]></title>
      <url>/2019/09/04/p2634/</url>
      <content type="html"><![CDATA[<p>聪聪和可可是兄弟俩，他们俩经常为了一些琐事打起来，例如家中只剩下最后一根冰棍而两人都想吃、两个人都想玩儿电脑（可是他们家只有一台电脑）……遇到这种问题，一般情况下石头剪刀布就好了，可是他们已经玩儿腻了这种低智商的游戏。</p>
<p>他们的爸爸快被他们的争吵烦死了，所以他发明了一个新游戏：由爸爸在纸上画n个“点”，并用n-1条“边”把这n个“点”恰好连通（其实这就是一棵树）。并且每条“边”上都有一个数。接下来由聪聪和可可分别随即选一个点（当然他们选点时是看不到这棵树的），如果两个点之间所有边上数的和加起来恰好是3的倍数，则判聪聪赢，否则可可赢。</p>
<p>聪聪非常爱思考问题，在每次游戏后都会仔细研究这棵树，希望知道对于这张图自己的获胜概率是多少。现请你帮忙求出这个值以验证聪聪的答案是否正确。</p>
<a id="more"></a>
<p>一看就是点分治，注意下处理答案的时候就好了</p>
<p>每次处理出来这个子树的路径长度模$3$后的长度的个数$s_0,s_1,s_2$，再和之前累加的值$mp_0,mp_1,mp_2$更新答案</p>
<p>根自己到自己也就是$mp_0$刚开始赋为$1$，这样便于统计这个点到根的答案</p>
<p>最后加上每个点自己到自己的方案数也就是加上$n$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,vis[N + <span class="number">5</span>],dis[N + <span class="number">5</span>],num,su,cnt,rt,size[N + <span class="number">5</span>],maxp[N + <span class="number">5</span>],s[<span class="number">5</span>],ans,mp[<span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span> &lt;node&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u] = <span class="number">1</span>;</span><br><span class="line">    maxp[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        get_rt(v,u);</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">        maxp[u] = max(maxp[u],size[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxp[u] = max(maxp[u],su - size[u]);</span><br><span class="line">    <span class="keyword">if</span> (maxp[u] &lt; maxp[rt])</span><br><span class="line">        rt = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[dis[u]]++;</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to,w = (*it).cost;</span><br><span class="line">        <span class="keyword">if</span> (v == fa || vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dis[v] = (dis[u] + w) % <span class="number">3</span>;</span><br><span class="line">        get_dis(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to,w = (*it).cost;</span><br><span class="line">        <span class="keyword">if</span> (vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dis[v] = w % <span class="number">3</span>;</span><br><span class="line">        s[<span class="number">0</span>] = s[<span class="number">1</span>] = s[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        get_dis(v,u);</span><br><span class="line">        ans += (mp[<span class="number">0</span>] * s[<span class="number">0</span>] + mp[<span class="number">1</span>] * s[<span class="number">2</span>] + mp[<span class="number">2</span>] * s[<span class="number">1</span>]) * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">2</span>;i++)</span><br><span class="line">            mp[i] += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">2</span>;i++)  </span><br><span class="line">        mp[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    calc(u);</span><br><span class="line">    <span class="built_in">vector</span> &lt;node&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it).to;</span><br><span class="line">        <span class="keyword">if</span> (vis[v])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        su = size[v];</span><br><span class="line">        rt = <span class="number">0</span>;</span><br><span class="line">        maxp[<span class="number">0</span>] = size[v];</span><br><span class="line">        get_rt(v,<span class="number">0</span>);</span><br><span class="line">        solve(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        d[u].push_back((node)&#123;v,w&#125;);</span><br><span class="line">        d[v].push_back((node)&#123;u,w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    su = n;</span><br><span class="line">    maxp[rt] = n;</span><br><span class="line">    get_rt(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    solve(rt);</span><br><span class="line">    ans += n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d/%d\n"</span>,ans / gcd(ans,n * n),n * n / gcd(ans,n * n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cdq分治和整体二分学习笔记]]></title>
      <url>/2019/09/01/cdqfzztef/</url>
      <content type="html"><![CDATA[<p>终于学完了cdq分治和整体二分，写篇文章总结下吧qwq</p>
<a id="more"></a>
<h2 id="cdq分治"><a href="#cdq分治" class="headerlink" title="cdq分治"></a>cdq分治</h2><p>cdq分治是用来解决经典的偏序问题</p>
<p>其实归并排序求逆序对就是求偏序问题的做法，当合并左右两个有序的序列时，两个指针分别移动，当右边比左边小时就更新答案</p>
<p>那么我们回到三维偏序问题，也就是求所有满足$a_i&lt;a_j,b_i&lt;b_j,c_i&lt;c_j$的个数</p>
<p>首先我们可以对$a$这一维排序，保证第一维有序</p>
<p>然后对$b$这一维归并，归并的时候将$c$这维加入树状数组，归并完之后更新答案查树状数组就好了</p>
<p>复杂度$O(nlog^2n)$</p>
<p>洛谷板子题的代码，因为有重复元素，并且还有$=$，所以还要去重</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c,w,f;</span><br><span class="line">&#125;d[N + <span class="number">5</span>],t[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,K,cnt,c[N * <span class="number">2</span> + <span class="number">5</span>],ans[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.a == y.a)</span><br><span class="line">        <span class="keyword">if</span> (x.b == y.b)</span><br><span class="line">            <span class="keyword">return</span> x.c &lt; y.c;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> x.b &lt; y.b;</span><br><span class="line">    <span class="keyword">return</span> x.a &lt; y.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k;i &lt;= K;i += lowbit(i))</span><br><span class="line">        c[i] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k;i;i -= lowbit(i))</span><br><span class="line">        ans += c[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq_</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq_(l,mid);</span><br><span class="line">    cdq_(mid + <span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">int</span> ll = l,it = l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = mid + <span class="number">1</span>;j &lt;= r;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (ll &lt;= mid &amp;&amp; d[ll].b &lt;= d[j].b)</span><br><span class="line">        &#123;</span><br><span class="line">            add(d[ll].c,d[ll].w);</span><br><span class="line">            t[it++] = d[ll];</span><br><span class="line">            ll++;</span><br><span class="line">        &#125;</span><br><span class="line">        d[j].f += query(d[j].c);</span><br><span class="line">        t[it++] = d[j];  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ll;i &lt;= mid;i++)</span><br><span class="line">        t[it++] = d[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l;i &lt; ll;i++)</span><br><span class="line">        add(d[i].c,-d[i].w);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l;i &lt; it;i++)</span><br><span class="line">        d[i] = t[i];    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;K);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;d[i].a,&amp;d[i].b,&amp;d[i].c);</span><br><span class="line">        d[i].w = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(d + <span class="number">1</span>,d + n + <span class="number">1</span>,cmp);</span><br><span class="line">    cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">if</span> (d[cnt].a == d[i].a &amp;&amp; d[cnt].b == d[i].b &amp;&amp; d[cnt].c == d[i].c)</span><br><span class="line">            d[cnt].w++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            d[++cnt] = d[i];</span><br><span class="line">    cdq_(<span class="number">1</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i++)</span><br><span class="line">        ans[d[i].f + d[i].w - <span class="number">1</span>] += d[i].w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后cdq分治的另一重大用处就是优化dp</p>
<p>当我们求出转移方程之后，如果转移条件满足偏序的性质，那么就可以用cdq分治来优化</p>
<p>拿道题来说</p>
<p>[USACO15FEB]牛跳房子（金）Cow Hopscotch (Gold)</p>
<p>就像人类喜欢跳格子游戏一样，FJ的奶牛们发明了一种新的跳格子游戏。虽然这种接近一吨的笨拙的动物玩跳格子游戏几乎总是不愉快地结束，但是这并没有阻止奶牛们在每天下午参加跳格子游戏</p>
<p>游戏在一个R*C的网格上进行，每个格子有一个取值在1-k之间的整数标号，奶牛开始在左上角的格子，目的是通过若干次跳跃后到达右下角的格子，当且仅当格子A和格子B满足如下条件时能从格子A跳到格子B：</p>
<p>1.B格子在A格子的严格右方(B的列号严格大于A的列号)</p>
<p>2.B格子在A格子的严格下方(B的行号严格大于A的行号)</p>
<p>3.B格子的标号和A格子的标号不同</p>
<p>请你帮助奶牛计算出从左上角的格子到右下角的格子一共有多少种不同的方案</p>
<p>首先我们可以设$dp_{ij}$表示走到坐标为$(i,j)$这个格子的方案数</p>
<p>然后很快的写出状态转移方程：$dp_{ij} = \sum_{k=1}^{i-1}\sum_{h=1}^{j-1} dp_{kh} (a_{ij}=a_{kh})$</p>
<p>但是这样是$O(n^4)$的，于是考虑优化</p>
<p>可以对列分治然后按行循环，先更新左区间再更新右区间，每次更新答案的时候减掉重复的标号数就可以了</p>
<p>复杂度$O(n^2log^2n)$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">750</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,a[N + <span class="number">5</span>][N + <span class="number">5</span>],f[N + <span class="number">5</span>][N + <span class="number">5</span>],s[N * N + <span class="number">5</span>],t[N * N + <span class="number">5</span>],ti;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq_</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    cdq_(l,mid);    </span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    ti++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = r;i &gt;= mid + <span class="number">1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[a[i][j]] &lt; ti)</span><br><span class="line">                t[a[i][j]] = ti,s[a[i][j]] = <span class="number">0</span>;</span><br><span class="line">            f[i][j] = ((f[i][j] + tot - s[a[i][j]]) % p + p) % p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l;i &lt;= mid;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[a[i][j]] &lt; ti)</span><br><span class="line">                t[a[i][j]] = ti,s[a[i][j]] = <span class="number">0</span>;</span><br><span class="line">            s[a[i][j]] = (s[a[i][j]] + f[i][j]) % p;</span><br><span class="line">            tot = (tot + f[i][j]) % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cdq_(mid + <span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    cdq_(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[n][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="整体二分"><a href="#整体二分" class="headerlink" title="整体二分"></a>整体二分</h2><p>整体二分是一种多次询问且对于答案可二分的离线做法</p>
<p>主要思想是将操作离线下来，全部对其二分</p>
<p>一般复杂度为$O(nlog^2n)$，加一些奇技淫巧可以到$(nlogn)$</p>
<p>这个做法支持所有答案可以二分，不强制在线且没有区间加的数据结构题</p>
<p>我们拿区间第k大来说，用$solve(l,r,L,R)$表示$L~R$的询问答案在$[l,r]$范围内</p>
<p>那么取$mid=l+r&gt;&gt;1$，如果要加的数比$mid$小，那么就加进去，遇到询问直接查前缀和排名（用树状数组维护就可以）</p>
<p>这样一直二分直到$l=r$就是$L~R$询问的答案了</p>
<p>我是把询问和点揉在一起二分的，常数可能大点qwq</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 5000</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Q</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,typ,id,k;</span><br><span class="line">&#125;q[N + M + <span class="number">5</span>],q1[N + M + <span class="number">5</span>],q2[N + M + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,a[N + <span class="number">5</span>],ans[N + <span class="number">5</span>],c[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;x &lt;= n;x += lowbit(x))</span><br><span class="line">        c[x] += z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;x;x -= lowbit(x))</span><br><span class="line">        ans += c[x];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt; R)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L;i &lt;= R;i++)</span><br><span class="line">            <span class="keyword">if</span> (q[i].typ == <span class="number">2</span>)</span><br><span class="line">                ans[q[i].id] = l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>,cnt1 = <span class="number">0</span>,cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L;i &lt;= R;i++)</span><br><span class="line">        <span class="keyword">if</span> (q[i].typ == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[i].l &lt;= mid)</span><br><span class="line">            &#123;</span><br><span class="line">                q1[++cnt1] = q[i];</span><br><span class="line">                add(q[i].id,<span class="number">1</span>); </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                q2[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = query(q[i].r) - query(q[i].l - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (q[i].k &lt;= x)</span><br><span class="line">                q2[++cnt2] = q[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                q[i].k -= x;</span><br><span class="line">                q1[++cnt1] = q[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt1;i++)</span><br><span class="line">        <span class="keyword">if</span> (q1[i].typ == <span class="number">1</span>)</span><br><span class="line">            add(q1[i].id,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L;i &lt;= L + cnt1 - <span class="number">1</span>;i++)</span><br><span class="line">        q[i] = q1[i - L + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L + cnt1;i &lt;= R;i++)</span><br><span class="line">        q[i] = q2[i - L - cnt1 + <span class="number">1</span>];</span><br><span class="line">    solve(l,mid,L,L + cnt1 - <span class="number">1</span>);</span><br><span class="line">    solve(mid + <span class="number">1</span>,r,L + cnt1,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        q[++cnt] = (Q)&#123;a[i],<span class="number">1</span>,<span class="number">1</span>,i,<span class="number">0</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l,r,k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line">        q[++cnt] = (Q)&#123;l,r,<span class="number">2</span>,i,k&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(-INF,INF,<span class="number">1</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然如果有单点修改也是很容易的，我们直接把这个修改操作当成这个位置原来的数$-1$，改成的新数$+1$就好了</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 整体二分 </tag>
            
            <tag> cdq分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CF1017G The Tree]]></title>
      <url>/2019/08/27/cf1017g/</url>
      <content type="html"><![CDATA[<p>给定一棵树，维护以下3个操作：</p>
<p>1：1 x表示如果节点x为白色，则将其染黑。否则对这个节点的所有儿子递归进行相同操作</p>
<p>2：2 x表示将以节点x为root的子树染白。</p>
<p>3：3 x表示查询节点x的颜色</p>
<a id="more"></a>
<p>一道很好的树剖题</p>
<p>首先可以把1操作看作单点加$1$，于是我们把每个节点初始赋为$-1$，查询颜色只要看它开始到根的最大后缀就可以了</p>
<p>但是2操作如果直接清$-1$可能它的父亲对子树有影响，所以我们修改完之后把$x$点的权值减去答案$+1$</p>
<p>2操作顺序写反了，然后还对拍什么的调了超久= =<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2e7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zrt k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yrt k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,size[N + <span class="number">5</span>],fa[N + <span class="number">5</span>],son[N + <span class="number">5</span>],dep[N + <span class="number">5</span>],top[N + <span class="number">5</span>],dfn[N + <span class="number">5</span>],dfn_cnt;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u] = <span class="number">1</span>;</span><br><span class="line">    dep[u] = dep[fa[u]] + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        dfs1(v);</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">        <span class="keyword">if</span> (size[v] &gt; size[son[u]])</span><br><span class="line">            son[u] = v; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[u] = to;</span><br><span class="line">    dfn[u] = ++dfn_cnt;</span><br><span class="line">    <span class="keyword">if</span> (son[u])</span><br><span class="line">        dfs2(son[u],to);</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = d[u].begin();it != d[u].end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = (*it);</span><br><span class="line">        <span class="keyword">if</span> (v != son[u])</span><br><span class="line">            dfs2(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ans,su,ct;</span><br><span class="line">    node ()</span><br><span class="line">    &#123;</span><br><span class="line">        su = ct = <span class="number">0</span>;</span><br><span class="line">        ans = -INF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node s[N * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="function">node <span class="title">upd</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node k;</span><br><span class="line">        k.ans = max(y.ans,y.su + x.ans);</span><br><span class="line">        k.su = x.su + y.su;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].su = s[k].ans = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(zrt,l,mid);</span><br><span class="line">        build(yrt,mid + <span class="number">1</span>,r);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cha</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].su = (r - l + <span class="number">1</span>) * z;</span><br><span class="line">        s[k].ans = z;</span><br><span class="line">        s[k].ct = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[k].ct != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cha(zrt,l,mid,s[k].ct);</span><br><span class="line">            cha(yrt,mid + <span class="number">1</span>,r,s[k].ct);</span><br><span class="line">            s[k].ct = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].su += z;</span><br><span class="line">            s[k].ans += z;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">            add(zrt,l,mid,x,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            add(yrt,mid + <span class="number">1</span>,r,x,z);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">        &#123;</span><br><span class="line">            cha(k,l,r,z);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            change(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                change(zrt,l,mid,x,y,z);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                change(zrt,l,mid,x,y,z),change(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">            <span class="keyword">return</span> s[k];</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> query(yrt,mid + <span class="number">1</span>,r,x,y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                <span class="keyword">return</span> query(zrt,l,mid,x,y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> upd(query(zrt,l,mid,x,y),query(yrt,mid + <span class="number">1</span>,r,x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node k;</span><br><span class="line">        <span class="keyword">while</span> (top[x] != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = upd(query(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[x]],dfn[x]),k);</span><br><span class="line">            x = fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        k = upd(query(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,dfn[x]),k);</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;u);</span><br><span class="line">        d[u].push_back(i);</span><br><span class="line">        fa[i] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    node k,x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">1</span>)</span><br><span class="line">            tree.add(<span class="number">1</span>,<span class="number">1</span>,n,dfn[v],<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (u == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                tree.change(<span class="number">1</span>,<span class="number">1</span>,n,dfn[v],dfn[v] + size[v] - <span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                x = tree.query(v);                </span><br><span class="line">                tree.add(<span class="number">1</span>,<span class="number">1</span>,n,dfn[v],-x.ans - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k = tree.query(v);</span><br><span class="line">                <span class="keyword">if</span> (k.ans &gt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"black\n"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"white\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SP3266 KQUERY - K-query]]></title>
      <url>/2019/08/25/sp3266/</url>
      <content type="html"><![CDATA[<p>给定一个长度为n的序列a[1]到a[n]</p>
<p>q次询问:给定i，j，k，求出a[i]到a[j]中大于k的个数</p>
<a id="more"></a>
<p>主席树裸题，但是懒得写</p>
<p>刚开始写了个莫队+树状数组，复杂度是没问题的$O(n\sqrt{q}logn)$，但是wa了，也懒得调了</p>
<p>然后还有种离线做法</p>
<p>将询问按$k$降序排序，对$a$降序排序</p>
<p>我们用一个指针$l$，如果$l$没到头并且$a[l] &gt; k$，那么就往后移指针，并且把对应位置单点加$1$，答案就转化为了区间查询和</p>
<p>因为$l$从头到尾最多移一次，所以时间复杂度$O(nlogn)$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">2e5</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zrt k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yrt k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ad</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id,v;</span><br><span class="line">&#125;a[N + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,k,id;</span><br><span class="line">&#125;q[M + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,ans[M + <span class="number">5</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp1</span><span class="params">(ad x,ad y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.v &gt; y.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp2</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.k &gt; y.k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> su,tag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    dd s[N * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].su = s[zrt].su + s[yrt].su;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].su += z;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">            add(zrt,l,mid,x,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            add(yrt,mid + <span class="number">1</span>,r,x,z);</span><br><span class="line">        pushup(k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">            <span class="keyword">return</span> s[k].su;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> query(yrt,mid + <span class="number">1</span>,r,x,y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                <span class="keyword">return</span> query(zrt,l,mid,x,y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> query(zrt,l,mid,x,y) + query(yrt,mid + <span class="number">1</span>,r,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].v);</span><br><span class="line">        a[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;q[i].l,&amp;q[i].r,&amp;q[i].k);</span><br><span class="line">        q[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>,a + n + <span class="number">1</span>,cmp1);</span><br><span class="line">    sort(q + <span class="number">1</span>,q + m + <span class="number">1</span>,cmp2);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= n &amp;&amp; a[l].v &gt; q[i].k)</span><br><span class="line">        &#123;</span><br><span class="line">            tree.add(<span class="number">1</span>,<span class="number">1</span>,n,a[l].id,<span class="number">1</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[q[i].id] = tree.query(<span class="number">1</span>,<span class="number">1</span>,n,q[i].l,q[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P1527 [国家集训队]矩阵乘法]]></title>
      <url>/2019/08/22/p1527/</url>
      <content type="html"><![CDATA[<p>矩阵第k小</p>
<p>一道练习整体二分的比较好的题</p>
<a id="more"></a>
<p>这道题把序列查询区间第$k$小搬到了矩阵上，但是仍然满足二分性质，所以我们还是可以整体二分</p>
<p>而我们沿用序列上的做法，把点和询问都离线下来，揉在一起整体二分</p>
<p>唯一不一样的地方就是需要二维树状数组，这个很好理解吧qwq</p>
<p>复杂度$O(Qlog^3n)$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">6e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N2 = <span class="number">250000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1,y1,x2,y2,k,id;</span><br><span class="line">&#125;q[M + N2 + <span class="number">5</span>],q1[M + N2 + <span class="number">5</span>],q2[M + N2 + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,a[N + <span class="number">5</span>][N + <span class="number">5</span>],ans[M + <span class="number">5</span>],c[N + <span class="number">5</span>][N + <span class="number">5</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x;i &lt;= n;i += lowbit(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y;j &lt;= n;j += lowbit(j))</span><br><span class="line">            c[i][j] += s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x;i;i -= lowbit(i))</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = y;j;j -= lowbit(j))</span><br><span class="line">            ans += c[i][j];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query_sum</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> query(x2,y2) - query(x1 - <span class="number">1</span>,y2) - query(x2,y1 - <span class="number">1</span>) + query(x1 - <span class="number">1</span>,y1 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &gt; R)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L;i &lt;= R;i++)</span><br><span class="line">            <span class="keyword">if</span> (q[i].id)</span><br><span class="line">                ans[q[i].id] = l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>,cnt1 = <span class="number">0</span>,cnt2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L;i &lt;= R;i++)</span><br><span class="line">        <span class="keyword">if</span> (q[i].id == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[i].k &lt;= mid)</span><br><span class="line">            &#123;</span><br><span class="line">                add(q[i].x1,q[i].y1,<span class="number">1</span>);</span><br><span class="line">                q1[++cnt1] = q[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                q2[++cnt2] = q[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = query_sum(q[i].x1,q[i].y1,q[i].x2,q[i].y2);</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= q[i].k)</span><br><span class="line">                q1[++cnt1] = q[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                q[i].k -= x;</span><br><span class="line">                q2[++cnt2] = q[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt1;i++)</span><br><span class="line">        <span class="keyword">if</span> (q1[i].id == <span class="number">0</span>)</span><br><span class="line">            add(q1[i].x1,q1[i].y1,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L;i &lt;= L + cnt1 - <span class="number">1</span>;i++)</span><br><span class="line">        q[i] = q1[i - L + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L + cnt1;i &lt;= R;i++)</span><br><span class="line">        q[i] = q2[i - L - cnt1 + <span class="number">1</span>];</span><br><span class="line">    solve(l,mid,L,L + cnt1 - <span class="number">1</span>);</span><br><span class="line">    solve(mid + <span class="number">1</span>,r,L + cnt1,R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">            q[++cnt] = (node)&#123;i,j,<span class="number">0</span>,<span class="number">0</span>,a[i][j],<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;q[cnt].x1,&amp;q[cnt].y1,&amp;q[cnt].x2,&amp;q[cnt].y2,&amp;q[cnt].k);</span><br><span class="line">        q[cnt].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(<span class="number">0</span>,INF,<span class="number">1</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 整体二分 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lrz数据结构水题赛题解]]></title>
      <url>/2019/08/21/sjjgbs/</url>
      <content type="html"><![CDATA[<p>lrz的数据结构比赛</p>
<a id="more"></a>
<p>似乎没人打(⊙︿⊙)</p>
<p>但是题解不能咕QAQ</p>
<h2 id="T1-膜犇犇"><a href="#T1-膜犇犇" class="headerlink" title="T1 膜犇犇"></a>T1 膜犇犇</h2><p>这题真的是道签到题W(￣_￣)W</p>
<p>让你每次求一个区间$[l,r]$里包含数字种数最多的子段的最短长度</p>
<p>$O(n^2m)$的暴力是很好写的，每次枚举所有子段</p>
<p>然后优化一下，考虑二分这个最短长度，这样复杂度降到了$O(nlognm)$，可以拿到$50$分的好成绩</p>
<p>这样子就没法再优化了，那换种思路，我们想想这个子段的性质</p>
<p>首先最坏情况是这个区间所有的数都不一样，那答案就是整个区间</p>
<p>然后如果这个区间有一样的数，我们就往里缩区间（这里的缩区间并不是贪心的缩，贪心的是错的）</p>
<p>先把$[l,r]$这个区间数字种数求出来，这个很好求，值域很小，连离散化都不用，开个桶就可以了，<del>当然你想写主席树我也不拦你</del></p>
<p>我们用双指针，$l$指针指向区间左端点，往右移$r$指针，当我们移到一个点时这个区间的数字种数等于询问的区间的数字种数，那么就可以更新答案，然后再往右移$l$指针</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N + <span class="number">5</span>],cnt[N + <span class="number">5</span>],num;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> opt,l,r,ll,rr,num,ans,now;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">        ans = N + <span class="number">5</span>;</span><br><span class="line">        now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l;j &lt;= r;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[a[j]]++;</span><br><span class="line">            <span class="keyword">if</span> (cnt[a[j]] == <span class="number">1</span>)</span><br><span class="line">                num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">        ll = l;</span><br><span class="line">        rr = l;</span><br><span class="line">        <span class="keyword">while</span> (ll &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (now &lt; num &amp;&amp; rr &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt[a[rr]]++;</span><br><span class="line">                <span class="keyword">if</span> (cnt[a[rr]] == <span class="number">1</span>)</span><br><span class="line">                    now++;</span><br><span class="line">                rr++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (now == num)</span><br><span class="line">                ans = min(ans,rr - ll);</span><br><span class="line">            cnt[a[ll]]--;</span><br><span class="line">            <span class="keyword">if</span> (cnt[a[ll]] == <span class="number">0</span>)</span><br><span class="line">                now--;</span><br><span class="line">            ll++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="T2-强迫症"><a href="#T2-强迫症" class="headerlink" title="T2 强迫症"></a>T2 强迫症</h2><p>维护一个数据结构支持：区间加，区间求和，区间求$max$，区间赋值$max$</p>
<p>这个题其实是吉司机线段树的板子题</p>
<p>先说下其他的能拿分的做法吧</p>
<p>用线段树乱搞，维护一个区间最大值和最小值，和要修改的值比较一下跳过区间，在随机数据下复杂的显得非常优秀，可以拿$20$分</p>
<p>分块，做法还蛮多的，但是$O(n\sqrt{n})$似乎有点困难（被Juan_feng秒了），可以拿$40$分</p>
<p>我们注意到前三个操作用线段树是很好维护的，瓶颈在于第四个操作</p>
<p>那么考虑维护一个区间最小值$mi$，区间次小值$cmi$，区间最小值的出现次数$t$，对于和一个数$x$取$max$有三种可能：</p>
<blockquote>
<p>$x\le mi$，说明对这个区间没有贡献</p>
<p>$mi&lt;x&lt;cmi$，说明只有$mi$被修改，拿$t$和$x - mi$修改区间和，更新区间最大值即可</p>
<p>$x\le cmi$，这样子没法直接求，那么我们继续递归它的左右儿子，最终一定会到前两种情况并停止</p>
</blockquote>
<p>注意下先下放加法标记再下放修改标记就好了</p>
<p>复杂度$O(nlog^2n)$，证明的话需要用到势能和均摊，蒟蒻太菜不会证，还是去看吉司机的证明吧（吉司机证的$O(nlogn)$是假的）</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zrt k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yrt k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 9999999999</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> su,cmi,at,mi,ma,tag;</span><br><span class="line">    node ()</span><br><span class="line">    &#123;</span><br><span class="line">        ma = at = mi = t = su = tag = <span class="number">0</span>;</span><br><span class="line">        cmi = INF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node s[N * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="function">node <span class="title">upd</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node k;</span><br><span class="line">        k.su = x.su + y.su;</span><br><span class="line">        k.ma = max(x.ma,y.ma);</span><br><span class="line">        <span class="keyword">if</span> (x.mi == y.mi)</span><br><span class="line">        &#123;</span><br><span class="line">            k.mi = x.mi;</span><br><span class="line">            k.t = x.t + y.t;</span><br><span class="line">            k.cmi = min(x.cmi,y.cmi);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (x.mi &lt; y.mi)</span><br><span class="line">            &#123;</span><br><span class="line">                k.mi = x.mi;</span><br><span class="line">                k.t = x.t;</span><br><span class="line">                k.cmi = min(x.cmi,y.mi);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                k.mi = y.mi;</span><br><span class="line">                k.t = y.t;</span><br><span class="line">                k.cmi = min(x.mi,y.cmi);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].mi = s[k].ma = s[k].su = a[l];</span><br><span class="line">            s[k].cmi = INF;</span><br><span class="line">            s[k].t = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(zrt,l,mid);</span><br><span class="line">        build(yrt,mid + <span class="number">1</span>,r);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cha</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (z &lt;= s[k].mi)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (z &lt;= s[k].cmi)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].su += (<span class="keyword">long</span> <span class="keyword">long</span>)s[k].t * (z - s[k].mi);            </span><br><span class="line">            s[k].mi = z;</span><br><span class="line">            s[k].ma = max(s[k].ma,z);</span><br><span class="line">            s[k].tag = max(z,s[k].tag);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jia</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].su += z * (<span class="keyword">long</span> <span class="keyword">long</span>)(r - l + <span class="number">1</span>);</span><br><span class="line">        s[k].ma += z;</span><br><span class="line">        s[k].mi += z;</span><br><span class="line">        s[k].cmi += z;</span><br><span class="line">        s[k].at += z;</span><br><span class="line">        <span class="keyword">if</span> (s[k].tag)</span><br><span class="line">            s[k].tag += z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[k].at)</span><br><span class="line">        &#123;</span><br><span class="line">            jia(zrt,l,mid,s[k].at);</span><br><span class="line">            jia(yrt,mid + <span class="number">1</span>,r,s[k].at);</span><br><span class="line">            s[k].at = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[k].tag)</span><br><span class="line">        &#123;</span><br><span class="line">            cha(zrt,l,mid,s[k].tag);</span><br><span class="line">            cha(yrt,mid + <span class="number">1</span>,r,s[k].tag);</span><br><span class="line">            s[k].tag = <span class="number">0</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cha(k,l,r,(<span class="keyword">long</span> <span class="keyword">long</span>)z))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            pushdown(k,l,r,mid);</span><br><span class="line">            change(zrt,l,mid,x,y,z);</span><br><span class="line">            change(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">            s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            change(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                change(zrt,l,mid,x,y,z);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                change(zrt,l,mid,x,y,z),change(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">        &#123;</span><br><span class="line">            jia(k,l,r,(<span class="keyword">long</span> <span class="keyword">long</span>)z);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            add(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                add(zrt,l,mid,x,y,z);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                add(zrt,l,mid,x,y,z),add(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">            <span class="keyword">return</span> s[k];</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> query(yrt,mid + <span class="number">1</span>,r,x,y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                <span class="keyword">return</span> query(zrt,l,mid,x,y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> upd(query(zrt,l,mid,x,y),query(yrt,mid + <span class="number">1</span>,r,x,y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> opt,l,r,z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">            tree.add(<span class="number">1</span>,<span class="number">1</span>,n,l,r,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (opt == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">                tree.change(<span class="number">1</span>,<span class="number">1</span>,n,l,r,z);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (opt == <span class="number">3</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,tree.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r).su);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,tree.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r).ma);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="T3-机房"><a href="#T3-机房" class="headerlink" title="T3 机房"></a>T3 机房</h2><p>题意：有两个数组$A,B$，每次可以在$A$上区间加，在$B$上加对应$a_i\times x$，询问$B$的区间和</p>
<p>直接暴力，复杂度$O(nm)$，有$20$分</p>
<p>其实这个东西仍然是可以用线段树维护的，分别维护$A,B$的区间和，那么维护的就是$\sum b_i+w\times\sum a_i + \Delta$，$\Delta$是对$A$区间加之后产生的影响</p>
<p>对于每次区间对$B$加$w$，直接更新$w\times\sum a_i$，而对$A$区间加$t$，带入式子就是$t\times w$，在线段树上多维护几个标记就好了</p>
<p>复杂度$O(nlogn)$，常数很大</p>
<p>当然还有一种线段树维护$3\times 3$矩阵的操作，这样子常数更大，过不去</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zrt k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yrt k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p = <span class="number">1e9</span> + <span class="number">7</span>,a[N + <span class="number">5</span>],t[N + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ft,at,nt,su,sut;</span><br><span class="line">    node ()</span><br><span class="line">    &#123;</span><br><span class="line">        ft = at = nt = su = sut = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node s[N *<span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="function">node <span class="title">upd</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x.ft = x.at = x.nt = <span class="number">0</span>;</span><br><span class="line">        x.su = (x.su + y.su) % p;</span><br><span class="line">        x.sut = (x.sut + y.sut) % p;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].su = a[l];</span><br><span class="line">            s[k].sut = t[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(zrt,l,mid);</span><br><span class="line">        build(yrt,mid + <span class="number">1</span>,r);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cha</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].sut = (s[k].sut + <span class="number">1L</span>L * t * (r - l + <span class="number">1</span>)) % p;</span><br><span class="line">        s[k].at = (s[k].at + t) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jia</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].su = (s[k].su + s[k].sut * <span class="number">1L</span>L * z) % p;</span><br><span class="line">        s[k].ft = (s[k].ft + z) % p;</span><br><span class="line">        s[k].nt = (s[k].nt + s[k].at * <span class="number">1L</span>L * z) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jiaa</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].su = (s[k].su + (r - l + <span class="number">1</span>) * <span class="number">1L</span>L * z) % p;</span><br><span class="line">        s[k].nt = (s[k].nt + z) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[k].ft)</span><br><span class="line">        &#123;</span><br><span class="line">            jia(zrt,l,mid,s[k].ft);</span><br><span class="line">            jia(yrt,mid + <span class="number">1</span>,r,s[k].ft);</span><br><span class="line">            s[k].ft = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[k].nt)</span><br><span class="line">        &#123;</span><br><span class="line">            jiaa(zrt,l,mid,s[k].nt);</span><br><span class="line">            jiaa(yrt,mid + <span class="number">1</span>,r,s[k].nt);</span><br><span class="line">            s[k].nt = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[k].at)</span><br><span class="line">        &#123;</span><br><span class="line">            cha(zrt,l,mid,s[k].at);</span><br><span class="line">            cha(yrt,mid + <span class="number">1</span>,r,s[k].at);</span><br><span class="line">            s[k].at = <span class="number">0</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">        &#123;</span><br><span class="line">            cha(k,l,r,t);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            change(yrt,mid + <span class="number">1</span>,r,x,y,t);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                change(zrt,l,mid,x,y,t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                change(zrt,l,mid,x,y,t),change(yrt,mid + <span class="number">1</span>,r,x,y,t);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">        &#123;</span><br><span class="line">            jia(k,l,r,z);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            add(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                add(zrt,l,mid,x,y,z);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                add(zrt,l,mid,x,y,z),add(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">            <span class="keyword">return</span> s[k];</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> query(yrt,mid + <span class="number">1</span>,r,x,y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                <span class="keyword">return</span> query(zrt,l,mid,x,y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> upd(query(zrt,l,mid,x,y),query(yrt,mid + <span class="number">1</span>,r,x,y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> opt,l,r,z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">            tree.change(<span class="number">1</span>,<span class="number">1</span>,n,l,r,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (opt == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">                tree.change(<span class="number">1</span>,<span class="number">1</span>,n,l,r,-z);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (opt == <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">                    tree.add(<span class="number">1</span>,<span class="number">1</span>,n,l,r,z);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(tree.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r).su % p + p) % p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="T4-小-e-的考验"><a href="#T4-小-e-的考验" class="headerlink" title="T4 小$e$的考验"></a>T4 小$e$的考验</h2><p><del>这题本来是想当签到题出的说</del></p>
<p>我们思考一下，其实就是每次问你这个区间不能被$x$整除的数是否超过$k$个</p>
<ul>
<li><p>我们注意到第一个子任务的$k$很小，那么我们可以大力线段树，维护一个区间$gcd$，如果这个$x|gcd$那么继续往里走，走到叶子节点就统计一下，复杂度$O(knlogn)$</p>
</li>
<li><p>而第二个子任务的特点是值域小，那么我们可以去寻找一种值域做法</p>
</li>
</ul>
<blockquote>
<p>考虑根号分治，对序列分块，对于每个询问$x$，如果$x&lt;=\sqrt{N},N$是值域，那么直接查，否则暴力枚举其倍数统计答案</p>
<p>对于小于$\sqrt{N}$的询问，我们预处理出来$c_{ij}$表示第$i$个块能被$j$整除的个数，然后整块直接查$c$就好了</p>
<p>对于大于$\sqrt{N}$的询问，预处理出$f_{ij}$表示前$i$个块中$j$的个数，对于所有整块，一边枚举倍数，一边前缀和一减统计答案就可以了</p>
<p>单点修改直接修改$c,f$，复杂度$O(n\sqrt{n})$</p>
</blockquote>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 500000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MI 100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GN 316</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zrt k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yrt k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N + <span class="number">5</span>],m,cnt,T,bs,blo[MI + <span class="number">5</span>],L[MI + <span class="number">5</span>],R[MI + <span class="number">5</span>],f[GN + <span class="number">5</span>][MI + <span class="number">5</span>],c[GN + <span class="number">5</span>][GN + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> g;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node s[N * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="function">node <span class="title">upd</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node k;</span><br><span class="line">        k.g = gcd(x.g,y.g);</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].g = a[l];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(zrt,l,mid);</span><br><span class="line">        build(yrt,mid + <span class="number">1</span>,r);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].g = z;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">            change(zrt,l,mid,x,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            change(yrt,mid + <span class="number">1</span>,r,x,z);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt &gt; t)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y &amp;&amp; s[k].g % z == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            query(yrt,mid + <span class="number">1</span>,r,x,y,z,t);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                query(zrt,l,mid,x,y,z,t);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                query(zrt,l,mid,x,y,z,t),query(yrt,mid + <span class="number">1</span>,r,x,y,z,t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (blo[r] - blo[l] &lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l;i &lt;= r;i++)</span><br><span class="line">            <span class="keyword">if</span> (a[i] % z == <span class="number">0</span>)</span><br><span class="line">                ans++;</span><br><span class="line">        <span class="keyword">return</span> r - l + <span class="number">1</span> - ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l;i &lt;= R[blo[l]];i++)</span><br><span class="line">            <span class="keyword">if</span> (a[i] % z == <span class="number">0</span>)</span><br><span class="line">                ans++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = L[blo[r]];i &lt;= r;i++)</span><br><span class="line">            <span class="keyword">if</span> (a[i] % z == <span class="number">0</span>)</span><br><span class="line">                ans++;</span><br><span class="line">        <span class="keyword">if</span> (z &gt; GN)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = z;i &lt;= MI;i += z)</span><br><span class="line">                ans += f[blo[r] - <span class="number">1</span>][i] - f[blo[l]][i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = blo[l] + <span class="number">1</span>;i &lt; blo[r];i++)</span><br><span class="line">                ans += c[i][z];</span><br><span class="line">        <span class="keyword">return</span> r - l + <span class="number">1</span> - ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = blo[l];i &lt;= blo[n];i++)</span><br><span class="line">        f[i][a[l]]--,f[i][z]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= GN;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[l] % i == <span class="number">0</span>)</span><br><span class="line">            c[blo[l]][i]--;</span><br><span class="line">        <span class="keyword">if</span> (z % i == <span class="number">0</span>)</span><br><span class="line">            c[blo[l]][i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    a[l] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">if</span> (T == <span class="number">1</span>)    <span class="comment">//subtask 1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> opt,l,r,z,t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;l,&amp;r);</span><br><span class="line">            <span class="keyword">if</span> (opt == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t,&amp;z);</span><br><span class="line">                tree.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r,z,t);</span><br><span class="line">                <span class="keyword">if</span> (cnt &lt;= t)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tree.change(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>   <span class="comment">//subtask 2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        bs = <span class="built_in">sqrt</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= MI;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            blo[i] = (i - <span class="number">1</span>) / bs + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (!L[blo[i]])</span><br><span class="line">                L[blo[i]] = i;</span><br><span class="line">            R[blo[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= blo[n];i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= MI;j++)</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = L[i];j &lt;= R[i];j++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i][a[j]]++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= GN;k++)</span><br><span class="line">                    <span class="keyword">if</span> (a[j] % k == <span class="number">0</span>)</span><br><span class="line">                        c[i][k]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> opt,l,r,z,t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;l,&amp;r);</span><br><span class="line">            <span class="keyword">if</span> (opt == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t,&amp;z);</span><br><span class="line">                <span class="keyword">if</span> (query(l,r,z) &lt;= t)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">            	<span class="keyword">if</span> (a[l] == r)</span><br><span class="line">            		<span class="keyword">continue</span>;</span><br><span class="line">                change(l,r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>代码写的有点丑= =</p>
]]></content>
      
        <categories>
            
            <category> 比赛题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 分块 </tag>
            
            <tag> 根号分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CF444C DZY Loves Colors]]></title>
      <url>/2019/08/15/cf444c/</url>
      <content type="html"><![CDATA[<p>DZY喜欢色彩，他热爱绘画。</p>
<p>在一个多姿多彩的日子里，DZY得到了一个彩色的缎带，它由N个单元组成（从左到右从1到n编号）。色带的第ii个单位的最初颜色是i。虽然颜色足够丰富，但我们仍然认为每个单元的颜色数量最初是0。</p>
<p>DZY热衷于绘画，我们知道。他拿起一把彩色X笔，用它在缎带上画一条线。在这种情况下，他就绘制了一段连续的单元。想象一下，单位i被涂之前颜色是Y。被涂之后时，单元的颜色变为X，令单位的颜色增加了∣X−Y∣。 DZY想要执行M个操作，每个操作可以是下列操作之一：</p>
<p>1、将区间[L,R]内单元绘制为颜色X。</p>
<p>2、询问[L,R]之间的单位颜色的总和（包括两者）。</p>
<a id="more"></a>
<p>我们用线段树维护这一段的答案和这段颜色是否一样，如果一样是什么颜色</p>
<p>每次我们修改时候对相同的颜色段修改，不相同的颜色段递归暴力修改</p>
<p>对于一次区间覆盖，只会产生两个新的端点，所以只会暴力$O(n+2m)$次</p>
<p>复杂度$O(mlogn)$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zrt k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yrt k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> tag,c;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> su,at;</span><br><span class="line">    node ()</span><br><span class="line">    &#123;</span><br><span class="line">        at = su = c = tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myabs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node s[N * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="function">node <span class="title">upd</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node k;</span><br><span class="line">        <span class="keyword">if</span> (x.c == y.c)</span><br><span class="line">            k.c = x.c;</span><br><span class="line">        k.su = x.su + y.su;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].c = l;</span><br><span class="line">            s[k].su = <span class="number">0L</span>L;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(zrt,l,mid);</span><br><span class="line">        build(yrt,mid + <span class="number">1</span>,r);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!s[k].tag &amp;&amp; !s[k].at)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[k].tag)</span><br><span class="line">        &#123;</span><br><span class="line">            s[zrt].c = s[k].tag;</span><br><span class="line">            s[yrt].c = s[k].tag;</span><br><span class="line">            s[zrt].tag = s[k].tag;</span><br><span class="line">            s[yrt].tag = s[k].tag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[k].at)</span><br><span class="line">        &#123;</span><br><span class="line">            s[zrt].su += (<span class="keyword">long</span> <span class="keyword">long</span>)(mid - l + <span class="number">1</span>) * s[k].at;</span><br><span class="line">            s[yrt].su += (<span class="keyword">long</span> <span class="keyword">long</span>)(r - mid) * s[k].at;</span><br><span class="line">            s[zrt].su += s[k].at;</span><br><span class="line">            s[yrt].su += s[k].at;</span><br><span class="line">        &#125;</span><br><span class="line">        s[k].tag = s[k].at = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y &amp;&amp; s[k].c)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].su += (<span class="keyword">long</span> <span class="keyword">long</span>)myabs(z - s[k].c) * (<span class="keyword">long</span> <span class="keyword">long</span>)(r - l + <span class="number">1</span>);</span><br><span class="line">            s[k].c = z;</span><br><span class="line">            s[k].tag = z;</span><br><span class="line">            s[k].at += (<span class="keyword">long</span> <span class="keyword">long</span>)myabs(z - s[k].c);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            change(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                change(zrt,l,mid,x,y,z);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                change(zrt,l,mid,x,y,z),change(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">            <span class="keyword">return</span> s[k];</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> query(yrt,mid + <span class="number">1</span>,r,x,y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                <span class="keyword">return</span> query(zrt,l,mid,x,y);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> upd(query(zrt,l,mid,x,y),query(yrt,mid + <span class="number">1</span>,r,x,y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">int</span> opt,l,r,z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;z);</span><br><span class="line">            tree.change(<span class="number">1</span>,<span class="number">1</span>,n,l,r,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,tree.query(<span class="number">1</span>,<span class="number">1</span>,n,l,r).su);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CF739C Alyona and towers]]></title>
      <url>/2019/08/14/cf739c/</url>
      <content type="html"><![CDATA[<p>题意：维护区间最大的先上升后下降的子段长度，支持区间加</p>
<a id="more"></a>
<p>这个题似乎很熟悉，想必你肯定做过它的简化版——最大上升子序列</p>
<p>那么遇到这样的题我们应该怎么做呢，别着急，我们一步一步来</p>
<ul>
<li>我们肯定是要用线段树维护答案，那么左右儿子怎么合并答案呢，有这么几种情况：</li>
</ul>
<figure class="image-box">
                <img src="/imgs/p3.png" alt title class>
                <p></p>
            </figure>
<blockquote>
<ul>
<li><p>前两种情况就是继承左右儿子的$ans$</p>
</li>
<li><p>第三种是左儿子中以右端点结尾的$ans+$右儿子中以左端点开始的最长下降序列长度（左儿子的右端点$&gt;$右儿子的左端点）</p>
</li>
<li><p>第四种是右儿子中以左端点开始的$ans+$左儿子中以右端点结束的最长上升序列长度（左儿子的左端点$&lt;$右儿子的左端点）</p>
</li>
</ul>
</blockquote>
<ul>
<li>维护以左右端点开始或结尾的$zans,yans$也是类似的，以$zans$来说</li>
</ul>
<figure class="image-box">
                <img src="/imgs/p1.png" alt title class>
                <p></p>
            </figure>
<blockquote>
<ul>
<li><p>第一种情况就是左儿子的$zans$</p>
</li>
<li><p>第二种情况是左儿子的$zans+$右儿子中以左端点开始的最长下降序列长度（左儿子的右端点$&gt;$右儿子的左端点）</p>
</li>
<li><p>第三种情况是左儿子的区间长度$+$右儿子的$zans$（左儿子中以右端点结尾的最长上升序列长度$=$左儿子的区间长度并且左儿子的右端点$&lt;$右儿子的左端点）</p>
</li>
</ul>
</blockquote>
<ul>
<li>然后是维护左右端点开始或结束的最长下降或上升的序列长度$zlen,ylen$，以$zlen$来说</li>
</ul>
<figure class="image-box">
                <img src="/imgs/p2.png" alt title class>
                <p></p>
            </figure>
<blockquote>
<ul>
<li>第一种情况是左儿子的$zlen$</li>
<li>第二种情况是左儿子的$zlen+$右儿子的$zlen$（左儿子的$zlen=$左儿子的区间长度并且左儿子的右端点$&gt;$右儿子的左端点）</li>
</ul>
</blockquote>
<p>然后这道题就做完啦</p>
<p>我们整理一下刚才要维护的东西</p>
<ul>
<li><p>答案$ans$</p>
</li>
<li><p>左端点$z$</p>
</li>
<li><p>右端点$y$ </p>
</li>
<li><p>区间长度$len$</p>
</li>
<li><p>左端点开始的答案$zans$</p>
</li>
<li><p>左端点开始的最长下降序列长度$zlen$</p>
</li>
<li><p>右端点结束的答案$yans$</p>
</li>
<li><p>右端点结束的最长上升序列长度$ylen$</p>
</li>
</ul>
<p>至于区间加的操作，对于一个子树而言只影响左右端点，所以正常的打标记下放就可以了</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zrt k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yrt k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N + <span class="number">5</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ans,za,ya,zl,yl,len;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> z,y,tag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node s[N * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line">    <span class="function">node <span class="title">upd</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        node k;</span><br><span class="line">        k.len = x.len + y.len;</span><br><span class="line">        k.z = x.z;</span><br><span class="line">        k.y = y.y;</span><br><span class="line">        k.zl = x.zl;</span><br><span class="line">        <span class="keyword">if</span> (x.zl == x.len &amp;&amp; x.y &gt; y.z)</span><br><span class="line">            k.zl += y.zl;</span><br><span class="line">        k.yl = y.yl;</span><br><span class="line">        <span class="keyword">if</span> (y.yl == y.len &amp;&amp; x.y &lt; y.z)</span><br><span class="line">            k.yl += x.yl;</span><br><span class="line">        k.za = x.za;</span><br><span class="line">        <span class="keyword">if</span> (k.za == x.len &amp;&amp; x.y &gt; y.z)</span><br><span class="line">            k.za += y.zl;</span><br><span class="line">        <span class="keyword">if</span> (x.yl == x.len &amp;&amp; x.y &lt; y.z)</span><br><span class="line">            k.za = max(k.za,x.yl + y.za);</span><br><span class="line">        k.ya = y.ya;</span><br><span class="line">        <span class="keyword">if</span> (k.ya == y.len &amp;&amp; x.y &lt; y.z)</span><br><span class="line">            k.ya += x.yl;</span><br><span class="line">        <span class="keyword">if</span> (y.zl == y.len &amp;&amp; x.y &gt; y.z)</span><br><span class="line">            k.ya = max(k.ya,y.zl + x.ya);</span><br><span class="line">        k.ans = max(x.ans,y.ans);</span><br><span class="line">        <span class="keyword">if</span> (x.y &gt; y.z)</span><br><span class="line">            k.ans = max(k.ans,x.ya + y.zl);</span><br><span class="line">        <span class="keyword">if</span> (x.y &lt; y.z)</span><br><span class="line">            k.ans = max(k.ans,y.za + x.yl);</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].ans = <span class="number">1</span>;</span><br><span class="line">            s[k].ya = <span class="number">1</span>;</span><br><span class="line">            s[k].za = <span class="number">1</span>;</span><br><span class="line">            s[k].zl = <span class="number">1</span>;</span><br><span class="line">            s[k].yl = <span class="number">1</span>;</span><br><span class="line">            s[k].z = (<span class="keyword">long</span> <span class="keyword">long</span>)a[l];</span><br><span class="line">            s[k].y = (<span class="keyword">long</span> <span class="keyword">long</span>)a[l];</span><br><span class="line">            s[k].len = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(zrt,l,mid);</span><br><span class="line">        build(yrt,mid + <span class="number">1</span>,r);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jia</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].z += z;</span><br><span class="line">        s[k].y += z;</span><br><span class="line">        s[k].tag += z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!s[k].tag)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        jia(zrt,l,mid,s[k].tag);</span><br><span class="line">        jia(yrt,mid + <span class="number">1</span>,r,s[k].tag);</span><br><span class="line">        s[k].tag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">        &#123;</span><br><span class="line">            jia(k,l,r,z);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(k,l,r,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            add(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                add(zrt,l,mid,x,y,z);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                add(zrt,l,mid,x,y,z),add(yrt,mid + <span class="number">1</span>,r,x,y,z);</span><br><span class="line">        s[k] = upd(s[zrt],s[yrt]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    tree.build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;l,&amp;r,&amp;z);</span><br><span class="line">        tree.add(<span class="number">1</span>,<span class="number">1</span>,n,l,r,z);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tree.s[<span class="number">1</span>].ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于d函数的筛法]]></title>
      <url>/2019/08/08/shaid/</url>
      <content type="html"><![CDATA[<p>线性筛筛$\sigma$</p>
<a id="more"></a>
<p>线性筛筛$\sigma_0$</p>
<p>$p$是质数,$\sigma_0(p)=2$</p>
<p>对于一个$i$，如果$i$和$p$互质，根据积性函数得$\sigma_0 (i\ast p)=\sigma_0 (i)\ast \sigma_0 (p)$</p>
<p>如果$i$和$p$不互质，那么$p|i$</p>
<p>设$i=\prod_{i=1}^mP_i^{r_i}$</p>
<p>则$p\ast i=\prod_{i=2}^mP_i^{r_i}\ast P_1^{r_i+1}$</p>
<p>$\frac{i}{p}=\prod_{i=2}^m P_i^{r_i}\ast P_1^{r_i-1}$</p>
<p>$\sigma_0(i)=\prod_{i=1}^m(r_i+1)$</p>
<p>$\sigma_0(i\ast p)=\prod_{i=2}^m(r_i+1)+(r_1+2)$</p>
<p>$\sigma_0(\frac{i}{p}) = \prod_{i=2}^m(r_i+1)+r_1$</p>
<p>设$T=\prod_{i=2}^m(r_i+1)$</p>
<p>$\sigma_0(i)=T\ast (r_1+1)$</p>
<p>$\sigma_0(i\ast p)=T\ast (r_1+2)=\sigma_0(i)+T$</p>
<p>$\sigma_0(\frac{i}{p})=T\ast r_1=\sigma_0(i)-T$</p>
<p>可得$\sigma_0(i\ast p)=2\ast \sigma_0(i)-\sigma_0(\frac{i}{p})$</p>
<hr>
<p>线性筛筛$\sigma$</p>
<p>$p$是质数,$\sigma(p)=p+1$</p>
<p>对于一个$i$，如果$i$和$p$互质，根据积性函数得$\sigma(i\ast p)=\sigma(i)\ast \sigma(p)$</p>
<p>如果$i$和$p$不互质，那么$p|i$</p>
<p>设$i=\prod_{i=1}^mP_i^{r_i}$</p>
<p>则$p_1\ast i=\prod_{i=2}^mP_i^{r_i}\ast P_1^{r_i+1}$</p>
<p>$\frac{i}{p}=\prod_{i=2}^m P_i^{r_i}\ast P_1^{r_i-1}$</p>
<p>$\sigma_i=\prod_{i=1}^n\frac{p_i^{r_i+1}-1}{p_i-1}$</p>
<p>$\sigma_{i\ast p}=\prod_{i=2}^n\frac{p_i^{r_i+1}-1}{p_i-1}\ast \frac{p_i^{r_1+2}-1}{p_1-1}$</p>
<p>$\sigma_{\frac{i}{p}}=\prod_{i=2}^n\frac{p_i^{r_i+1}-1}{p_i-1}\ast \frac{p_i^{r_1}-1}{p_1-1}$</p>
<p>设$T=\prod_{i=2}^n\frac{p_i^{r_i+1}-1}{p_i-1}$</p>
<p>$\sigma_{i}=T\ast \frac{p_i^{r_1+1}-1}{p_1-1}$</p>
<p>$\sigma_{i\ast p}=T\ast \frac{p_i^{r_1+2}-1}{p_1-1}=\sigma_i+T\ast p_1^{r_1+1}$</p>
<p>$\sigma_{\frac{i}{p}}=T\ast \frac{p_i^{r_1}-1}{p_1-1}=\sigma_i-T\ast p_1^{r_1}$</p>
<p>两边乘$p_1$得到$\sigma_{\frac{i}{p}}\ast p_1=p_1\ast \sigma_i-T\ast p_1^{r_1+1}$</p>
<p>后两个式子相加可得$\sigma_{i\ast p_1}=(p_1+1)\ast \sigma_i-p_1\ast \sigma_{\frac{i}{p}}$</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SP1741 TETRIS3D - Tetris 3D]]></title>
      <url>/2019/08/07/sp1741/</url>
      <content type="html"><![CDATA[<p>“俄罗斯方块”的作者决定制作一个3D版本的“俄罗斯方块”。有若干个长方体积木，它们将以一定的顺序下落，最底端是一个矩形平台。积木停止下落当且仅当它碰到了矩形平台或另一个已经停止下落的积木。它将保持这个位置不变直至游戏结束。</p>
<p>然而作者想要改变这个游戏的玩法。已知积木的下降顺序以及积木的起始释放位置，求游戏结束后积木堆最高点的高度。假设积木竖直下落且不旋转。为了描述方便起见，我们引入一个笛卡尔坐标系，原点为平台的顶点，轴与平台边缘平行。</p>
<a id="more"></a>
<p><strong>题意</strong>：初始矩形为$0$，每次将一个子矩形修改为这个子矩形的最大值$+h$</p>
<p>首先我们对$x$轴建线段树（称为内层），然后在内层的基础上，对$y$轴建线段树（称为外层）</p>
<p>那么外层的操作都是在其对应的内层的基础上完成的</p>
<p>既然是线段树，那么我们思考这样一个问题，如何区间加</p>
<p>对于内层而言，可以打$lazytag$并进行$pushdown$，$pushup$也是可以进行的</p>
<p>然而对于外层，因为每个子节点我们维护的信息太多了，所以内层的$pushdown$和$pushup$都无法进行</p>
<p>于是我们另辟蹊径：标记永久化</p>
<p>我们多维护一个$tag$值，表示这个区间修改后的值</p>
<p>当我们修改的时候，都是可以用修改的值$val$去更新该区间的最大值$max$</p>
<p>而只有这个区间完全被覆盖时我们才用$val$去个更新$tag$</p>
<p>这个标记是对于子区间也是有效的，所以询问的时候要拿出这个区间的$tag$去尝试更新答案</p>
<p>语言太无力了，还是上代码吧qwq</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2500</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> zrt k &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yrt k &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ma,tag;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegX</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node s[M + <span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].ma = max(s[k].ma,z);</span><br><span class="line">        <span class="keyword">if</span> (l == x &amp;&amp; r == y)</span><br><span class="line">        &#123;</span><br><span class="line">            s[k].tag = max(s[k].tag,z);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            change(yrt,mid + <span class="number">1</span>,r,max(x,mid + <span class="number">1</span>),y,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                change(zrt,l,mid,x,min(y,mid),z);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                change(zrt,l,mid,x,min(y,mid),z),change(yrt,mid + <span class="number">1</span>,r,max(x,mid + <span class="number">1</span>),y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == x &amp;&amp; r == y)</span><br><span class="line">            <span class="keyword">return</span> s[k].ma;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> max(query(yrt,mid + <span class="number">1</span>,r,max(x,mid + <span class="number">1</span>),y),s[k].tag);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (y &lt;= mid)</span><br><span class="line">                <span class="keyword">return</span> max(query(zrt,l,mid,x,min(y,mid)),s[k].tag);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> max(s[k].tag,max(query(zrt,l,mid,x,min(y,mid)),query(yrt,mid + <span class="number">1</span>,r,max(x,mid + <span class="number">1</span>),y)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SegX s[M + <span class="number">5</span>],tag[M + <span class="number">5</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> xl,<span class="keyword">int</span> xr,<span class="keyword">int</span> yl,<span class="keyword">int</span> yr,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s[k].change(<span class="number">1</span>,<span class="number">1</span>,n,xl,xr,z);</span><br><span class="line">        <span class="keyword">if</span> (l == yl &amp;&amp; r == yr)</span><br><span class="line">        &#123;</span><br><span class="line">            tag[k].change(<span class="number">1</span>,<span class="number">1</span>,n,xl,xr,z);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (yl &gt; mid)</span><br><span class="line">            change(yrt,mid + <span class="number">1</span>,r,xl,xr,max(yl,mid + <span class="number">1</span>),yr,z);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (yr &lt;= mid)</span><br><span class="line">                change(zrt,l,mid,xl,xr,yl,min(yr,mid),z);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                change(zrt,l,mid,xl,xr,yl,min(yr,mid),z),change(yrt,mid + <span class="number">1</span>,r,xl,xr,max(yl,mid + <span class="number">1</span>),yr,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> xl,<span class="keyword">int</span> xr,<span class="keyword">int</span> yl,<span class="keyword">int</span> yr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == yl &amp;&amp; r == yr)</span><br><span class="line">            <span class="keyword">return</span> s[k].query(<span class="number">1</span>,<span class="number">1</span>,n,xl,xr);</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>,ans = tag[k].query(<span class="number">1</span>,<span class="number">1</span>,n,xl,xr);</span><br><span class="line">        <span class="keyword">if</span> (yl &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> max(ans,query(yrt,mid + <span class="number">1</span>,r,xl,xr,max(yl,mid + <span class="number">1</span>),yr));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (yr &lt;= mid)</span><br><span class="line">                <span class="keyword">return</span> max(ans,query(zrt,l,mid,xl,xr,yl,min(yr,mid)));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> max(ans,max(query(zrt,l,mid,xl,xr,yl,min(yr,mid)),query(yrt,mid + <span class="number">1</span>,r,xl,xr,max(yl,mid + <span class="number">1</span>),yr)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">    <span class="keyword">int</span> d,s,h,x,y,z;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;d,&amp;s,&amp;h,&amp;x,&amp;y);</span><br><span class="line">        z = tree.query(<span class="number">1</span>,<span class="number">1</span>,m,x + <span class="number">1</span>,x + d,y + <span class="number">1</span>,y + s);</span><br><span class="line">        tree.change(<span class="number">1</span>,<span class="number">1</span>,m,x + <span class="number">1</span>,x + d,y + <span class="number">1</span>,y + s,z + h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tree.query(<span class="number">1</span>,<span class="number">1</span>,m,<span class="number">1</span>,n,<span class="number">1</span>,m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P3157 [CQOI2011]动态逆序对]]></title>
      <url>/2019/07/20/p3157/</url>
      <content type="html"><![CDATA[<p>对于序列A，它的逆序对数定义为满足i<j，且ai>Aj的数对(i,j)的个数。给1到n的一个排列，按照某种顺序依次删除m个元素，你的任务是在每次删除一个元素之前统计整个序列的逆序对数。</j，且ai></p>
<a id="more"></a>
<p>可以值域分块，块套树状数组，树套树</p>
<p>不过用序列分块$+vector$一样能水过这道题</p>
<p>考虑删去一个点$x$对答案产生的影响，拿下面的数列来说</p>
<script type="math/tex; mode=display">1,2……x……n-1,n</script><blockquote>
<p>对于区间$[1,x-1]$，$a_i&gt;a_x$会产生逆序对</p>
<p>对于区间$[x+1,n]$，$a_i&lt;a_x$会产生逆序对</p>
</blockquote>
<p>那么每次删点后统计一下$x$两侧满足条件的数就好了</p>
<p>我们对序列分块，同一个块里的用$vector$排好序，和$x$在不同块的二分查找更新答案，和$x$在同一个块的暴力枚举更新答案，每次删点的时候在$vector$里删除点就好了</p>
<p>复杂度大约是$O(Mlog(N)\sqrt{N})$，吸吸氧就过了</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,s,t) for (register int i=s;i&lt;=t;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,s,t) for (register int i=t;i&gt;=s;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> il inline</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[N+<span class="number">5</span>],data[N+<span class="number">5</span>],bs,blo[N+<span class="number">5</span>],L[N+<span class="number">5</span>],R[N+<span class="number">5</span>],na[N+<span class="number">5</span>],d[N+<span class="number">5</span>],id[N+<span class="number">5</span>],cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; p[N+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r-l&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> it=l,mid=l+r&gt;&gt;<span class="number">1</span>,p=l,q=mid+<span class="number">1</span>;</span><br><span class="line">        merge_sort(l,mid);</span><br><span class="line">        merge_sort(mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">while</span> (p&lt;=mid||q&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q&gt;r||p&lt;=mid&amp;&amp;data[p]&lt;=data[q])</span><br><span class="line">                na[it++]=data[p++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                na[it++]=data[q++];</span><br><span class="line">                ans+=(<span class="keyword">long</span> <span class="keyword">long</span>)mid-p+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,l,r)</span><br><span class="line">            data[i]=na[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it=lower_bound(p[blo[x]].begin(),p[blo[x]].end(),a[x]);</span><br><span class="line">    p[blo[x]].erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,blo[x]<span class="number">-1</span>)</span><br><span class="line">        ans-=(<span class="keyword">long</span> <span class="keyword">long</span>)(p[i].end()-upper_bound(p[i].begin(),p[i].end(),a[x]));</span><br><span class="line">    rep(i,L[blo[x]],x<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> (a[i]&gt;a[x]&amp;&amp;!d[i])</span><br><span class="line">            ans--;</span><br><span class="line">    rep(i,x+<span class="number">1</span>,R[blo[x]])</span><br><span class="line">        <span class="keyword">if</span> (a[i]&lt;a[x]&amp;&amp;!d[i])</span><br><span class="line">            ans--;</span><br><span class="line">    rep(i,blo[x]+<span class="number">1</span>,blo[n])</span><br><span class="line">        ans-=(<span class="keyword">long</span> <span class="keyword">long</span>)(lower_bound(p[i].begin(),p[i].end(),a[x])-p[i].begin());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">il <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	int X(0),w(0);char ch(0);</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))w|=ch==<span class="string">'-'</span>,ch=getchar();</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">	<span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    m=read();</span><br><span class="line">    bs=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=read();</span><br><span class="line">        data[i]=a[i];</span><br><span class="line">        id[a[i]]=++cnt;</span><br><span class="line">        blo[i]=(i<span class="number">-1</span>)/bs+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!L[blo[i]])</span><br><span class="line">            L[blo[i]]=i;</span><br><span class="line">        R[blo[i]]=i;</span><br><span class="line">        p[blo[i]].push_back(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    merge_sort(<span class="number">1</span>,n);</span><br><span class="line">    rep(i,<span class="number">1</span>,blo[n])</span><br><span class="line">        sort(p[i].begin(),p[i].end());</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        x=read();</span><br><span class="line">        del(id[x]);</span><br><span class="line">        calc(id[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 树套树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P1975 [国家集训队]排队]]></title>
      <url>/2019/07/18/p1975/</url>
      <content type="html"><![CDATA[<p>题意：给一个序列，每次交换$a_l,a_r$，并且询问交换后的整个序列的逆序对数</p>
<a id="more"></a>
<p>分块+二分</p>
<p>刚开始的逆序对数可以直接用归并排序求出来，我们先更新答案再交换，考虑每次交换的$a_l,a_r$，会影响逆序对的只可能是$[l,r]$这个区间的数，如果单独拿出之间的一个数$a_i(l+1\le i\le r-1)$来说，对答案则有四种可能的影响</p>
<blockquote>
<ol>
<li>$a_i&gt;a_l\to ans++$</li>
</ol>
<p>$a_i$比$a_l$大，$a_l$和$a_r$交换之后$a_l$下标比$a_i$大，逆序对数$+1$</p>
<ol>
<li>$a_i&lt;a_l\to ans—$</li>
</ol>
<p>$a_i$比$a_l$小，已经是逆序对，$a_l$和$a_r$交换，逆序对数$-1$</p>
<ol>
<li>$a_i&lt;a_r\to ans++$</li>
</ol>
<p>$a_i$比$a_r$小，$a_l$和$a_r$交换之后$a_r$下标比$a_i$小，逆序对数$+1$</p>
<ol>
<li>$a_i&gt;a_r\to ans—$</li>
</ol>
<p>$a_i$比$a_r$大，已经是逆序对，$a_l$和$a_r$交换，逆序对数$-1$</p>
</blockquote>
<p>那么我们用分块来维护，对于在同一个块或相邻块的，暴力枚举$a_i$更新答案</p>
<p>然后考虑在每个块里维护这个块的有序序列，每次访问到这个块的时候，直接二分查找更新答案，边角的数直接枚举更新就好了</p>
<p>这样每次交换后对$a_l$和$a_r$调整一下所在块的有序序列就好了</p>
<p>注意询问的$l,r$可能$l&gt;r$所以要交换</p>
<p>蒟蒻也不会算块的大小什么的，常数还大的一批，就这样吧qwq</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,s,t) for (register int i=s;i&lt;=t;i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,s,t) for (register int i=s;i&gt;=t;i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N+<span class="number">5</span>],data[N+<span class="number">5</span>],m,bs,blo[N+<span class="number">5</span>],na[N+<span class="number">5</span>],ans;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; p[N+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r-l&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> it=l,mid=l+r&gt;&gt;<span class="number">1</span>,p=l,q=mid+<span class="number">1</span>;</span><br><span class="line">        merge_sort(l,mid);</span><br><span class="line">        merge_sort(mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">while</span> (p&lt;=mid||q&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (q&gt;r||p&lt;=mid&amp;&amp;na[p]&lt;=na[q])</span><br><span class="line">                data[it++]=na[p++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                data[it++]=na[q++];</span><br><span class="line">                ans+=mid-p+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rep(i,l,r)</span><br><span class="line">            na[i]=data[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">com</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans+=a[x]&gt;a[l];</span><br><span class="line">    ans-=a[x]&lt;a[l];</span><br><span class="line">    ans+=a[x]&lt;a[r];</span><br><span class="line">    ans-=a[x]&gt;a[r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[x].clear();</span><br><span class="line">    rep(i,(x<span class="number">-1</span>)*bs+<span class="number">1</span>,x*bs)</span><br><span class="line">        p[x].push_back(a[i]);</span><br><span class="line">    sort(p[x].begin(),p[x].end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    swap(a[l],a[r]);</span><br><span class="line">    reset(blo[l]);</span><br><span class="line">    reset(blo[r]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a[l]==a[r])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    ans+=(a[l]&lt;a[r]);</span><br><span class="line">    ans-=(a[l]&gt;a[r]);</span><br><span class="line">    <span class="keyword">if</span> (blo[r]-blo[l]&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rep(i,l+<span class="number">1</span>,r<span class="number">-1</span>)</span><br><span class="line">            com(i,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rep(i,l+<span class="number">1</span>,blo[l]*bs)</span><br><span class="line">            com(i,l,r);</span><br><span class="line">        rep(i,(blo[r]<span class="number">-1</span>)*bs+<span class="number">1</span>,r<span class="number">-1</span>)</span><br><span class="line">            com(i,l,r);</span><br><span class="line">        rep(i,blo[l]+<span class="number">1</span>,blo[r]<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=p[i].end()-upper_bound(p[i].begin(),p[i].end(),a[l]);</span><br><span class="line">            ans-=lower_bound(p[i].begin(),p[i].end(),a[l])-p[i].begin();</span><br><span class="line">            ans+=lower_bound(p[i].begin(),p[i].end(),a[r])-p[i].begin();</span><br><span class="line">            ans-=p[i].end()-upper_bound(p[i].begin(),p[i].end(),a[r]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    exc(l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),na[i]=data[i]=a[i];</span><br><span class="line">    sort(data+<span class="number">1</span>,data+n+<span class="number">1</span>);</span><br><span class="line">    bs=<span class="built_in">sqrt</span>(n);    </span><br><span class="line">    rep(i,<span class="number">1</span>,n)</span><br><span class="line">    &#123;</span><br><span class="line">        blo[i]=(i<span class="number">-1</span>)/bs+<span class="number">1</span>;        </span><br><span class="line">        na[i]=a[i]=lower_bound(data+<span class="number">1</span>,data+n+<span class="number">1</span>,a[i])-data;</span><br><span class="line">        p[blo[i]].push_back(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,blo[n])</span><br><span class="line">        sort(p[i].begin(),p[i].end());</span><br><span class="line">    merge_sort(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    rep(i,<span class="number">1</span>,m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span> (l&gt;r)</span><br><span class="line">            swap(l,r);</span><br><span class="line">        calc(l,r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分块 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CF86D Powerful array]]></title>
      <url>/2019/07/15/cf86d/</url>
      <content type="html"><![CDATA[<p>题意：$t$次询问区间$[l,r]$中$\sum_x a_x\times cnt[a_x]^2$，$cnt$为出现次数</p>
<a id="more"></a>
<p>裸的莫队题，用$cnt[x]$表示$x$出现的次数，根据平方的性质，我们得出加减操作</p>
<ul>
<li>加：$ans+=a_x\times 2cnt[a_x]+1,cnt[a_x]++$</li>
<li>减：$ans-=a_x\times 2cnt[a_x]-1,cnt[a_x]—$</li>
</ul>
<p>复杂度仍然是$O(n\sqrt n)$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,b,id;</span><br><span class="line">&#125;q[N+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,a[N+<span class="number">5</span>],blo;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[N+<span class="number">5</span>],tmp,cnt[N+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span>     <span class="comment">//奇偶性排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x.b==y.b)?(x.b%<span class="number">2</span>==<span class="number">1</span>?x.r&lt;y.r:x.r&gt;y.r):x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tmp+=(<span class="keyword">long</span> <span class="keyword">long</span>)a[x]*<span class="number">1L</span>L*(cnt[a[x]]*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    cnt[a[x]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tmp-=(<span class="keyword">long</span> <span class="keyword">long</span>)a[x]*<span class="number">1L</span>L*(cnt[a[x]]*<span class="number">2</span><span class="number">-1</span>);</span><br><span class="line">    cnt[a[x]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    blo=(<span class="built_in">sqrt</span>(m*<span class="number">2</span>/<span class="number">3</span>))?n/<span class="built_in">sqrt</span>(m*<span class="number">2</span>/<span class="number">3</span>):<span class="built_in">sqrt</span>(n);  <span class="comment">//块大小</span></span><br><span class="line">    <span class="keyword">if</span> (!blo)blo=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;q[i].l,&amp;q[i].r);</span><br><span class="line">        q[i].b=q[i].l/blo;</span><br><span class="line">        q[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(q+<span class="number">1</span>,q+m+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,l=<span class="number">1</span>,r=<span class="number">0</span>;i&lt;=m;i++)    <span class="comment">//莫队</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (l&gt;q[i].l)add(--l);</span><br><span class="line">        <span class="keyword">while</span> (r&lt;q[i].r)add(++r);</span><br><span class="line">        <span class="keyword">while</span> (l&lt;q[i].l)del(l++);</span><br><span class="line">        <span class="keyword">while</span> (r&gt;q[i].r)del(r--);</span><br><span class="line">        ans[q[i].id]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[莫队]]></title>
      <url>/2019/07/11/mo/</url>
      <content type="html"><![CDATA[<p>蒟蒻终于开始学莫队了，为了印象深刻，写篇文章来及时复习</p>
<a id="more"></a>
<h2 id="离线莫队"><a href="#离线莫队" class="headerlink" title="离线莫队"></a>离线莫队</h2><p>先丢个问题：给你一个序列长度为$n$，有$m$次询问，每次询问你$[l,r]$这个区间内有多少个不同的数</p>
<p>很多数据结构都可以解决这个问题，但我们不用</p>
<p>先考虑怎么暴力，每次询问时对区间扫一遍，复杂度为$O(nm)$</p>
<p>这种暴力方法似乎不能优化，那么考虑换一种方法</p>
<p>用两个指针$l,r$分别指向$[l,r]$这个区间的左端点和右端点，$cnt[i]$表示$i$这个数在$[l,r]$这个区间的出现次数，画个图深刻理解下</p>
<figure class="image-box">
                <img src="/imgs/p5.png" alt title class>
                <p></p>
            </figure>
<p><del>把数字用颜色来替代应该更容易看</del></p>
<p>现在$l,r$指向的这个区间内，$cnt_{\text{绿}}=3,cnt_{\text{红}}=2,cnt_{\text{蓝}}=0$，颜色种数$tmp=2$</p>
<p>我们把$r$指针往右移一个单位，$r$指向了蓝方块<br><figure class="image-box">
                <img src="/imgs/p6.png" alt title class>
                <p></p>
            </figure></p>
<p>于是$cnt_{\text{蓝}}=1$，而蓝色在之前的区间没有出现过，所以相应的$tmp$也要$+1=3$，区间$[l,r]$的颜色种数做出来了</p>
<p>这是扩大区间，对于缩小区间也是同理的，如果$cnt_{\text{某个颜色}}$减为$0$了，说明这个区间没有这个颜色，那么$tmp$也要$-1$</p>
<p><strong>Part-Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span>    <span class="comment">//扩大区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tmp+=(++cnt[a[x]]==<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span>     <span class="comment">//减小区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tmp-=(--cnt[a[x]]==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (l&gt;q[i].l)add(--l);</span><br><span class="line"><span class="keyword">while</span> (r&lt;q[i].r)add(++r);</span><br><span class="line"><span class="keyword">while</span> (l&lt;q[i].l)del(l++);</span><br><span class="line"><span class="keyword">while</span> (r&gt;q[i].r)del(r--);    <span class="comment">//移动指针</span></span><br></pre></td></tr></table></figure></p>
<p>但是这种暴力方法对时间复杂度并没有任何优化，仍然是$O(nm)$</p>
<p>我们考虑怎么优化</p>
<ul>
<li><p>把操作都读下来，按左端点排序。不行，这样子仍然会被卡成$O(nm)$</p>
</li>
<li><p>将序列分成$\sqrt n$个长度为$\sqrt n$的块，对于左端点在同一个块里，将其按右端点排序，不在同一块里的按左端点排序。这样就保证了在每个块里的$r$指针都是向右移的，而$l$指针移超不过$\sqrt n$，所以时间复杂度为$O(n\sqrt n)$</p>
</li>
</ul>
<p><strong>Part-Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((x.l/blo)==(y.l/blo))?(x.r&lt;y.r):(x.l&lt;y.l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>然后还有一种卡常的排序方式——奇偶性排序，对左端点在同一个块里的询问，如果块的编号是奇数块，那么按升序排，偶数块则按降序排。这样排序的好处是在处理完左端点在一个块里的询问后，不用再从右移到左，所以理论上可以比上一个快一倍</li>
</ul>
<p><strong>Part-Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x.ll==y.ll)?((x.ll%<span class="number">2</span>==<span class="number">1</span>)?(x.r&lt;y.r):(x.r&gt;y.r)):(x.l&lt;y.l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>最后想说的就是块的大小和时间复杂度是<del>玄学</del>的，所以没有必要非得是$\sqrt n$，对于随机情况来说，将块的大小定为$\frac{n}{\sqrt{\frac{2m}{3}}}$是快一点的</li>
</ul>
<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><ol>
<li><a href="https://www.luogu.org/problemnew/show/P1972" target="_blank" rel="noopener">P1972</a>HH的项链</li>
</ol>
<p>这道题是裸的莫队题，但是现在不卡常吸氧是过不去了</p>
<ol>
<li><a href="https://www.luogu.org/problemnew/show/P2709" target="_blank" rel="noopener">P2709</a>小B的询问</li>
</ol>
<p>这个是询问区间出现次数的平方和，只需要考虑一下平方的性质就好了</p>
<ol>
<li><a href="https://www.luogu.org/problemnew/show/P3901" target="_blank" rel="noopener">P3901</a>数列找不同</li>
</ol>
<p>题目每次问你区间内的数是否两两不同</p>
<p>还是一道很裸的板子题啊，更新答案时判断一下不同数的个数和区间长度是否相等就好了，<del>这题暴力好像也能过</del></p>
<ol>
<li><a href="https://www.luogu.org/problemnew/show/P4113" target="_blank" rel="noopener">P4113</a>采花</li>
</ol>
<p>询问区间内出现两次以上的数的个数，但是这个数据范围莫队会t，可以当作莫队练练手</p>
<p>正解是树状数组，用维护出现一次的思想去想两次，一次的可以去做做<a href="https://www.luogu.org/problemnew/show/P1972" target="_blank" rel="noopener">P1972</a>，总之多会几个方法比只会暴力好的啦</p>
<ol>
<li><a href="https://www.luogu.org/problemnew/show/P4137" target="_blank" rel="noopener">P4137</a>mex</li>
</ol>
<p>询问区间内未出现的最小自然数</p>
<p>这个题似乎跟之前的不太一样，但是由于数据水，我们仍然可以用莫队水过去</p>
<p>考虑加点，如果这个点没出现过，那么这个点会影响到答案，我们把答案每次$++$，暴力找到未出现过的</p>
<p>而删点的时候，如果这个点删去之后就没了，那么可以和答案取个$min$</p>
<p>复杂度，emmmm，很玄学，能过完全就是数据水</p>
<ol>
<li><a href="https://www.luogu.org/problemnew/show/P3709" target="_blank" rel="noopener">P3709</a>大爷的字符串题</li>
</ol>
<p>询问区间内的众数的出现次数</p>
<p>依旧维护每个数的出现次数，移动边界的时候注意一下众数个数不是唯一的，根据其性质更新答案就好了</p>
<ol>
<li><a href="https://www.luogu.org/problemnew/show/P3674" target="_blank" rel="noopener">P3674</a>小清新人渣的本愿</li>
</ol>
<p>三种询问，区间内是否存在两个数相加得$x$，两个数相减得$x$，相乘得$x$</p>
<p><del>不会bitset专门跑去学的</del></p>
<p>我们用$bitset:S$来维护区间内的数是否出现，拿$A-B=x$来说，移项变为$A=x+B$，也就是如果$S\&amp;(S&lt;&lt;x)$不为零，说明可以</p>
<p>加法也同理，我们维护一个$N-x$的$bitset$，继续用这个思路来做</p>
<p>而对于乘法，因为一个数$x$的因子最大到$\sqrt x$，我们直接暴力枚举因子，看有没有出现就可以了</p>
<h2 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h2><p>其实就是加了个一个单点修改的操作，而离线莫队肯定是不能带修改的，那么我们继续考虑如何处理修改操作</p>
<ul>
<li><p>我们对每次询问区间$[l,r]$加一个版本$t$，每次访问的也就是$[l,r,t]$，$t$实际上是表示在第$t$次修改后的序列，处理的时候$t$和$l,r$一样跳就行了，要注意一点就是如果要跳到的版本的修改位置在$[l,r]$中，要修改$cnt_{a_{x}}$</p>
</li>
<li><p>要对修改和查询操作分别存储，修改操作要记录当前修改的位置$x$的之前的颜色，这样便于返回上一个版本；查询操作多存一个时间$t$就好了</p>
</li>
</ul>
<p><strong>Part-Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jia1s</span><span class="params">(<span class="keyword">int</span> x)</span>      <span class="comment">//到下一个版本</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l&lt;=p[x].x&amp;&amp;r&gt;=p[x].x)del(p[x].x);</span><br><span class="line">	a[p[x].x]=p[x].z;   <span class="comment">//更新</span></span><br><span class="line">	<span class="keyword">if</span> (l&lt;=p[x].x&amp;&amp;r&gt;=p[x].x)add(p[x].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jian1s</span><span class="params">(<span class="keyword">int</span> x)</span>     <span class="comment">//到上一个版本</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l&lt;=p[x].x&amp;&amp;r&gt;=p[x].x)del(p[x].x);</span><br><span class="line">	a[p[x].x]=p[x].lx;</span><br><span class="line">	<span class="keyword">if</span> (l&lt;=p[x].x&amp;&amp;r&gt;=p[x].x)add(p[x].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (t&lt;q[i].t)jia1s(++t);</span><br><span class="line"><span class="keyword">while</span> (t&gt;q[i].t)jian1s(t--);  移动t指针</span><br></pre></td></tr></table></figure></p>
<ul>
<li>排序跟离线的是差不多的，多了一点就是如果右端点在一个块里，要按$t$升序排序，同样的，这个排序也可以按奇偶性排序。</li>
</ul>
<p><strong>Part-Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int cmp(node x,node y)   普通排序</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x.ll==y.ll)?(x.rr==y.rr?x.t&lt;y.t:x.r&lt;y.r):x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line">int cmp(node x,node y)   奇偶性排序</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> (x.ll==y.ll)?((x.rr==y.rr)?(x.t&lt;y.t):((x.ll%<span class="number">2</span>==<span class="number">1</span>)?(x.r&lt;y.r):(x.r&gt;y.r))):(x.l&lt;y.l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>块的大小的话一般选取$n^{\frac{2}{3}}$，块的个数就是$n^{\frac{1}{3}}$，左右端点所在块的种数都为$n^{\frac{1}{3}}$，然后和单个块的移动复杂度$O(n)$乘起来之后复杂度就是$O(n^{\frac{5}{3}})$</li>
</ul>
<h3 id="习题-1"><a href="#习题-1" class="headerlink" title="习题"></a>习题</h3><ol>
<li><a href="https://www.luogu.org/problemnew/show/P1903" target="_blank" rel="noopener">P1903</a>数颜色</li>
</ol>
<p>裸的带修莫队，<del>当然也可以树套树</del></p>
<p>卡卡常，吸个氧才能过，<del>数据对莫队太不友好了</del></p>
<h2 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h2><p>原来我们的莫队是处理线性结构，这次把它搬到了树上，那么做法是否一样呢？</p>
<p>其实是基本上一样的，只不过我们要把树转化为线性结构，这就需要欧拉序，我们从根对这棵树进行$dfs$，点进栈时记一个时间戳$st$，出栈时再记一个时间戳$ed$，画个图理解一下</p>
<figure class="image-box">
                <img src="/imgs/p8.png" alt title class>
                <p></p>
            </figure>
<p>这棵树的欧拉序为$(1,2,4,5,5,6,6,7,7,4,2,3,3,1)$，那么每次询问的节点$u,v$有两种情况</p>
<ol>
<li><p>$u$在$v$的子树中（$v$在$u$的子树中同理），比如$u=6,v=2$，我们拿出$(st[2],st[6])$这段区间$(2,4,5,5,6)$，$5$出现了两次，因为搜索的时候$5$不属于这条链，所以进去之后就出去了，而出现一次的都在这条链上，就都可以统计</p>
</li>
<li><p>$u$和$v$不在同一个子树中，比如$u=5,v=3$，这次拿出$(ed[5],st[3])$这段区间$(5,6,6,7,7,4,2,3)$，要保证$st[u]&lt;st[v]$，出现两次的可以忽略，然而这次只统计了$5,4,2,3$，所以最后再统计上$lca$就好了</p>
</li>
</ol>
<ul>
<li><p>至于如何忽略掉区间内出现了两次的点，这个很简单，我们多记录一个$use[x]$，表示$x$这个点有没有被加入，每次处理的时候如果$use[x]=0$则需要添加节点；如果$use[x]=1$则需要删除节点，每次处理之后都对$use[x]$异或$1$就可以了</p>
</li>
<li><p>上面说的欧拉序之类的东西都可以用树剖做出来，然后就做完了</p>
</li>
<li><p>因为$st,ed$的大小都是$n$，所以取块的大小时要用$2n$，而不是$n$</p>
</li>
</ul>
<h3 id="习题-2"><a href="#习题-2" class="headerlink" title="习题"></a>习题</h3><ol>
<li><a href="https://www.luogu.org/problemnew/show/SP10707" target="_blank" rel="noopener">SP10707</a>COT2</li>
</ol>
<p>裸的树上莫队，注意下权值很大要离散化就好了</p>
<ol>
<li><a href="https://www.luogu.org/problemnew/show/P4689" target="_blank" rel="noopener">P4689</a>[Ynoi]这是我自己的发明</li>
</ol>
<p>由乃oi题个个都很<del>毒瘤</del></p>
<p>询问两个点子树中权值相等的数对个数，支持换根操作</p>
<p>首先我们要知道还完根后对于一个点$x$，我们应该如何去找其子树，有三种情况：</p>
<p>我们默认树根是$1$，每次记录下换的根$rt$</p>
<ul>
<li><p>$x=rt$，子树是整棵树</p>
</li>
<li><p>$lca(x,rt)\ne x$，直接访问$x$的子树</p>
</li>
<li><p>$lca(x,rt)=x$，子树为与$x$的相邻的点中和$rt$最近的点的补集</p>
</li>
</ul>
<p>既然已经会处理换根的操作，那么询问也就很好做了</p>
<p>我们用$f_{l,r\cap L,R}$来表示$l-r$与$L-R$这两个区间的答案，$f_{1,n\cap1,i}$可以预处理出来，然后对于不同种情况，大力容斥一波，剩下的只需要求$f_{l,r\cap L,R}$，转换成$4$个莫队求解就可以了</p>
<h2 id="树上带修莫队"><a href="#树上带修莫队" class="headerlink" title="树上带修莫队"></a>树上带修莫队</h2><p>其实只需要把树上莫队和带修莫队结合起来就好了，然后要注意一点</p>
<ul>
<li>在更新版本的时候，我们不能像以前一样判断在不在$[l,r]$这个区间内更新值，而是看这个位置有没有被选，这应该非常好理解</li>
</ul>
<p><strong>Part-Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jia1s</span><span class="params">(<span class="keyword">int</span> x)</span>     <span class="comment">//到下一个版本</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (use[p[x].x])   <span class="comment">//被选了</span></span><br><span class="line">	&#123;</span><br><span class="line">		calc(p[x].x);</span><br><span class="line">		a[p[x].x]=p[x].z;</span><br><span class="line">		calc(p[x].x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> a[p[x].x]=p[x].z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jian1s</span><span class="params">(<span class="keyword">int</span> x)</span>    <span class="comment">//到上一个版本</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (use[p[x].x])   <span class="comment">//被选了</span></span><br><span class="line">	&#123;</span><br><span class="line">		calc(p[x].x);</span><br><span class="line">		a[p[x].x]=p[x].lx;</span><br><span class="line">		calc(p[x].x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> a[p[x].x]=p[x].lx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>取块的大小注意下是$2n$就好了，排序什么的跟之前是一样的<h3 id="习题-3"><a href="#习题-3" class="headerlink" title="习题"></a>习题</h3></li>
</ul>
<p><a href="https://www.luogu.org/problemnew/show/P4074" target="_blank" rel="noopener">P4074</a>糖果公园</p>
<p>这个题询问树上两点路径之间$\sum_i\sum_jV_i\times W_j$，$i$为出现的糖果的种类，$j$为出现的次数，所以很显然就是用莫队维护了</p>
<p>注意一下统计答案时的操作就好了</p>
<hr>
<h3 id="如果有其他莫队的题我会慢慢放上来的QAQ"><a href="#如果有其他莫队的题我会慢慢放上来的QAQ" class="headerlink" title="如果有其他莫队的题我会慢慢放上来的QAQ"></a>如果有其他莫队的题我会慢慢放上来的QAQ</h3>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SP10707 COT2 - Count on a tree II]]></title>
      <url>/2019/07/11/sp10707/</url>
      <content type="html"><![CDATA[<p>给定一个n个节点的树，每个节点表示一个整数，问u到v的路径上有多少个不同的整数。</p>
<a id="more"></a>
<p>裸的树上莫队</p>
<p>其实和普通莫队上一样的，只不过我们要把树转化为线性结构，这就需要欧拉序，我们从根对这棵树进行$dfs$，点进栈时记一个时间戳$st$，出栈时再记一个时间戳$ed$，画个图理解一下</p>
<figure class="image-box">
                <img src="/imgs/p8.png" alt title class>
                <p></p>
            </figure>
<p>这棵树的欧拉序为$(1,2,4,5,5,6,6,7,7,4,2,3,3)$，那么每次询问的节点$u,v$有两种情况</p>
<ol>
<li><p>$u$在$v$的子树中（$v$在$u$的子树中同理），比如$u=6,v=2$，我们拿出$(st[2],st[6])$这段区间$(2,4,5,5,6)$，$5$出现了两次，因为搜索的时候$5$不属于这条链，所以进去之后就出去了，而出现一次的都在这条链上，就都可以统计</p>
</li>
<li><p>$u$和$v$不在同一个子树中，比如$u=5,v=3$，这次拿出$(ed[5],st[3])$这段区间$(5,6,6,7,7,4,2,3)$，要保证$st[u]&lt;st[v]$，出现两次的可以忽略，然而这次只统计了$5,4,2,3$，所以最后再统计上$lca$就好了</p>
</li>
</ol>
<ul>
<li><p>至于如何忽略掉区间内出现了两次的点，这个很简单，我们多记录一个$use[x]$，表示$x$这个点有没有被加入，每次处理的时候如果$use[x]=0$则需要添加节点；如果$use[x]=1$则需要删除节点，每次处理之后都对$use[x]$异或$1$就可以了</p>
</li>
<li><p>而欧拉序可以用树剖来求，$lca$也就求出来了，非常的方便</p>
</li>
<li><p>排序的话没有区别，可以普通排序，也可以奇偶性排序</p>
</li>
<li><p>因为$st,ed$的大小都是$n$，所以取块的大小时要用$2n$，而不是$n$</p>
</li>
<li><p>最后要注意的一点就是这个题权值比较大，需要离散化</p>
</li>
</ul>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l,r,ll,rr,id,lca;</span><br><span class="line">&#125;q[N+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,a[N+<span class="number">5</span>],st[N+<span class="number">5</span>],ed[N+<span class="number">5</span>],dfn[N+<span class="number">5</span>],f[N+<span class="number">5</span>],num,size[N+<span class="number">5</span>],his[N+<span class="number">5</span>],dep[N+<span class="number">5</span>],son[N+<span class="number">5</span>],top[N+<span class="number">5</span>],c[N+<span class="number">5</span>],tmp,blo,l=<span class="number">1</span>,r,use[N+<span class="number">5</span>],ans[N+<span class="number">5</span>],data[N+<span class="number">5</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; d[N+<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span>  <span class="comment">//树剖第一次深搜</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f[u]=fa;st[u]=++num;</span><br><span class="line">	size[u]=<span class="number">1</span>;his[num]=u;</span><br><span class="line">	dep[u]=dep[fa]+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it=d[u].begin();it!=d[u].end();it++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=(*it);</span><br><span class="line">		<span class="keyword">if</span> (v==fa)<span class="keyword">continue</span>;</span><br><span class="line">		dfs1(v,u);</span><br><span class="line">		size[u]+=size[v];</span><br><span class="line">		<span class="keyword">if</span> (size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">	&#125;</span><br><span class="line">	ed[u]=++num;his[num]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> to)</span>   <span class="comment">//树剖第二次深搜</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	top[u]=to;</span><br><span class="line">	<span class="keyword">if</span> (son[u])dfs2(son[u],to);</span><br><span class="line">	<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it=d[u].begin();it!=d[u].end();it++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=(*it);</span><br><span class="line">		<span class="keyword">if</span> (v!=son[u]&amp;&amp;v!=f[u])dfs2(v,v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span>   <span class="comment">//树剖求lca</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (top[x]!=top[y])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (dep[top[x]]&lt;dep[top[y]])swap(x,y);</span><br><span class="line">		x=f[top[x]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dep[x]&gt;dep[y])swap(x,y);</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tmp+=(++c[a[x]]==<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tmp-=(--c[a[x]]==<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span>     <span class="comment">//对点进行加入或删除</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	(!use[x])?add(x):del(x);</span><br><span class="line">	use[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node x,node y)</span>   <span class="comment">//排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x.ll==y.ll)?(x.ll%<span class="number">2</span>==<span class="number">1</span>?x.r&lt;y.r:x.r&gt;y.r):x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]),data[i]=a[i];</span><br><span class="line">    sort(data+<span class="number">1</span>,data+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=lower_bound(data+<span class="number">1</span>,data+n+<span class="number">1</span>,a[i])-data;  <span class="comment">//离散化</span></span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">		d[x].push_back(y);</span><br><span class="line">		d[y].push_back(x);</span><br><span class="line">	&#125;</span><br><span class="line">	dfs1(<span class="number">1</span>,<span class="number">0</span>); </span><br><span class="line">	dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">	blo=n*<span class="number">2</span>/<span class="built_in">sqrt</span>(m*<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">		<span class="keyword">if</span> (st[x]&gt;st[y])swap(x,y);  <span class="comment">//保证stx&lt;sty</span></span><br><span class="line">		q[i].id=i;</span><br><span class="line">		q[i].lca=Lca(x,y);  </span><br><span class="line">		<span class="keyword">if</span> (q[i].lca==x)    <span class="comment">//x,y在以x为根的子树中</span></span><br><span class="line">		&#123;</span><br><span class="line">			q[i].l=st[x];</span><br><span class="line">			q[i].r=st[y];</span><br><span class="line">			q[i].ll=st[x]/blo;</span><br><span class="line">			q[i].rr=st[y]/blo;</span><br><span class="line">			q[i].lca=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			q[i].l=ed[x];</span><br><span class="line">			q[i].r=st[y];</span><br><span class="line">			q[i].ll=ed[x]/blo;</span><br><span class="line">			q[i].rr=st[y]/blo;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(q+<span class="number">1</span>,q+m+<span class="number">1</span>,cmp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (l&gt;q[i].l)calc(his[--l]);</span><br><span class="line">		<span class="keyword">while</span> (r&lt;q[i].r)calc(his[++r]);</span><br><span class="line">		<span class="keyword">while</span> (l&lt;q[i].l)calc(his[l++]);</span><br><span class="line">		<span class="keyword">while</span> (r&gt;q[i].r)calc(his[r--]);</span><br><span class="line">		<span class="keyword">if</span> (q[i].lca)calc(q[i].lca);</span><br><span class="line">		ans[q[i].id]=tmp;</span><br><span class="line">		<span class="keyword">if</span> (q[i].lca)calc(q[i].lca);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 树上莫队 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P4450 双亲数]]></title>
      <url>/2019/07/10/p4450/</url>
      <content type="html"><![CDATA[<p>小 D 是一名数学爱好者，他对数字的着迷到了疯狂的程度。</p>
<p>我们以 d = gcd(a, b) 表示 a 、b 的最大公约数，小D执著的认为，这样亲密的关系足可以用双亲来描述，此时，我们称有序数对 (a, b) 为d的双亲数。</p>
<p>与正常双亲不太相同的是，对于同一个 d ，他的双亲太多了 &gt;_&lt;</p>
<p>比如， (4, 6), (6, 4), (2, 100) 都是 2 的双亲数。<br>于是一个这样的问题摆在眼前，对于 0&lt;a&lt;=A, 0&lt;b&lt;=B ，有多少有序数对 (a, b) 是 d 的双亲数？</p>
<a id="more"></a>
<p>看完题目，就知道了是要求这个式子</p>
<script type="math/tex; mode=display">\sum_{a=1}^A\sum_{b=1}^B\ [gcd(a,b)=d]</script><p>考虑莫反，设$f(x)=\begin{cases} 1&amp;(x=d)&amp;\\ 0&amp;(x\ne d)&amp;\end{cases}$</p>
<p>那么我们要找到一个$g$使得$f=g<em>1$，即$f(x)=\sum_{k|x}g(x)$，因为$1$的逆是$\mu$，所以$g=f</em>\mu$</p>
<script type="math/tex; mode=display">g(x)=\sum_{k|x}\mu(\frac{x}{k})[k=d]</script><script type="math/tex; mode=display">g(x)=\mu(\frac{x}{d})[d|x]</script><p>假设我们已经求出来$g$，那么就可以对式子进行化简了</p>
<script type="math/tex; mode=display">\sum_{a=1}^A\sum_{b=1}^B\ f(gcd(a,b))</script><script type="math/tex; mode=display">\sum_{a=1}^A\sum_{b=1}^B\sum_{k|a,k|b}\ g(k)</script><script type="math/tex; mode=display">\sum_{k=1}^{min(A,B)}g(k)\ \sum_{a=1}^A\sum_{b=1}^B\ [k|a]\ [k|b]</script><script type="math/tex; mode=display">\sum_{k=1}^{min(A,B)}g(k)\ \lfloor\frac{A}{k}\rfloor\ \lfloor\frac{B}{k}\rfloor</script><p>然后对这个式子整除分块就可以了</p>
<p>至于$g$怎么求，我们把$\mu$筛出来，然后就可以求每个$g(x)$，再做一个前缀和就可以$O(1)$询问区间$g$的和了</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,d,mul[N+<span class="number">5</span>],v[N+<span class="number">5</span>],prime[N+<span class="number">5</span>],cnt,g[N+<span class="number">5</span>],sg[N+<span class="number">5</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	mul[<span class="number">1</span>]=<span class="number">1</span>;v[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=N;i++)       <span class="comment">//线筛筛μ</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!v[i])</span><br><span class="line">		&#123;</span><br><span class="line">			prime[++cnt]=i;</span><br><span class="line">			mul[i]=<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;=N;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			v[prime[j]*i]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i%prime[j]!=<span class="number">0</span>)mul[i*prime[j]]=-mul[i];</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				mul[i*prime[j]]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)     <span class="comment">//处理g函数</span></span><br><span class="line">		<span class="keyword">if</span> (i%d==<span class="number">0</span>)</span><br><span class="line">			g[i]=mul[i/d];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)    <span class="comment">//前缀和</span></span><br><span class="line">		sg[i]=sg[i<span class="number">-1</span>]+g[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;d;</span><br><span class="line">	make();</span><br><span class="line">	<span class="keyword">if</span> (a&gt;b)swap(a,b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=a;l=r+<span class="number">1</span>)     整除分块</span><br><span class="line">	&#123;</span><br><span class="line">		r=min(a/(a/l),b/(b/l));</span><br><span class="line">		ans+=(sg[r]-sg[l<span class="number">-1</span>])*<span class="number">1L</span>L*(a/l)*<span class="number">1L</span>L*(b/l)*<span class="number">1L</span>L;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>常数大，代码丑(╯︵╰)<em>**</em></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P4454 [CQOI2018]破解D-H协议]]></title>
      <url>/2019/06/28/p4454/</url>
      <content type="html"><![CDATA[<p>求解类似如下方程</p>
<script type="math/tex; mode=display">A\equiv g^a\ (mod\ P),B\equiv g^b\ (mod\ P)</script><script type="math/tex; mode=display">K\equiv A^b\ (mod\ P),K\equiv B^a\ (mod\ P)</script><a id="more"></a>
<p>第一个行的式子很熟悉啊QAQ，$g$和$p$不互质，就是$\text{Ex_BSGS}$了</p>
<p>求出$A$之后带到下面的式子<strong>快速幂</strong>就完了</p>
<p>就拿第一行左边的$A\equiv g^a (mod P)$来说了</p>
<p>设$G=gcd(g,P)$，如果$G&gt;1$，就对$A/G,P/G,g/G$</p>
<p>式子变成了$g^{a-1}\times \frac{g}{G}\equiv\frac{A}{G} (mod \frac{P}{G})$</p>
<p>而如果$G\nmid A$并且$A\ne-1$，方程无解（此题没有无解的情况）</p>
<p>这样子一直到$G=1$，再把$\frac{g}{G}$移到右边，然后就可以用$BSGS$算法求解了</p>
<p>$BSGS$算法是用来求解形如$A^x\equiv B (mod P)$，其中$A,P$互质，的最小正整数解$x$</p>
<p>就拿刚刚的字母写了</p>
<p>设$M=\left \lfloor \sqrt P \right \rfloor,x=iM-j,1\le i,j\le M$</p>
<p>带到方程中$A^{iM-j}\equiv B (mod P)$</p>
<p>化一下得到$(A^M)^i\equiv B\times A^j (mod P)$</p>
<p>然后对$B\times A^j$哈希一下就做完了</p>
<p>sb了，没看到是原根，所以直接bsgs= =</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> A,B,p,g,n,a,b,K;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; f;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>     <span class="comment">//最大公约数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!b)<span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span>   <span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x&amp;<span class="number">1</span>)s=s*a%p;</span><br><span class="line">		a=a*a%p;</span><br><span class="line">		x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span>  <span class="comment">//扩欧求逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		exgcd(b,a%b,x,y);</span><br><span class="line">		<span class="keyword">int</span> t=x;</span><br><span class="line">		x=y;</span><br><span class="line">		y=t-a/b*y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>   <span class="comment">//逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	exgcd(a,b,x,y);</span><br><span class="line">	<span class="keyword">return</span> (x%b+b)%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsgs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f.clear();</span><br><span class="line">	<span class="keyword">int</span> m=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		b=b*a%p;</span><br><span class="line">		f[b]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	b=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> tmp=mypow(a,m,p);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		b=b*tmp%p;</span><br><span class="line">		<span class="keyword">if</span> (f[b])<span class="keyword">return</span> (i*m-f[b]+p)%p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exbsgs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (b==<span class="number">1</span>||p==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> g=gcd(a,p),k=<span class="number">0</span>,na=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (g!=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		k++;b/=g;p/=g;na=na*(a/g)%p;</span><br><span class="line">		<span class="keyword">if</span> (na==b)<span class="keyword">return</span> k;</span><br><span class="line">		g=gcd(a,p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bsgs(a,b*inv(na,p)%p,p)+k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;g&gt;&gt;p&gt;&gt;n;</span><br><span class="line">	g%=p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B;</span><br><span class="line">		A%=p;</span><br><span class="line">		B%=p;</span><br><span class="line">		b=exbsgs(g,B,p);</span><br><span class="line">		a=mypow(A,b,p);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> bsgs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P4861 按钮]]></title>
      <url>/2019/06/28/p4861/</url>
      <content type="html"><![CDATA[<p>房间的铁门上有一个按钮，还有一个显示屏显示着“1”。<br>旁边还有一行小字：“这是一个高精度M进制计算器，每按一次按钮，屏幕上的数便会乘以K。当个位数再次变为1时，门就开了。”<br>由于Ada急于出去，所以你要在1s之内求出她的最小按键次数。</p>
<a id="more"></a>
<p>首先我们看到题目，每次在$M$进制下对$1$乘$k$，也就是对$k$乘方，最后还是得到$1$</p>
<p>这样我们就可以列出同余方程$k^x\equiv 1 (mod M)$</p>
<p>而初始状态为$1$，即$k^0=1$</p>
<p>所以答案就是满足方程的最小的正整数$x$</p>
<p>其实这道题是$\text{Ex_BSGS}$，因为题目不满足$k$和$M$互质</p>
<p>考虑我们在做$\text{Ex_BSGS}$时，每次取出$g=gcd(k,M),b’=\frac{b}{g},M’=\frac{M}{g},k’=\frac{k}{g}$</p>
<p>得到新方程$k^{x-1}\times k’\equiv b’ (mod M’)$</p>
<p>移项得到$k^{x-1}\equiv \frac{b’}{k’} (mod M’)$</p>
<p>无解的情况就是$g\nmid b$并且$b\ne1$</p>
<p>证明就不证了，不会的可以去看这篇<a href="https://www.luogu.org/blog/sdlang/solution-p4195" target="_blank" rel="noopener">文章</a>QAQ</p>
<p>直到$g=1$，即$k$，$M$互质，就可以用$BSGS$求解了</p>
<p>而题目给的$b$是$1$，那么我们回去看这个过程，$k,M$不互质说明$g&gt;1$</p>
<script type="math/tex; mode=display">g>1,x\ne0\Rightarrow g\nmid b\Rightarrow \text{无解}</script><p>所以这个题特判下$k,M$互不互质然后跑$BSGS$就好了</p>
<p>简单说下$BSGS$怎么写吧</p>
<p>设$n=\left \lfloor \sqrt M \right \rfloor,x=i\times n-j,1\le i,j\le n$，原方程就变为</p>
<script type="math/tex; mode=display">k^{i\times n-j}\equiv 1\ (mod\ M)</script><script type="math/tex; mode=display">(k^n)^i\equiv k^j\ (mod\ M)</script><p>然后把$k^j$求出来哈希一下就可以啦</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m,k;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; f;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span>   <span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x&amp;<span class="number">1</span>)s=s*a%p;</span><br><span class="line">		a=a*a%p;</span><br><span class="line">		x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>    <span class="comment">//最大公约数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!b)<span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;k;</span><br><span class="line">	<span class="keyword">if</span> (gcd(m,k)!=<span class="number">1</span>)     <span class="comment">//特判无解</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Let's go Blue Jays!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(m)),b=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    <span class="comment">//k^j</span></span><br><span class="line">	&#123;</span><br><span class="line">		b=b*k%m;</span><br><span class="line">		f[b]=i;</span><br><span class="line">	&#125;</span><br><span class="line">	b=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> tmp=mypow(k,n,m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    <span class="comment">//(k^n)^i</span></span><br><span class="line">	&#123;</span><br><span class="line">		b=b*tmp%m;</span><br><span class="line">		<span class="keyword">if</span> (f[b]&amp;&amp;(i*n-f[b]+m)%m!=<span class="number">0</span>)   <span class="comment">//有解且不为0</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;(i*n-f[b]+m)%m&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"Let's go Blue Jays!"</span>&lt;&lt;<span class="built_in">endl</span>;   <span class="comment">//无解</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> bsgs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一周总结19.6.23-19.6.28]]></title>
      <url>/2019/06/28/week1/</url>
      <content type="html"><![CDATA[<p>这周学了数论，感觉好<del>颓废啊</del></p>
<a id="more"></a>
<p>先是照着一本通的进度来的，质数啊，乘方啊，什么的</p>
<p>把之前学的<strong>快速幂</strong>，<strong>线性筛</strong>又复习了一遍，那个素数分布定理挺重要的</p>
<p>质因数分解没啥好说的，<strong>樱花</strong>那道题是道比较好玩的题</p>
<p>然后就是约数，什么$\sqrt N$求出约数，然后那个唯一分解定理是很重要的，很多题都要用到</p>
<p>最大公约数和最小公倍数的求法，都很熟悉了，还有高精版的求最大公约数，就是把那两个数约一约再求</p>
<p>把$Hankson$的趣味题写了，很久以前的坑终于填上了，以前的方法太麻烦，还是推式子化式子有意思</p>
<p>最重要的一章是同余问题</p>
<p>说下那些定理吧，不说怎么证的了（也说不过来）</p>
<p><strong>欧拉定理</strong>，<strong>费马小定理</strong>（这个很好证，带到欧拉定理就行了），<strong>欧拉定理的推论</strong>（这个一带也证完了）</p>
<p>然后<strong>扩展欧几里得定理</strong>，这个定理非常的重要！！求<strong>逆元</strong>，<strong>中国剩余定理都要用到</strong></p>
<p>扩欧解同余方程，这个化一下式子就很简单了</p>
<p><strong>逆元</strong>，在模意义下除一个数，因为一些<del>奇怪的性质</del>，所以相当于乘<strong>逆元</strong>，求逆元的话解同余方程或者模数是质数用<strong>费马小定理</strong>就可以直接算了</p>
<p><strong>中国剩余定理</strong>，求解同余方程组，而模数都是两两互质的，这个比较好做啊，不多说了</p>
<p>然后跑去学了<strong>扩展中国剩余定理</strong>，是在模数两两不互质的情况下，这就需要用到扩欧解同余方程了，然后对解处理一下也做完了</p>
<p>话说只要会<strong>扩展中国剩余定理</strong>就可以做出来$NOI2018$的$t1$辣，然后就有铜牌了，莫名激动QAQ</p>
<p><strong>高次同余方程</strong>，这个用$BSGS$求解，思路很简单，大体上是<strong>分块</strong>思想，然后用哈希就做完了</p>
<p>学完这个又跑去学了扩展$BSGS$，这个是处理所有情况的，只要对式子都除一些东西，然后继续跑$BSGS$就完事了</p>
<p>同余完了是矩阵</p>
<p>第一次觉得矩阵乘法不难</p>
<p><strong>矩阵快速幂</strong>的思想和<strong>快速幂</strong>的思想是一样的，然后学了<strong>矩阵加速</strong>，那天日推有<strong>高斯消元</strong>就做了，矩阵魅力无穷qwq</p>
<p><strong>组合数</strong></p>
<p>这个东西以前一直没学好，现在可能理解点了</p>
<p><strong>二项式定理</strong>，以前觉得好神仙啊，看不懂哇，现在看看也挺<del>简单</del>的嘛</p>
<p>$Lucas$定理，是求在模意义下的组合数，这个定理很好用，写起来也很简单，但要保证模数是质数</p>
<p>$ExLucas$，这个是不保证模数是质数，也比较简单，找个规律，<del>暴力</del>处理阶乘就好了</p>
<p><strong>卡特兰数</strong>，这个东西的证明真的有意思，似乎不太常用，数据一大就得高精了，真<del>麻烦</del></p>
<p>博弈论不说了，学的不太好</p>
<p>夏令营似乎要讲<strong>莫反</strong>和<strong>杜教筛</strong>，跑去学了<strong>狄里克雷卷积</strong>和<strong>莫反</strong>，非常自闭，就写了一道题练练</p>
<p>dsq：lrz学数学的能力和他写别的题的能力形成鲜明对比</p>
<p>然后有一天日推有个数论分块，就去学了，不是很难，又把模积和做了，之后就是找比较简单的题做了</p>
<p><del>学数学真的好颓废啊QAQ</del></p>
<p>鼓励鼓励自己QAQ</p>
<h3 id="与其被自己的本性牵着走而痛苦，倒不如试着改变自己。"><a href="#与其被自己的本性牵着走而痛苦，倒不如试着改变自己。" class="headerlink" title="与其被自己的本性牵着走而痛苦，倒不如试着改变自己。"></a>与其被自己的本性牵着走而痛苦，倒不如试着改变自己。</h3>]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P4195 【模板】exBSGS/Spoj3105 Mod]]></title>
      <url>/2019/06/27/p4195/</url>
      <content type="html"><![CDATA[<p>已知数a,p,b，求满足a^x≡b(mod p)的最小自然数x。</p>
<a id="more"></a>
<h3 id="扩展BSGS的板子题"><a href="#扩展BSGS的板子题" class="headerlink" title="扩展BSGS的板子题"></a>扩展BSGS的板子题</h3><p>回忆$BSGS$算法，给定整数$a,b,p$，其中$a,p$互质，求方程$a^x\equiv b (mod p)$的最小整数解$x$</p>
<p><strong>做法</strong>：设$x=i\times m-j,m=\left \lceil \sqrt p \right \rceil,1\le j\le m,1\le i\le m$</p>
<p>方程变为$a^{im-j}\equiv b (mod p)$</p>
<p>化一下$(a^m)^i\equiv b\times a^j (mod p)$</p>
<p>这时只要把$(a^m)^i$和$b\times a^j$预处理出来丢到哈希表里就做完了</p>
<p>而现在的$a,p$不互质了，所以我们要考虑其他的方法，也就是$\text{Ex_BSGS}$</p>
<p>那么我们设$g=gcd(a,p)$</p>
<p>根据模的分配率，方程变为$\frac{a^x}{g}\equiv \frac{b}{g} (mod \frac{p}{g})$</p>
<p>无解情况就是$g\nmid b$并且$b\ne 1$</p>
<p>我们来证明一下</p>
<p>设$a’=\frac{a}{g},p’=\frac{p}{g}$，那么$a=a’g,p=p’g$</p>
<p>代入到原方程中变为$(a’g)^x\equiv b (mod p’g)$</p>
<script type="math/tex; mode=display">a'^xg^x+yp'g=b</script><script type="math/tex; mode=display">g(a'^xg^{x-1}+yp')=b</script><p>这样子$g$就是$b$的因子，而只有在$b=1$时，$a^0=1$，其余情况若$g\nmid b$，方程无解</p>
<p>证毕</p>
<p>那么我们再把上面的式子化一下变为$a^{x-1}\times\frac{a}{g}\equiv \frac{b}{g} (mod \frac{p}{g})$</p>
<p>而$\frac{p}{g}$一定是比$p$小的，所以可以一直约到$a,\frac{p}{g}$互质</p>
<p>设$na=\prod_{i=1}^k\frac{a}{g_i}$</p>
<p>原式就可以写成$a^{x-k}\equiv \frac{b}{\prod_{i=1}^k g\times na}(mod \frac{p}{\prod_{i=1}^kg})$ ，$k$是做了几次化简</p>
<p>这样子就可以用$BSGS$求解啦</p>
<p>有一点需要注意，因为是在模意义下运算，所以除以$na$时要乘其逆元</p>
<p>因为最后一直化到了$\frac{a}{\prod_{i=1}^kg}$和$\frac{p}{\prod_{i=1}^kg}$互质，所以$na$和$\frac{p}{\prod_{i=1}^kg}$看起来也很互质</p>
<p>就可以用<strong>扩欧</strong>求逆元了</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a,p,b;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; f;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>     <span class="comment">//最大公约数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span>  <span class="comment">//扩欧</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		exgcd(b,a%b,x,y);</span><br><span class="line">		<span class="keyword">int</span> t=x;</span><br><span class="line">		x=y;</span><br><span class="line">		y=t-a/b*y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>    <span class="comment">//逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	exgcd(a,b,x,y);</span><br><span class="line">	<span class="keyword">return</span> (x%b+b)%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x&amp;<span class="number">1</span>)s=s*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsgs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span>    <span class="comment">//BSGS算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f.clear();</span><br><span class="line">    <span class="keyword">int</span> m=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p));</span><br><span class="line">    b%=p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b=b*a%p;</span><br><span class="line">        f[b]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tmp=mypow(a,m,p);</span><br><span class="line">    b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b=b*tmp%p;</span><br><span class="line">        <span class="keyword">if</span> (f[b])<span class="keyword">return</span> (i*m-f[b]+p)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exbsgs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">1</span>||p==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">//特殊情况，x=0时最小解</span></span><br><span class="line">    <span class="keyword">int</span> g=gcd(a,p),k=<span class="number">0</span>,na=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (g&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b%g!=<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;    <span class="comment">//无法整除则无解</span></span><br><span class="line">        k++;b/=g;p/=g;na=na*(a/g)%p;</span><br><span class="line">    	<span class="keyword">if</span> (na==b)<span class="keyword">return</span> k;   <span class="comment">//na=b说明前面的a的次数为0，只需要返回k</span></span><br><span class="line">    	g=gcd(a,p); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> f=bsgs(a,b*inv(na,p)%p,p);</span><br><span class="line">    <span class="keyword">if</span> (f==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> f+k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;p&gt;&gt;b;</span><br><span class="line">    <span class="keyword">while</span>(a||b||p)</span><br><span class="line">    &#123;</span><br><span class="line">    	a%=p;b%=p;</span><br><span class="line">        <span class="keyword">int</span> t=exbsgs(a,b,p);</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">-1</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">"No Solution"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;p&gt;&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>$BSGS$写挂了调了半天QAQ</p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> bsgs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P2183 [国家集训队]礼物]]></title>
      <url>/2019/06/26/p2183/</url>
      <content type="html"><![CDATA[<p>一年一度的圣诞节快要来到了。每年的圣诞节小E都会收到许多礼物，当然他也会送出许多礼物。不同的人物在小E心目中的重要性不同，在小E心中分量越重的人，收到的礼物会越多。小E从商店中购买了n件礼物，打算送给m个人，其中送给第i个人礼物数量为wi。请你帮忙计算出送礼物的方案数（两个方案被认为是不同的，当且仅当存在某个人在这两种方案中收到的礼物不同）。由于方案数可能会很大，你只需要输出模P后的结果。</p>
<a id="more"></a>
<p>看到题之后，应该就能写出式子</p>
<script type="math/tex; mode=display">ans=\prod_{i=1}^{m}C_{n-\sum_{j=1}^{i-1}w_j}^{w_i}(mod\ P)</script><p>式子看起来很麻烦，其实很好想</p>
<p>当我们给第一个人送礼物的时候，我们有$n$个礼物，要选$w_1$个，方案就有$C_n^{w_{1}}$种</p>
<p>然后给第二个人送礼物的时候，我们剩下$n-w_1$个礼物，要选$w_2$个，方案有$C_{n-w_1}^{w_2}$种</p>
<p>就这样一直送到第$m$个人，而根据乘法原理，就得到这个式子了</p>
<p>这道题似乎就做完了，但在算$C_n^m(mod p_i^{c_i})$时又遇到了瓶颈：$p_i^{c_i}$不是质数</p>
<p>既然不是质数，我们就不能用$Lucas$定理来求，这就需要用到$ExLucas$了</p>
<p>虽然是扩展的，但和$Lucas$完全沾不上边</p>
<p>我们观察到题目给了$P=\prod _{i=1}^{t}p_{i}^{c_i}$</p>
<p>而$p_i$是质数，那么所有的$p_i^{c_i}$都是互质的</p>
<p>那么我们只要对于每个$p_i^{k=c_i}$求出其$C_n^m mod p_i^k$的值，然后用<strong>中国剩余定理</strong>就可以算出最小正整数解</p>
<p>问题转化成了如何快速的求$C_n^m mod p^k$</p>
<p>把组合数展开，我们得到</p>
<script type="math/tex; mode=display">\frac{n!}{m!(n-m)!}\ mod\ p^k</script><p>那么只要快速求出模意义下的阶乘就好了</p>
<p>如果我们要求$x! mod p^k$，假设$x=17,p=2,k=3$，观察一下式子</p>
<script type="math/tex; mode=display">17!=1\times2\times3\times4\times5\times6\times7\times8\times9\times10\times11\times12\times13\times14\times15\times16\times17</script><p>化式子$17!=$</p>
<script type="math/tex; mode=display">2\times4\times6\times8\times10\times12\times14\times16\times1\times3\times5\times7\times9\times11\times13\times15\times17</script><script type="math/tex; mode=display">(2\times1)\times(2\times2)\times(2\times3)\times…\times(2\times8)\times(1\times3\times5\times…\times17)</script><script type="math/tex; mode=display">2^8\times(1\times2\times3\times…\times8)\times(1\times3\times5\times…\times17)</script><script type="math/tex; mode=display">2^8\times8!\times(1\times3\times5\times7\times9\times11\times13\times15\times17)</script><p>而在模$p^k=2^3=8$意义下$1\times3\times5\times7=9\times11\times13\times15$</p>
<p>所以式子就变成了</p>
<script type="math/tex; mode=display">2^8\times8!\times(1\times3\times5\times7)^2\times17</script><p>那么$x!$就变成了$p^n\times t!\times(a_1\times a_2\times…a_m)^r\times a_{m+1}\times…a_{q}$</p>
<p>可以看出$n=t=\left \lfloor \frac{x}{p} \right \rfloor,r=\left \lfloor \frac{x}{p^k} \right \rfloor$，其中$t!$可以一直递归求解，然后后面的暴力算</p>
<p>这样这个题就做完啦QAQ</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">200000</span>],n,m,P,cnt,z[<span class="number">200000</span>],a[<span class="number">200000</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span>     <span class="comment">//扩欧</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		exgcd(b,a%b,x,y);</span><br><span class="line">		<span class="keyword">int</span> t=x;</span><br><span class="line">		x=y;</span><br><span class="line">		y=t-a/b*y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span>      <span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x&amp;<span class="number">1</span>)s=s*a%p;</span><br><span class="line">		a=a*a%p;</span><br><span class="line">		x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>    <span class="comment">//求阶乘</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!n)<span class="keyword">return</span> <span class="number">1</span>;       </span><br><span class="line">	<span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b;i++)    <span class="comment">//处理a1*a2*…am</span></span><br><span class="line">		<span class="keyword">if</span> (i%a!=<span class="number">0</span>)</span><br><span class="line">			s=s*i%b;</span><br><span class="line">	s=mypow(s,n/b,b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n%b;i++)  <span class="comment">//处理am+1*…aq</span></span><br><span class="line">		<span class="keyword">if</span> (i%a!=<span class="number">0</span>)</span><br><span class="line">			s=s*i%b; </span><br><span class="line">	<span class="keyword">return</span> s*fac(n/a,a,b)%b;  <span class="comment">//递归求解</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>    <span class="comment">//求逆元</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,y;</span><br><span class="line">	exgcd(a,b,x,y);</span><br><span class="line">	<span class="keyword">return</span> (x%b+b)%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>   <span class="comment">//处理组合数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> nn=fac(n,a,b),mm=fac(m,a,b),nm=fac(n-m,a,b),po=<span class="number">0</span>;  <span class="comment">//求阶乘</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i/=a)      <span class="comment">//处理n^p中的p</span></span><br><span class="line">		po+=i/a;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=m;i;i/=a)</span><br><span class="line">		po-=i/a;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=n-m;i;i/=a)</span><br><span class="line">		po-=i/a;</span><br><span class="line">	<span class="keyword">return</span> nn*mypow(a,po,b)%b*inv(mm,b)%b*inv(nm,b)%b; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;P;</span><br><span class="line">	<span class="keyword">int</span> pp=P;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=P;i++)     <span class="comment">//分解</span></span><br><span class="line">		<span class="keyword">if</span> (pp%i==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> x=i;</span><br><span class="line">			z[++cnt]=i;</span><br><span class="line">			<span class="keyword">while</span> (pp%x==<span class="number">0</span>)x*=i;</span><br><span class="line">			x/=i;</span><br><span class="line">			p[cnt]=x;</span><br><span class="line">			pp/=x;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span> (pp!=<span class="number">1</span>)p[++cnt]=pp,z[cnt]=pp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">		a[i]=C(m,n,z[i],p[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)    <span class="comment">//中国剩余定理</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> pi=P/p[i],x,y;</span><br><span class="line">		exgcd(pi,p[i],x,y);</span><br><span class="line">		ans=((ans+pi*a[i]*x%P)+P)%P;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 组合数 </tag>
            
            <tag> lucas </tag>
            
            <tag> 中国剩余定理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Catalan数]]></title>
      <url>/2019/06/25/Catalan/</url>
      <content type="html"><![CDATA[<p>学了$Catalan$数，赶紧复习怕自己忘记</p>
<a id="more"></a>
<p>先丢个问题吧</p>
<p><strong>问题</strong>：给$n$个$0$和$n$个$1$，它们按照某种顺序排成长度为$2n$的数列，对于每个前缀，$0$的数量都不少于$1$的数量的数列个数。</p>
<p><strong>解</strong>：令这些数排成一个长度为$2n$的数列，且不满足每个前缀中$0$的数列不少于$1$的数量，那么必定存在一个最小的位置$2i+1∈[1,2n]$，使得这个前缀中有$i$个$0$，$i+1$个$1$，而对后面的数取反后，有$n-i-1$个$0$，$n-i$个$1$，于是我们得到了一个有$n-1$个$0$，$n+1$个$1$排成的数列。</p>
<p>同理，如果把有$n-1$个$0$，$n+1$个$1$排成的数列继续进行上述操作，就得到了有$n$个$0$，$n$个$1$排成的数列。</p>
<p>这便构成了一个双射：</p>
<ol>
<li><p>由$n$个$0$和$n$个$1$排成的存在一个前缀中$1$比$0$多的数列。</p>
</li>
<li><p>由$n-1$个$0$和$n+1$个$1$排成的数列。</p>
</li>
</ol>
<p>然后式子就出来了</p>
<script type="math/tex; mode=display">Cat_n=C_{2n}^n-C_{2n}^{n-1}=\frac{(2n)!}{n!\times n!}-\frac{(2n)!}{(n-1)!\times(n+1)!}=\frac{1}{n+1}\times C_{2n}^n</script><p>这就是<strong>卡特兰</strong>$(Catalan)$数了</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 卡特兰数 </tag>
            
            <tag> 组合数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lucas定理以及证明]]></title>
      <url>/2019/06/25/Lucas/</url>
      <content type="html"><![CDATA[<p>对着<del>无数篇</del>博客终于$yy$懂了$Lucas$定理，兴奋之际赶紧写下来</p>
<a id="more"></a>
<h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>如果$p$是质数，那么$C_{n}^{m}\equiv C_{n\mod p}^{m\mod p}\times C_{n/p}^{m/p}(mod p)$</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>首先我们要知道一个性质：</p>
<p>如果$p$为质数，那么有$C_{p}^{n}\equiv 0(mod p)$，其中$n\ne 0,p$</p>
<p>这个很<del>显然</del>吧，考虑把组合数的式子写出来：$C_p^n=\frac{p!}{n!(p-n)!}$</p>
<p>把$p$提出来就变成了$\frac{(p-1)!}{n!(p-n)!}\times p$，就证完了</p>
<p>这个性质有什么用呢？别着急，我们先往下走</p>
<p>由<strong>二项式定理</strong>得：$(x+1)^p=\sum _{i=0}^{p}C_p^i\times x^i$</p>
<p>而根据上面的性质，因为$n$只有在等于$0$或$p$时才为$1$，其余时都为$0$得到在模$p$意义下</p>
<script type="math/tex; mode=display">(x+1)^p\equiv x^p+1(mod\ p)</script><p>设$n=\left \lfloor \frac{n}{p} \right \rfloor\times p+n mod  p$</p>
<p>那么可得$(x+1)^n\equiv (x+1)^{\left \lfloor \frac{n}{p} \right \rfloor\times p}+(x+1)^{n mod p}(mod p)$</p>
<p>替换得$(x+1)^n\equiv (x^p+1)^{\left \lfloor \frac{n}{p} \right \rfloor}+(x+1)^{n mod p}(mod p)$</p>
<p>根据<strong>二项式定理</strong>，展开得</p>
<script type="math/tex; mode=display">\sum_{i=0}^{n}C_n^i\times x^i\equiv \sum_{j=0}^{\left \lfloor \frac{n}{p} \right \rfloor}C_{\left \lfloor \frac{n}{p} \right \rfloor}^j\times x^j+\sum_{k=0}^{n\ mod\ p}C_{n\ mod\ p}^{k}\times x^k(mod\ p)</script><p>观察这个式子，我们发现对于每一个$i$，都一定存在$j,k$与其对应，保证$x^i=x^j\times x^k$，约掉之后就是$Lucas$了</p>
<p>证毕</p>
<p>代码很好写，丢下<a href="https://www.luogu.org/problemnew/show/P3807" target="_blank" rel="noopener">板子题</a>代码QAQ<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,m,n,p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x&amp;<span class="number">1</span>)s=s*a%p;</span><br><span class="line">		a=a*a%p;</span><br><span class="line">		x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a=a*i%p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)b=b*i%p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-m;i++)b=b*i%p;</span><br><span class="line">	<span class="keyword">return</span> a*mypow(b,p<span class="number">-2</span>)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lucas</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!m)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> C(m%p,n%p)*lucas(m/p,n/p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span> (t--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;lucas(m,m+n)&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>扩展$Lucas$我会尽快学了补上的QAQ</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 组合数 </tag>
            
            <tag> lucas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P4159 [SCOI2009]迷路]]></title>
      <url>/2019/06/25/p4159/</url>
      <content type="html"><![CDATA[<p>windy在有向图中迷路了。 该有向图有 N 个节点，windy从节点 0 出发，他必须恰好在 T 时刻到达节点 N-1。 现在给出该有向图，你能告诉windy总共有多少种不同的路径吗？ 注意：windy不能在某个节点逗留，且通过某有向边的时间严格为给定的时间。</p>
<a id="more"></a>
<p>根据题意，可以写出转移方程</p>
<script type="math/tex; mode=display">f_{i,j}=\sum f_{r,j-w[r]}</script><p>$f_{i,j}$表示第$j$时刻在第$i$个点时的方案数，$r$为$i$的前驱，$w[r]$为距离</p>
<p>而$T\le 10^9$，所以肯定是不可行的，就要用到<strong>矩阵加速</strong></p>
<p>如果对于上面那个转移方程是无法矩阵加速的</p>
<p>但是边权只有$1…9$，我们可以把$j$分开表示，也就是把所有距离的情况都表示出来</p>
<p>那么对于上面的那个转移方程就有两种转移形式</p>
<ul>
<li><p>这个距离$j$不是真正的距离，那么$f_{r,j}$可以从$f_{r,j-1}$继承</p>
</li>
<li><p>这个$j$是真正的距离，那么$f_{r,j}$对$f_{i,j}$是有贡献的</p>
</li>
</ul>
<p>代码和拆点一样= =</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,t,d[<span class="number">500</span>][<span class="number">500</span>],s[<span class="number">500</span>][<span class="number">500</span>],b[<span class="number">500</span>][<span class="number">500</span>],p=<span class="number">2009</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jzc</span><span class="params">(<span class="keyword">int</span> x[<span class="number">500</span>][<span class="number">500</span>],<span class="keyword">int</span> y[<span class="number">500</span>][<span class="number">500</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">9</span>;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n*<span class="number">9</span>;j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n*<span class="number">9</span>;k++)</span><br><span class="line">				b[i][j]=(b[i][j]+x[i][k]*y[k][j]%p)%p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">9</span>;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n*<span class="number">9</span>;j++)</span><br><span class="line">			x[i][j]=b[i][j],b[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">8</span>;j++)     <span class="comment">//第一个的继承关系</span></span><br><span class="line">			d[i+j*n][i+(j<span class="number">-1</span>)*n]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">			d[i][j+n*((ch-<span class="string">'0'</span>)<span class="number">-1</span>)]=<span class="number">1</span>;   <span class="comment">//真正的边</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">9</span>;i++)</span><br><span class="line">		s[i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (t)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (t&amp;<span class="number">1</span>)jzc(s,d);</span><br><span class="line">		jzc(d,d);</span><br><span class="line">		t&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;s[<span class="number">1</span>][n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 图论 </tag>
            
            <tag> dp </tag>
            
            <tag> 矩阵加速 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于快速那些事]]></title>
      <url>/2019/06/24/fast/</url>
      <content type="html"><![CDATA[<p>这段时间学了些关于快速$*$的东西，及时复习一下以免忘记</p>
<a id="more"></a>
<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p>求$b^pmod k$，其中$p$是个很大的数，比如……$10^{100}$</p>
<p>暴力就t了，所以我们考虑</p>
<p>如果$p$是偶数，那么$b^p=b^{p/2}\times b^{p/2}$</p>
<p>如果$p$是奇数，那么$b^p=b^{p/2}\times b^{p/2}\times b$</p>
<p>这个过程可以一直下去，最后时间复杂度就是$O(log(p))$的</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (p)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (p&amp;<span class="number">1</span>)s=s*b%k;</span><br><span class="line">	b=b*b%k;</span><br><span class="line">	p&gt;&gt;=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="快速-龟速-乘"><a href="#快速-龟速-乘" class="headerlink" title="快速(龟速)乘"></a>快速(龟速)乘</h3><p>求$a\times b mod k$，其中$a,b$都是长整型数，也就是说相乘就会爆$long long$</p>
<p>怎么办呢，我们仍然考虑和<strong>快速幂</strong>一样的思路</p>
<p>如果$b$是偶数，那么$a\times b=a\times (b/2)+ a\times(b/2)$</p>
<p>如果$b$是奇数，那么$a\times b=a\times(b/2)+a\times(b/2)+a$</p>
<p>这个过程跟<strong>快速幂</strong>很类似，虽然时间是$O(log(b))$的，但很好的避免了爆$long long $的问题</p>
<p>不过话虽这么说，多个大常数很容易使程序t掉，所以如果不得已最好不要用<strong>快速乘</strong></p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (b)</span><br><span class="line">  &#123;</span><br><span class="line">	<span class="keyword">if</span> (b&amp;<span class="number">1</span>)s=(s+a)%k;</span><br><span class="line">    a=a*<span class="number">2</span>%k;</span><br><span class="line">    b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p> <del>口胡代码，有错见谅</del></p>
<h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><p>给你一个方阵$A$，求$A^k  mod p$</p>
<p>既然是快速幂，那肯定避免不了乘法，首先我们要了解矩阵乘法的定义</p>
<p>设$A,B$是两个矩阵，$C=A\times B$那么</p>
<ul>
<li><p>$A$的列数必须和$B$的行数相等</p>
</li>
<li><p>如果$A$是$n\times r$的矩阵，$B$是$r\times m$的矩阵，那么$C$是一个$n\times m$的矩阵</p>
</li>
<li><p>$C_{i,j}=\sum_{k=1}^{r}A_{i,k}\times B_{k,j}$</p>
</li>
<li><p>根据运算过程，显然矩阵乘法只有结合律没有交换律</p>
</li>
</ul>
<p>而对于矩阵的乘幂来说，只有方阵，即行列个数相等的矩阵，可以进行乘幂运算</p>
<p>在此，我们还需要了解一个概念——<strong>单位矩阵</strong></p>
<p>主对角线上的元素都是$1$，通常用$I$或$E$表示，图长这样子</p>
<script type="math/tex; mode=display">I=\begin{bmatrix}1&0&0&0&0\\0&1&0&0&0\\0&0&1&0&0\\0&0&0&1&0\\0&0&0&0&1\end{bmatrix}</script><p>这个东西可是非常的有用，任何数乘它都等于那个数本身，相当于线性运算中的$1$</p>
<p>然后<strong>矩阵快速幂</strong>就很好写出来啦<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,p=<span class="number">1e9</span>+<span class="number">7</span>,a[<span class="number">500</span>][<span class="number">500</span>],s[<span class="number">500</span>][<span class="number">500</span>],b[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jzc</span><span class="params">(<span class="keyword">int</span> x[<span class="number">500</span>][<span class="number">500</span>],<span class="keyword">int</span> y[<span class="number">500</span>][<span class="number">500</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span>(b));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">				b[i][j]=(b[i][j]+x[i][k]*y[k][j])%p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			x[i][j]=b[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[i][j],s[i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (k)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (k&amp;<span class="number">1</span>)jzc(s,a);</span><br><span class="line">		jzc(a,a);</span><br><span class="line">		k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;s[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可能还会有其他的一些快速$*$，以后学了会补充上。<del>咕咕咕</del></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P2421 [NOI2002]荒岛野人]]></title>
      <url>/2019/06/24/p2421/</url>
      <content type="html"><![CDATA[<p>克里特岛以野人群居而著称。岛上有排列成环行的M个山洞。这些山洞顺时针编号为1,2,…,M。岛上住着N个野人，一开始依次住在山洞C1,C2,…,CN中，以后每年，第i个野人会沿顺时针向前走Pi个洞住下来。</p>
<p>每个野人i有一个寿命值Li，即生存的年数。</p>
<p>奇怪的是，虽然野人有很多，但没有任何两个野人在有生之年处在同一个山洞中，使得小岛一直保持和平与宁静，这让科学家们很是惊奇。他们想知道，至少有多少个山洞，才能维持岛上的和平呢？</p>
<a id="more"></a>
<p>根据题目，设$x$为相遇天数，可以得到式子</p>
<script type="math/tex; mode=display">c_{i}+p_{i}\times x\equiv c_{j}+p_{j}\times x(mod\ M)\ (1\le i,j\le N)</script><p>我们要保证对于每一对$(i,j)$，这个式子都要<strong>无解</strong>或者求出来的$x&gt;min(l[i],[j])$，即在两个人有一个人死了之后相遇</p>
<p>把这个式子化一下，就变成了</p>
<script type="math/tex; mode=display">(p_i-p_j)\times x\equiv c_j-c_i(mod\ M)</script><p>写成方程的形式</p>
<script type="math/tex; mode=display">(p_i-p_j)\times x+M\times y=c_j-c_i</script><p>怎么解呢，我们不妨设$a=p_i-p_j,b=M,c=c_i-c_j$</p>
<p>方程就成了</p>
<script type="math/tex; mode=display">ax+by=c</script><p>设$g=gcd(a,b)$，当$g|c$时，设$a’=a/g,b’=b/g,c’=c/g$</p>
<p>我们可以用$exgcd$，即扩展欧几里得算发求出$a’x’+b’y’=1$的一组解$x’,y’$</p>
<p>两边乘$c’$，得到$a’c’x’+b’c’y’=c’$</p>
<p>两边乘$g$，得到$a’gc’x’+b’gc’y’=c’g$</p>
<p>化简得到$ac’x’+bc’y’=c$</p>
<p>于是我们得到了方程一组解$x_0=x’c’,y_0=y’c’$</p>
<p>因为$M$最大到$10^6$，所以从$Max_{i=1}^{n}c_i-10^6$枚举$M$，如果方程都无解或者$x&gt;min(l[i],[j])$，那这个$M$就是答案了</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,d[<span class="number">500</span>],p[<span class="number">500</span>],l[<span class="number">500</span>],mm;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!y)<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> gcd(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		exgcd(b,a%b,x,y);</span><br><span class="line">		<span class="keyword">int</span> t=x;</span><br><span class="line">		x=y;</span><br><span class="line">		y=t-a/b*y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> a=p[i]-p[j],b=m,c=d[j]-d[i],g=gcd(a,b),x,y;</span><br><span class="line">			<span class="keyword">if</span> (c%g!=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">			a/=g,b/=g,c/=g;	</span><br><span class="line">			exgcd(a,b,x,y);</span><br><span class="line">			<span class="keyword">if</span> (b&lt;<span class="number">0</span>)b=-b;			</span><br><span class="line">			x=(x*c%b+b)%b;</span><br><span class="line">			<span class="keyword">if</span> (x&lt;=min(l[i],l[j]))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;d[i]&gt;&gt;p[i]&gt;&gt;l[i],mm=max(mm,d[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=mm;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (check(i))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 扩展欧几里得 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P3846 [TJOI2007]可爱的质数]]></title>
      <url>/2019/06/24/p3846/</url>
      <content type="html"><![CDATA[<p>题意：求一个最小的$L$，满足$B^L\equiv N(mod P)$</p>
<a id="more"></a>
<p>这就需要用到$BSGS(Baby Step Giant Step)$算法了（其实就是个裸的板子题QAQ）</p>
<p>首先要知道$P$是质数，所以原式中的$L$会在模$P$意义下循环，最小解在$[0,P-1]$</p>
<p>我们设$L=i\times m-j$，其中$m=\left \lceil {\sqrt P} \right \rceil$，$1\le j\le m$,</p>
<p>则方程变为$B^{i\times m-j}\equiv N(mod P)$</p>
<p>移项得到$(B^{m})^{i}\equiv N\times B^{j}(mod P)$</p>
<p>而$B,m,n,P$都是已知的，我们选择哈希，把右边$N\times B^{j}mod P$的值预处理出来丢到$map$里</p>
<p>每次枚举$i$，计算出$(B^{m})^{i}mod P$的值，如果在$map$里出现，说明原方程成立，计算出来的$L$就是最小解了</p>
<p>有一点要注意的是，如果$B$是$P$的倍数，那么$N$必须也是$P$的倍数，否则无解，这个情况特判下就可以了</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p,b,n;</span><br><span class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; f;     <span class="comment">//哈希</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mypow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span>   <span class="comment">//快速幂</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x&amp;<span class="number">1</span>)s=s*a%p;</span><br><span class="line">		a=a*a%p;</span><br><span class="line">		x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;p&gt;&gt;b&gt;&gt;n;</span><br><span class="line">	<span class="keyword">if</span> (b%p==<span class="number">0</span>&amp;&amp;n%p!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"no solution"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> m=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p)),now=n%p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)       <span class="comment">//预处理N*B^j mod p</span></span><br><span class="line">	&#123;</span><br><span class="line">		now=now*b%p;</span><br><span class="line">		<span class="keyword">if</span> (!f[now])f[now]=i;</span><br><span class="line">	&#125;                  </span><br><span class="line">	now=mypow(b,m,p);</span><br><span class="line">	<span class="keyword">int</span> tmp=now;             <span class="comment">//枚举i</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (f[now])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;((i*m-f[now])%p+p)%p&lt;&lt;<span class="built_in">endl</span>;  <span class="comment">//防止负数</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		now=now*tmp%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"no solution"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> bsgs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[欧拉定理以及费马小定理的推论和证明]]></title>
      <url>/2019/06/23/olfm/</url>
      <content type="html"><![CDATA[<p>今天连续对着三篇博客终于懂了<strong>欧拉定理</strong>和<strong>费马小定理</strong>的推论和证明，及时复习以免忘记。</p>
<a id="more"></a>
<h3 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h3><p>内容：若正整数$a,n$互质，那么$a^{\varphi(n)} \equiv 1(mod n)$</p>
<p>证明：我们知道1~n中和$n$互质的数有${\varphi(n)}$个，为$x_{1},x_{2},x_{3}……x_{\varphi(n)}$，那么就可以设一个集合$M$，其元素为</p>
<p>$m_{1}=a\times x_{1}$</p>
<p>$m_{2}=a\times x_{2}$</p>
<p>$m_{3}=a\times x_{3}$</p>
<p>$……$</p>
<p>$m_{\varphi(n)}=a\times x_{\varphi(n)}$</p>
<p>那么得到两条性质</p>
<p><strong>性质一</strong>：集合$M$中的任意两个元素都不模$n$同余</p>
<p>证明：反证法。</p>
<p>假设$M$中有两个元素$m_{i},m_{j}$模$n$同余</p>
<p>所以$m_{i}\equiv m_{j}(mod n)$</p>
<p>替换得$a\times x_{i}\equiv a\times x_{j}(mod n)$</p>
<p>根据同余的同加性得到$a\times (x_{i}-x_{j})\equiv 0(mod n)$</p>
<p>因为$a$和$n$互质，所以$x_{i}-x{j}$是$n$的倍数</p>
<p>而每个$x_{i}$和$x_{j}$都比$n$小，所以上述结论不成立，原结论成立。</p>
<p>证毕</p>
<p><strong>性质二</strong>：集合$M$中的数除以$n$的余数都与$n$互质</p>
<p>证明：首先$m_{i}=a\times x_{i}$，其中$x_{i},a$都与与$n$互质，那么$m_{i}$与$n$互质</p>
<p>由互质得$gcd(m_{i},n)=1$</p>
<p>由欧几里得定理得$gcd(m_{i},n)=gcd(n,m_{i} mod n)=1$</p>
<p>证毕</p>
<p>然后就可以化式子了</p>
<p>由<strong>性质二</strong>我们知道集合$M$中所有元素模$n$都能找到唯一一个$x_{i}$与其对应，即对于每个$m_{i}$都有一个$x_{j}$和它模$n$同余</p>
<p>那么把它们乘起来得到</p>
<p>$m_{1}\times m_{2}\times m_{3}……m_{\varphi (n)}\equiv x_{1}\times x_{2}\times x_{3}……x_{\varphi (n)}(mod n)$</p>
<p>带入</p>
<p>$a\times x_{1}\times a\times x_{2}\times a\times x_{3}……a\times x_{\varphi (n)}\equiv x_{1}\times x_{2}\times x_{3}……x_{\varphi (n)}(mod n)$</p>
<p>化简</p>
<p>$a^{\varphi(n)}\times x_{1}\times x_{2}\times x_{3}……x_{\varphi (n)}\equiv x_{1}\times x_{2}\times x_{3}……x_{\varphi (n)}(mod n)$</p>
<p>根据同余的同乘性得</p>
<p>$a^{\varphi(n)} \equiv 1(mod n)$</p>
<p>证毕</p>
<h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>内容：若$p$是质数，则对于任意正整数$a$，有$a^p\equiv a(mod p)$</p>
<p>证明：根据欧拉函数的性质可得$\varphi(p)=p-1$</p>
<p>则$a^{\varphi(p)+1}\equiv a(mod p)$</p>
<p>由欧拉定理可得$a^{\varphi(p)}\equiv 1(mod p)$成立</p>
<p>故原式成立</p>
<p>证毕</p>
<h3 id="欧拉定理的推论"><a href="#欧拉定理的推论" class="headerlink" title="欧拉定理的推论"></a>欧拉定理的推论</h3><p>内容：若正整数$a,n$互质，则对于任意正整数$b$，都有$a^b\equiv a^{b mod \varphi(n)}(mod n)$</p>
<p>证明：移项得$a^{b-b mod \varphi(n)}\equiv 1(mod n)$</p>
<p>因为$\varphi(n)|b-b mod \varphi(n)$，所以可设$b-b mod \varphi(n)=k\times \varphi(n)$</p>
<p>式子变为$a^{k\times \varphi(n)}\equiv 1(mod n)$</p>
<p>$(a^{k})^{\varphi(n)}\equiv 1(mod n)$</p>
<p>由于$a,n$互质，那么$a^{k},n$也互质</p>
<p>再根据<strong>欧拉定理</strong>，原式成立</p>
<p>证毕</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P3868 [TJOI2009]猜数字]]></title>
      <url>/2019/06/23/p3868/</url>
      <content type="html"><![CDATA[<p>现有两组数字，每组k个，第一组中的数字分别为：a1，a2，…，ak表示，第二组中的数字分别用b1，b2，…，bk表示。其中第二组中的数字是两两互素的。求最小的非负整数n，满足对于任意的i，n - ai能被bi整除。</p>
<a id="more"></a>
<p><strong>中国剩余定理的裸题</strong></p>
<p>题目要求的是最小的非负整数$n$满足$b_{i}|n-a_{i}(1\le i\le k)$</p>
<p>将其转化成同余问题的方程组</p>
<p>$\begin{cases}n&amp;\equiv &amp;a_{1}(mod b_{1})\\n&amp;\equiv &amp;a_{2}(mod b_{2})\\n&amp;\equiv &amp;a_{3}(mod b_{3})\\…&amp;…&amp;\\n&amp;\equiv &amp;a_{k}(mod b_{k})\end{cases}$</p>
<p>那么如何去求呢，这就要用到<strong>中国剩余定理</strong>了</p>
<p>我们设$M=\prod_{i=1}^{n}b_{i}$，$m_{i}=M/b_{i}$</p>
<p>$x_{i}$是方程$m_{i}\times x_{i}\equiv 1(mod b_{i})$的一个解，可以由扩展欧几里得算法求得</p>
<p>那么答案$n$就为$\sum_{i=1}^{n}a_{i}\times m_{i}\times x_{i}$</p>
<p>为什么呢，我们来证明一下</p>
<p>因为$m_{i}=M/b_{i}$是除了$b_{i}$之外的所有$b$的积</p>
<p>所以$\forall k\ne i,a_{i}\times m_{i}\times x_{i}\equiv 0(mod m_{k})$</p>
<p>由$t_{i}$是方程$m_{i}\times x_{i}\equiv 1(mod b_{i})$，的一个解得$a_{i}\times m_{i}\times x_{i}\equiv a_{i}(mod b_{i})$</p>
<p>代入$n=\sum_{i=1}^{n}a_{i}\times m_{i}\times x_{i}$，原方程组成立。</p>
<p>而我们要求的是最小非负整数解，那么只需要将$n$取模$M$使其落在0~M-1的范围内即可。</p>
<p>这道题的坑点在于直接相乘的话会爆$long long$，那么就需要用到快速乘了，思想跟快速幂一样，写起来也很简单</p>
<p>还有一点就是对于负数的情况要加上$M$再模$M$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> k,a[<span class="number">20</span>],b[<span class="number">20</span>],M=<span class="number">1</span>,ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> <span class="comment">//扩展欧几里得算法求线性同余方程的解</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		exgcd(b,a%b,x,y);</span><br><span class="line">		<span class="keyword">int</span> t=x;</span><br><span class="line">		x=y;</span><br><span class="line">		y=t-a/b*y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span>  <span class="comment">//快速乘</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">	x=(x%M+M)%M;    </span><br><span class="line">	y=(y%M+M)%M;    <span class="comment">//先将负数转化为正数</span></span><br><span class="line">	<span class="keyword">while</span> (y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (y&amp;<span class="number">1</span>)s=(s+x)%M;</span><br><span class="line">		x=x*<span class="number">2</span>%M;</span><br><span class="line">		y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b[i],M*=b[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> m=M/b[i],x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">		exgcd(m,b[i],x,y);</span><br><span class="line">		ans=(ans+cc(cc(a[i],m),x))%M;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 中国剩余定理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一周总结19.6.17-19.6.21]]></title>
      <url>/2019/06/21/week2/</url>
      <content type="html"><![CDATA[<p>回到$slyz$高中部的第一周，感觉一个星期过得好快啊，<del>还想着趁那些dalao不在偷偷多学点</del>，本来以为会很不愉快，但是也挺快乐的。</p>
<a id="more"></a>
<p>周一回来把<del>咕了一个月</del>的树剖题给调好了(到底是哪出锅我也记不清了)，就开始学<strong>平衡树</strong>，先看的二叉搜索树$(BST)$，然后是$Treap$，把板子题打了，之前听说有个叫$Splay$的，就开始学，学着学着就自闭了，本来对平衡树的旋转就理解的有点乱，再一看那个彻底懵逼了，于是弃疗……</p>
<p>打完平衡树的题(其实都很裸)，就往后学$dp$了，刚开始是区间$dp$，这个还好，以前也写了一些这方面的题，挺好理解。</p>
<p>接下来是<strong>树形$dp$</strong>，刚开始对这种$dp$方式不太习惯，因为自己没写过递归或者说是记忆化搜索(也不能算是记忆化搜索)，但是本质都是从已知往未知转移，只不过树形$dp$是先到叶子节点(相当于$f[1]$由$f[0]$转移过来)，这样也就能明白了。</p>
<p>然后是<strong>数位$dp$</strong>，一本通给的那道引例好难(自我感觉)，自己yy了一晚上，后面的题就都是板子了，主要思想就是从最高位到最低位进行记忆化搜索，把各种状态带上，更新就完事了。</p>
<p>到了<strong>状压$dp$</strong>，这个难度不大，对状态压缩一下，变成一串数(通常是二进制)，这样二维就变一维了，转移方程也一般是用$f[i][j]$表示前$i$个用第$j$种状态的最优解，<del>转移随便转移就好了</del>。</p>
<p>最后是$dp$的两种优化方式，第一个是<strong>单调队列优化</strong>，为了学单调队列，专门跑去写了滑动窗口，单调队列是个很强大的东西，可以在队尾插入和弹出，队头弹出，队头访问，有些转移方程长成$fi=max(fj-sj)+si$之类的，其中$j$在一个长度固定的区间，那么中间的$max$就可以用一个单调队列来维护，时间复杂度就可以降一个方。</p>
<p><strong>斜率优化</strong>也不是很难，是对于那些转移方程长成$fi=max(fj+si+sj+ti\times tj)$这样的，中间有个$ti\times tj$，那么我们可以把这个化为一个形如$y=kx+b$的一次函数，其中只含$j$的项为$y$，含$i*j$的项为$kx$，这里面含$i$的为$k$，含$j$的为$x$，其他的就是$y$了，会有很多决策点，它们会长成像凸包一样的东西，当我们将一次函数平移，第一个碰到的点就是最优决策点了，这种题一般会有几种情况：1.$k$是单调的，决策点有顺序，那么就可以用单调队列维护；2.$k$不单调，我们要用队列来维护凸包，每次找最优决策点时二分查找，复杂度就多了个$log$；3.决策点也无顺序，那就要用一些数据结构来维护，比如平衡树。</p>
<p>写完了$dp$，去数论开了个头，把快速幂和质数给写了写，有的以前自己会，但再看之后再写一遍板子真的有不同的理解，数论一直是自己的弱项，希望下周能学完并有所提高。</p>
<p>来句话鼓励自己QAQ</p>
<h3 id="我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。"><a href="#我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。" class="headerlink" title="我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。"></a>我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。</h3>]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P2704 [NOI2001]炮兵阵地]]></title>
      <url>/2019/06/19/p2704/</url>
      <content type="html"><![CDATA[<p>司令部的将军们打算在N<em>M的网格地图上部署他们的炮兵部队。一个N</em>M的地图由N行M列组成，地图的每一格可能是山地（用“H” 表示），也可能是平原（用“P”表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上能攻击到上下左右两个格</p>
<p>现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。</p>
<a id="more"></a>
<p>这道题一看$M$那么小，每个点只有两种状态，那就肯定是状压$dp$了，至于什么是状压$dp$，简单来说就是将连续的一串数据转化成一个数的形式来存，这道题就可以将每一行都转化为一个二进制数，用$1$表示选，用$0$表示不选。但是因为还有平原和山地这样的限制条件，我们就可以将这个条件存下来，用$1$表示平原，即为可以放；用$0$表示山地，即为不可以放。然后我们对每种放的状态预处理出来，写出转移方程就可以$dp$了。（很多状压$dp$题都可以这么做）</p>
<p>刚开始我做的时候是用$f[i][j]$表示第$i$行的排列方式为$j$时，前$i$行的最大炮兵数，写出状态转移方程：$f[i][j]=max(f[i-1][k])+num[j]$，其中$k$为第$i-1$行的合法的一种排列，$num[j]$表示一行中第$j$种排列的炮兵数，然后枚举$i-1$行的状态，即为$k$；$i-2$行的状态。这样做显然是不行的，因为有的不合法的情况用来更新答案了。(也就我这样的zz会想出这么sb的做法）</p>
<p>所以我们考虑加一维，来维护第$i-1$行的状态，那么$f[i][j][k]$表示第$i$行的排列方式为$j$时，且第$i-1$行的排列方式为$k$时，前$i$行的最大炮兵数，方程也很好写:$f[i][j][k]=max(f[i-1][k][h])+num[j]$，其中$h$为第$i-2$行的合法的一种排列，初始化：$f[1][i][0]=num[i]$（$i$的这种排列合法），$dp$时注意下在第$2$行时用$f[i-1][k][0]$比较就行了，然后这道题做完了。</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,goal[<span class="number">500</span>],zh[<span class="number">200</span>],f[<span class="number">200</span>][<span class="number">500</span>][<span class="number">500</span>],state[<span class="number">5000</span>],cnt,num[<span class="number">5000</span>],ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)</span><br><span class="line">		<span class="keyword">if</span> (!(i&amp;(i&lt;&lt;<span class="number">1</span>))&amp;&amp;!(i&amp;(i&lt;&lt;<span class="number">2</span>)))  <span class="comment">//如果这个格子放炮兵，那么四周不能放，四周再往外一格也不能放，所以将i按位与i左移1位和左移两位</span></span><br><span class="line">		&#123;</span><br><span class="line">			state[++cnt]=i;</span><br><span class="line">			<span class="keyword">int</span> x=i;</span><br><span class="line">			<span class="keyword">while</span> (x)</span><br><span class="line">			&#123;</span><br><span class="line">				num[cnt]+=x%<span class="number">2</span>;   <span class="comment">//统计这种排列方案的炮兵数</span></span><br><span class="line">				x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">char</span> x;</span><br><span class="line">	zh[<span class="string">'P'</span>]=<span class="number">1</span>;</span><br><span class="line">	zh[<span class="string">'H'</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			goal[i]=goal[i]*<span class="number">2</span>+zh[x];   <span class="comment">//把题目中的限制表示的二进制转换为十进制</span></span><br><span class="line">		&#125;</span><br><span class="line">	make();     <span class="comment">//预处理出这一行可行的排列</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">		<span class="keyword">if</span> ((state[i]|goal[<span class="number">1</span>])==goal[<span class="number">1</span>])</span><br><span class="line">			f[<span class="number">1</span>][i][<span class="number">0</span>]=num[i];     <span class="comment">//初始化</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=cnt;k++)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> h=<span class="number">1</span>;h&lt;=cnt;h++)</span><br><span class="line">				&#123;</span><br><span class="line">				    <span class="keyword">if</span> (state[j]&amp;state[k])<span class="keyword">continue</span>;      </span><br><span class="line">                    <span class="keyword">if</span> (state[k]&amp;state[h])<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (state[h]&amp;state[j])<span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//前三个均为上下不相邻</span></span><br><span class="line">                    <span class="keyword">if</span> ((state[j]|goal[i])!=goal[i])<span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> ((state[k]|goal[i<span class="number">-1</span>])!=goal[i<span class="number">-1</span>])<span class="keyword">continue</span>;   </span><br><span class="line">                    <span class="keyword">if</span> ((state[h]|goal[i<span class="number">-2</span>])!=goal[i<span class="number">-2</span>])<span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//后三个为符合放置在平地上</span></span><br><span class="line">					<span class="keyword">if</span> (i==<span class="number">2</span>)f[i][j][k]=max(f[i][j][k],f[i<span class="number">-1</span>][k][<span class="number">0</span>]+num[j]);    <span class="comment">//第二行时用来更新状态的第一行的f没有上一行，所以特别处理一下</span></span><br><span class="line">					f[i][j][k]=max(f[i][j][k],f[i<span class="number">-1</span>][k][h]+num[j]);</span><br><span class="line">				&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">			ans=max(ans,f[n][i][j]);  <span class="comment">//在最后一行和倒数第二行的所有排列中取个最大值</span></span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 状压dp </tag>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UVA302 John's trip]]></title>
      <url>/2019/05/14/uva302/</url>
      <content type="html"><![CDATA[<p>John有很多朋友住在不同的街，想去拜访每位朋友，同时希望走的路最短。因为道路很窄，John在一条路上不能往回走。</p>
<p>John希望从家出发，拜访完所有的朋友之后回到自己的家，且总路程最短。John意识到如果可以每条路径都走一次，然后返回起点，应该是最短的路径。写一个程序帮助John找到这样的路径。</p>
<p>给出的每条街连接两个路口，最多有1995条街（编号从1到n），44个路口（编号从1到m）。</p>
<a id="more"></a>
<p>裸的欧拉回路题，可以不用$dfs$。</p>
<p>我们用两个栈，一个用来模拟，一个用来记答案。因为答案要求保证字典序最小的那一组，所以我们先对与每个点相连的点按从小到大排序，这样先选编号小的点，就可以保证找到的第一组答案就是字典序最小的那一组答案了。</p>
<p><strong>小优化</strong>：当我们访问完一条边后，把当前选的这个点连的边删除，这样就可以保证每次访问的边都是未访问过的边了，时间复杂度也由$O(N×M)$降为了$O(N+M)$。</p>
<p>还有最要注意的一点就是每一组解行末无空格。（被卡了好久= =）</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a><strong>Code</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to,id;</span><br><span class="line">&#125;stk[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> st,d[<span class="number">50</span>],n,ans[<span class="number">10000</span>],num,top,vis[<span class="number">10000</span>],m;  <span class="comment">//d存每个点的度,如果有度数是奇数的点，那么肯定无欧拉回路.</span></span><br><span class="line"><span class="built_in">vector</span> &lt;edge&gt; a[<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(edge x,edge y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.id&lt;y.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler</span><span class="params">(<span class="keyword">int</span> s)</span>       <span class="comment">//找欧拉回路</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stk[++top].to=s;    <span class="comment">//模拟栈</span></span><br><span class="line">	<span class="built_in">vector</span> &lt;edge&gt;::iterator it;</span><br><span class="line">	<span class="keyword">while</span> (top&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=stk[top].to,w=stk[top].id,fl=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (it=a[u].begin();it!=a[u].end();it++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v=(*it).to,i=(*it).id;</span><br><span class="line">			<span class="keyword">if</span> (!vis[i])     <span class="comment">//vis代替删边</span></span><br><span class="line">			&#123;</span><br><span class="line">				fl=<span class="number">1</span>;</span><br><span class="line">				stk[++top].to=v;</span><br><span class="line">				stk[top].id=i;</span><br><span class="line">				vis[i]=<span class="number">1</span>; </span><br><span class="line">				<span class="keyword">break</span>;       <span class="comment">//进入下一层</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!fl)        <span class="comment">//回溯</span></span><br><span class="line">		&#123;</span><br><span class="line">			top--;</span><br><span class="line">			ans[++num]=w;    <span class="comment">//更新答案栈</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		a[i].clear(),d[i]=<span class="number">0</span>,vis[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1995</span>;i++)</span><br><span class="line">		vis[i]=<span class="number">0</span>;</span><br><span class="line">	num=<span class="number">0</span>;</span><br><span class="line">	m=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,y,z;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">	<span class="keyword">while</span> (x||y)</span><br><span class="line">	&#123;</span><br><span class="line">		clear();</span><br><span class="line">		<span class="keyword">int</span> fl=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;z;</span><br><span class="line">		n=max(x,y);</span><br><span class="line">		st=min(x,y);</span><br><span class="line">		m++;</span><br><span class="line">		a[x].push_back((edge)&#123;y,z&#125;);</span><br><span class="line">		a[y].push_back((edge)&#123;x,z&#125;);</span><br><span class="line">		d[x]++;</span><br><span class="line">		d[y]++;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		<span class="keyword">while</span> (x||y)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;z;</span><br><span class="line">			a[x].push_back((edge)&#123;y,z&#125;);</span><br><span class="line">			a[y].push_back((edge)&#123;x,z&#125;);</span><br><span class="line">			n=max(max(x,y),n);</span><br><span class="line">			d[x]++;</span><br><span class="line">			d[y]++;</span><br><span class="line">			m++;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">if</span> (d[i]%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="string">"Round trip does not exist."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">				fl=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="keyword">if</span> (!fl)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">				sort(a[i].begin(),a[i].end(),cmp);<span class="comment">//排序保证解的字典序最小</span></span><br><span class="line">			euler(st);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=num<span class="number">-1</span>;i&gt;=<span class="number">2</span>;i--)</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;ans[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 欧拉回路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SP41 WORDS1 - Play on Words]]></title>
      <url>/2019/05/13/sp41/</url>
      <content type="html"><![CDATA[<p>秘密的门里藏着一些字谜。一些考古学家希望打开这些门，因此他们需要解开这些字谜。由于没有任何其他方式（不要总想着暴力！）可以打开这扇门，这个字谜对我们来说尤其重要。 每一扇门上都有很多磁性的盘子，每一个盘子上面都写着一个单词。这些盘子必须要按照一种特殊的顺序排列，即除了第一个单词以外的每一个单词的首字母必须是前面一个单词的结尾字母。你的任务就是编写一个程序，测试给出的单词能否按照要求的顺序排列并且顺利地打开这扇门。<br>对每一个单词从首字母连一条到尾字母的有向边，然后判断是不是欧拉路径。</p>
<a id="more"></a>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>``` cpp</p>
<h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <iostream></iostream></h1><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <algorithm></algorithm></h1><h1 id="include-2"><a href="#include-2" class="headerlink" title="include "></a>include <vector></vector></h1><h1 id="include-3"><a href="#include-3" class="headerlink" title="include "></a>include <cstdio></cstdio></h1><h1 id="include-4"><a href="#include-4" class="headerlink" title="include "></a>include <queue></queue></h1><h1 id="include-5"><a href="#include-5" class="headerlink" title="include "></a>include <cstring></cstring></h1><p>using namespace std;<br>int t,n,in[50],to[50],cnt,vis[50],f[50];<br>char ch[2000];<br>vector <int> a[50];<br>void clear()<br>{<br>    for (int i=1;i&lt;=26;i++)<br>        vis[i]=f[i]=in[i]=to[i]=0,a[i].clear();<br>}<br>int bfs(int st)       //bfs判断基图是否连通<br>{<br>    queue <int> q;<br>    q.push(st);<br>    vector <int>::iterator it;<br>    vis[st]=1;<br>    int num=1;<br>    while (!q.empty())<br>    {<br>        int u=q.front();q.pop();<br>        for (it=a[u].begin();it!=a[u].end();it++)<br>        {<br>            int v=(*it);<br>            if (!vis[v])<br>                q.push(v),vis[v]=1,num++;<br>        }<br>    }<br>    int x=0;<br>    for (int i=1;i&lt;=26;i++)<br>        if (f[i])<br>            x++;<br>    if (num==x)<br>        return 1;<br>    return 0;<br>}<br>int main()<br>{<br>    cin&gt;&gt;t;<br>    while (t—)<br>    {<br>        clear();<br>        cin&gt;&gt;n;<br>        int fl1=0,fl2=0,fl3=0,st=0;<br>        for (int i=1;i&lt;=n;i++)<br>        {<br>            scanf(“%s”,ch+1);<br>            int l=strlen(ch+1),u=ch[1]-‘a’+1,v=ch[l]-‘a’+1;<br>            a[u].push_back(v);<br>            a[v].push_back(u);<br>            to[u]++;     //出度<br>            in[v]++;     //入度<br>            f[u]=1;<br>            f[v]=1;<br>            st=u;       //bfs时随便的一个起点<br>        }<br>        for (int i=1;i&lt;=26;i++)<br>            if (in[i]==to[i])<br>                fl3++;<br>            else<br>                if (in[i]==to[i]+1)<br>                    fl1++;<br>                else<br>                    if (in[i]+1==to[i])<br>                        fl2++;<br>        if ((fl3==24&amp;&amp;fl1&amp;&amp;fl2||fl3==26)&amp;&amp;bfs(st))  //判断欧拉路径<br>            cout&lt;&lt;”Ordering is possible.”&lt;&lt;endl;<br>        else<br>            cout&lt;&lt;”The door cannot be opened.”&lt;&lt;endl;<br>    }<br>    return 0;<br>}<br>~~~</int></int></int></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 欧拉路径 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[P2169 正则表达式]]></title>
      <url>/2019/05/12/p2169/</url>
      <content type="html"><![CDATA[<p>在Internet网络中的每台电脑并不是直接一对一连通的，而是某些电脑之间存在单向的网络连接，也就是说存在A到B的连接不一定存在B到A的连接，并且有些连接传输速度很快，有些则很慢，所以不同连接传输所花的时间是有大有小的。另外，如果存在A到B的连接的同时也存在B到A的连接的话，那么A和B实际上处于同一局域网内，可以通过本地传输，这样花费的传输时间为0。</p>
<p>现在小Z告诉你整个网络的构成情况，他希望知道从他的电脑（编号为1），到小X的电脑（编号为n）所需要的最短传输时间。</p>
<a id="more"></a>
<p>题意：给你一个带权有向图，如果两个点之间可以互相到达，那么他们之间的边权为$0$，求从起点$1$到$n$的最短路。</p>
<p>缩点+最短路</p>
<p>缩完点把在同一个强连通分量里的点边权设成$0$</p>
<p><strong>Code</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 250000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 99999999</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span> &lt;edge&gt; a[N];</span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> n,m,dfn[N],low[N],co[N],stk[N],top,num,cnt,dis[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span>   <span class="comment">//tarjan求强连通分量</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	low[u]=dfn[u]=++cnt;</span><br><span class="line">	stk[++top]=u;</span><br><span class="line">	<span class="built_in">vector</span> &lt;edge&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it=a[u].begin();it!=a[u].end();it++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=(*it).to;</span><br><span class="line">		<span class="keyword">if</span> (!dfn[v])</span><br><span class="line">		&#123;</span><br><span class="line">			tarjan(v);</span><br><span class="line">			low[u]=min(low[u],low[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">if</span> (!co[v])</span><br><span class="line">				low[u]=min(low[u],dfn[v]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (low[u]==dfn[u])</span><br><span class="line">	&#123;</span><br><span class="line">		co[u]=++num;       <span class="comment">//给强连通分量编号</span></span><br><span class="line">		<span class="keyword">while</span> (stk[top]!=u)</span><br><span class="line">			co[stk[top]]=num,top--;</span><br><span class="line">		top--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span>   <span class="comment">//单源最短路</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		dis[i]=INF;</span><br><span class="line">	dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	q.push(<span class="number">1</span>);</span><br><span class="line">	vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">vector</span> &lt;edge&gt;::iterator it;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> u=q.front();q.pop();</span><br><span class="line">		vis[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (it=a[u].begin();it!=a[u].end();it++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v=(*it).to,w=(*it).cost;</span><br><span class="line">			<span class="keyword">if</span> (co[u]==co[v])w=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (dis[v]&gt;dis[u]+w)</span><br><span class="line">			&#123;</span><br><span class="line">				dis[v]=dis[u]+w;</span><br><span class="line">				<span class="keyword">if</span> (!vis[v])</span><br><span class="line">					q.push(v),vis[v]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">int</span> x,y,z;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">		a[x].push_back((edge)&#123;y,z&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">if</span> (!dfn[i])</span><br><span class="line">			tarjan(i);</span><br><span class="line">	spfa();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,dis[n]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>偷懒写的$spfa$和$vector$QAQ</p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 缩点 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Trie与可持久化Trie]]></title>
      <url>/2019/04/28/Trie/</url>
      <content type="html"><![CDATA[<h5 id="经过两天的奋斗，我终于点满了Trie树的技能树"><a href="#经过两天的奋斗，我终于点满了Trie树的技能树" class="headerlink" title="经过两天的奋斗，我终于点满了Trie树的技能树"></a>经过两天的奋斗，我终于点满了Trie树的<del>技能树</del></h5><a id="more"></a>
<h4 id="Trie树（字典树）"><a href="#Trie树（字典树）" class="headerlink" title="Trie树（字典树）"></a>Trie树（字典树）</h4><p>顾名思义，对于一个字符串，将其各个字符建成树，其中包含一定的父子关系（第$i$个字符是第$i+1$个字符的父亲），像这样，当对若干个字符串进行建树操作时，两两字符串的公共部分就会沿着树走下来，在不同处分叉，<del>这个显然是很好理解的</del>。<br><figure class="image-box">
                <img src="/imgs/p9.png" alt title class>
                <p></p>
            </figure><br>我们看着个图，原先的Trie树已经有了$ABC$,$AC$,$BC$这三个串（根节点为空）。当要插入$CD$这个串时，由于原来的树没有以$C$为字节点的子树，那么就只能将这个串插到根节点下面；而插入$ACBD$这个串时，由于原树已经有了一条$AC$的路径，那么我们只需要把$BD$接到$C$后面即可。</p>
<p>这个操作看起来简单，其实用代码实现起来也是很简单的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *ch)</span>      <span class="comment">//trie[u][x]表示u节点的x字符指针指向的节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> u=<span class="number">0</span>,l=<span class="built_in">strlen</span>(ch+<span class="number">1</span>);<span class="comment">//u为初始指针指向根节点 </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x=ch[i]-<span class="string">'A'</span>;   <span class="comment">//每次取出字符串中的第i位 </span></span><br><span class="line">		<span class="keyword">if</span> (!trie[u][x])trie[u][x]=++tot;  <span class="comment">//如果Trie中没有x这个节点，那就插进去 </span></span><br><span class="line">		u=trie[u][x];      <span class="comment">//往下走 </span></span><br><span class="line">	&#125;</span><br><span class="line">	p[u]=<span class="number">1</span>;                <span class="comment">//给结尾打标记 </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么查询操作也是同理，从选取字符串的每一位，从树根往下遍历就可以了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> *ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	int u(0),l=strlen(ch+1);//u位初始指针指向根节点 </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> x=ch[i]-<span class="string">'A'</span>;   <span class="comment">//取出 </span></span><br><span class="line">		<span class="keyword">if</span> (!trie[u][x])<span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//指针指向空，表示匹配不成功，直接退出 </span></span><br><span class="line">		u=trie[u][x];     <span class="comment">//往下走 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p[u];          <span class="comment">//返回结尾标记值 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>时间复杂度：单次$O(l)$。空间复杂度：$O(\sum_{i=1}^{N}l[i]*B)$($B$为字符集大小)</p>
<p><strong>习题</strong></p>
<p><a href="https://www.luogu.org/problemnew/show/UVA11362" target="_blank" rel="noopener">Phone List</a></p>
<p>给出$N$个字符串，看是否有一个串$A$为串$B$的前缀。</p>
<p>因为我们在Trie树插入操作中已经对每一串字符串都打上了标记，所以满足答案的关系只有两种，一种是插入的串是之前的串的前缀，那么只要看在插入过程中是不是没有新增节点，另一种是插入的串包括之前的串，也就是之前的串是插入的串的前缀，这个只要看看有没有走到打了标记的点就好了。</p>
<p><a href="https://www.luogu.org/paste/7sof43mz" target="_blank" rel="noopener">完整代码</a> <del>把清空写炸了害我交了好几次</del></p>
<p><a href="https://www.luogu.org/problemnew/show/P2292" target="_blank" rel="noopener">L语言</a></p>
<p>给出$N$个单词，和$M$个句子，问每个句子中包含这些单词的最长前缀是多少。</p>
<p>考虑对着$M$个单词建一个Trie树，$f[i]$表示前$i$个字符是否可行，便可以每次访问$<a href="0\leq j&lt; l">j+1,l</a>$，在访问过程中访问到标记，就可以直接更新$f[i]$，复杂度$O(NM)$.</p>
<p><a href="https://www.luogu.org/paste/of99xobs" target="_blank" rel="noopener">完整代码</a> 不在$query$函数中更新$f[i]$复杂度是$O(N^2M)$，会TLE！</p>
<p><a href="https://www.luogu.org/problemnew/show/P2922" target="_blank" rel="noopener">秘密消息Secret Message</a></p>
<p>给出$N$个01串，和$M$个01串，问这$M$个串的每一个串中满足和这$N$个串其中的一个串有着相同的前缀（前者是后者的前缀或后者是前者的前缀）。</p>
<p>再用一个数组$q[u]$来记录经过$u$节点有多少个01串，用$p[u]$来记录以$u$节点结尾的01串有多少个，我们先每次往后访问，用$p[u]$来更新$ans$,答案显而易见也只有两种可能，一种是走到一个指向空的节点，这时候只要返回$ans$就好了，另一种是这个串包含了路径上的所有串，这时要返回$ans+q[u]-p[u]$（因为有重复计算，这个自己模拟下感性理解就好了）。</p>
<p><a href="https://www.luogu.org/paste/lt2r1lun" target="_blank" rel="noopener">完整代码</a> <del>没啥好说的emmmm</del></p>
<h4 id="01Trie"><a href="#01Trie" class="headerlink" title="01Trie"></a>01Trie</h4><p>Trie树就只能对着字符串<del>一顿胡乱操作</del>？答案肯定不是。有一类题，让你求出一些数中$A\oplus B$的最大值。我们很容易想到用枚举暴力去求，但是复杂度$O(N^2)$着实让人受不了，于是就可以用01Trie进行求解。</p>
<p>就拿刚才的题目——<a href="https://loj.ac/problem/10050" target="_blank" rel="noopener">最大异或数对</a>来说，考虑把所有的数转成二进制插入Trie树中，那么接下来有一种贪心的策略：因为对于两个二进制数，只有这一位上不同，也就是一个是$0$一个一个是$1$才会取$1$，否则取$0$，那么在找数的过程中贪心的走和当前位相反的那一位，如果相反那一位指向空，就只能走下面这一位，这样子就找到了序列中和这一个数最大的异或值，只需要从$[1,N]$的各个数找一个最大的答案即可。</p>
<p>这样说太抽象，我们看下面这张图：<br><figure class="image-box">
                <img src="/imgs/p10.png" alt title class>
                <p></p>
            </figure><br>我们把$9(1001)$，$7(0111)$，$5(0101)$，$2(0010)$依次插入树中（最高位补足0），当我们要找和$9$异或的最大值，只需要贪心的走反路就可以啦，没有反路那就只能往下走了。<del>感性理解感性理解</del></p>
<p>而由于题目的数据一般会<del>比较大</del>，我们需要建一个$30$位的01Trie。</p>
<p>代码实现起来也很简单</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	int u(0),an(0);      //an记录当前数x与序列中的数的异或最大值 </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">30</span>;i&gt;=<span class="number">0</span>;i--)   <span class="comment">//从高到低位走 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ch=(x&gt;&gt;i)&amp;<span class="number">1</span>;  <span class="comment">//取出 </span></span><br><span class="line">		<span class="keyword">if</span> (trie[u][!ch])u=trie[u][!ch],an+=<span class="number">1</span>&lt;&lt;i;  </span><br><span class="line">       <span class="comment">//如果可以走反路，就走反路，更新an </span></span><br><span class="line">		<span class="keyword">else</span> u=trie[u][ch];  <span class="comment">//走不了就只能往下走了 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> an; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时空复杂度：单次$O(log\text{值域})$，总共$O(Nlog\text{值域})$，已经可以满足很多题的需要了。</p>
<p><a href="https://www.luogu.org/paste/ns3th1xa" target="_blank" rel="noopener">完整代码</a> 一定要按题目数据来开树的长度！</p>
<p><strong>习题</strong></p>
<p><a href="https://loj.ac/problem/10051" target="_blank" rel="noopener">Nikitosh 和异或</a></p>
<p>在一个有$N$个元素的序列$A$中，找出$(A[l1]\oplus A[l1+1]\oplus …\oplus A[r1])+(A[l2]\oplus A[l2+1]\oplus…\oplus A[r2])$的最大值，其中，$1\le l1\le r1&lt;l2\le r2\le N$。</p>
<p>设$l[i]$表示$1\le l\le r\le i$，最大的$A[l]\oplus A[l+1]\oplus…\oplus A[r]$，$r[i]$表示$i\le l\le r\le N$最大的$A[l]\oplus A[l+1]\oplus…\oplus A[r]$，那么答案为最大的$l[i]+r[i+1]$。</p>
<p>我们首先要知道一个异或的性质：对于一个序列$A$的区间$[l,r]$,都有$A[l]\oplus A[l+1]\oplus…\oplus A[r]=(A[1]\oplus A[2]\oplus…\oplus A[l-1])\oplus(A[1]\oplus A[2]\oplus…\oplus A[r])$</p>
<p>于是设$x[i]$表示$A[0]\oplus A[1]\oplus…\oplus A<a href="A[0]=0">i</a>$，所以$l[i]=max(x[i]\oplus x[j])(0\le j&lt;i)$，$r[i]=max(x[i]\oplus x[j])(i&lt;j\le N)$</p>
<p>然后这个题就很好做啦。</p>
<p><a href="https://www.luogu.org/paste/6dq7s81k" target="_blank" rel="noopener">完整代码</a> <del>数组开大千万别RE</del></p>
<p><a href="https://www.luogu.org/problemnew/show/P4551" target="_blank" rel="noopener">最长异或路径</a></p>
<p>给定一棵$N$个点的带权树，结点下标从$1$开始到$N$。寻找树中找两个结点，求最长的异或路径。（异或路径指的是指两个结点之间唯一路径上的所有边权的异或）</p>
<p><del>题意感性理解好了</del></p>
<p>先$dfs$跑出所有节点到根节点的异或路径丢进$xorr$数组中，问题便转化成了求最大的$xorr[i]\oplus xorr<a href="i,j\in N,i\ne j">j</a>$，是不是似曾相识呢，没错，这道题就变成了最大异或数对啦！</p>
<p><a href="https://www.luogu.org/paste/kntcyi7a" target="_blank" rel="noopener">完整代码</a> <del>我竟然写炸了快读？？？</del></p>
<h4 id="可持久化数据结构——主席树"><a href="#可持久化数据结构——主席树" class="headerlink" title="可持久化数据结构——主席树"></a>可持久化数据结构——主席树</h4><p>主席树？？？？？这个Trie有什么关系吗？别着急，当然是有关系啦。<del>没关系我也不会去学啊（大雾</del></p>
<p>主席树，全名可持久化线段树，是一种支持对历史版本修改和访问的数据结构，主要思想就是对其每个版本都建一棵线段树。</p>
<p>然而这样子空间和时间都受不了，而我们想每次建新的线段树过程中，并不是所有元素都不一样，许多元素都是上个版本继承过来的，于是只要把<del>这些碎片拼在一起</del>，就是主席树了。</p>
<figure class="image-box">
                <img src="/imgs/p11.png" alt title class>
                <p></p>
            </figure>
<p>我们看这个图片，假设黑色的是第一个版本，红色的是第二个版本，也就是新的版本，当新建红色这个树时，只需要继承上个版本的一些元素，再修改并重新拼接元素就可以了，这样时空复杂度都是很优秀的。</p>
<p>板子题——<a href="https://www.luogu.org/problemnew/show/P3919" target="_blank" rel="noopener">可持久化数组</a></p>
<p>基本操作就拿这个题来说吧。</p>
<p><strong>存储变量</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ff</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> lc,rc,val;	  <span class="comment">//存放左子树，右子树，权值</span></span><br><span class="line">&#125;s[<span class="number">40000500</span>];</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">40000500</span>],rt[<span class="number">40000500</span>],node_cnt; <span class="comment">//a表示序列，rt是根，node_cnt是节点数</span></span><br></pre></td></tr></table></figure></p>
<p><strong>建树</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	k=++node_cnt;     <span class="comment">//新的一个节点 </span></span><br><span class="line">	<span class="keyword">if</span> (l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		s[k].val=a[l];</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	build(s[k].lc,l,mid);   <span class="comment">//更新左子树 </span></span><br><span class="line">	build(s[k].rc,mid+<span class="number">1</span>,r); <span class="comment">//更新右子树 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>和线段树的建树方式差不了多少，就不详细说了。</p>
<p><strong>修改</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> root=++node_cnt;    <span class="comment">//更新也要新建节点 </span></span><br><span class="line">	s[root]=s[k];           <span class="comment">//继承  </span></span><br><span class="line">	<span class="keyword">if</span> (l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		s[root].val=cnt;    <span class="comment">//点修改 </span></span><br><span class="line">		<span class="keyword">return</span> root;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (x&lt;=mid)s[root].lc=change(s[root].lc,l,mid,x,cnt); <span class="comment">//更新左子树 </span></span><br><span class="line">	<span class="keyword">else</span> s[root].rc=change(s[root].rc,mid+<span class="number">1</span>,r,x,cnt);     <span class="comment">//更新右子树 </span></span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>也和线段树是差不多的。</p>
<p><strong>访问</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l==r)<span class="keyword">return</span> s[k].val;    <span class="comment">//点访问 </span></span><br><span class="line">	<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (x&lt;=mid)<span class="keyword">return</span> query(s[k].lc,l,mid,x);<span class="comment">//如果在左边，就找左子树 </span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> query(s[k].rc,mid+<span class="number">1</span>,r,x);    <span class="comment">//如果在右边，就找右子树 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这就是主席树啦！是不是很<del>简单</del>。</p>
<p><a href="https://www.luogu.org/paste/6f8i1ru9" target="_blank" rel="noopener">完整代码</a> 我再也不乱用没返回值的函数了，然后再次感谢<a href="https://www.luogu.org/discuss/show/111913" target="_blank" rel="noopener">评论区</a>的大佬：<a href="https://www.luogu.org/space/show?uid=22136" target="_blank" rel="noopener">qwaszx</a>（dsq）,<a href="https://www.luogu.org/space/show?uid=30036" target="_blank" rel="noopener">Mital</a>。</p>
<p>另一道板子题——<a href="https://www.luogu.org/problemnew/show/P3834" target="_blank" rel="noopener">可持久化线段树1</a></p>
<p>先对序列排序+离散化，然后在离散化的数组的基础下建一颗空的主席树，对于每一个区间$[1,i]$插入到主席树，访问的时候只要将主席树$[1,r]-[1,l-1]$就是区间$[l,r]$了，推荐去看这篇<a href="https://www.luogu.org/blog/LpyNowlover/solution-p3834" target="_blank" rel="noopener">博客</a>，因为我不太会讲。<del>还不是没理解</del></p>
<p><a href="https://www.luogu.org/paste/f3kmuspq" target="_blank" rel="noopener">完整代码</a> 数组一定不要开小了！</p>
<h4 id="可持久化Trie"><a href="#可持久化Trie" class="headerlink" title="可持久化Trie"></a>可持久化Trie</h4><p>学完主席树，就可以学可持久化Trie啦，我们先看这道题——<a href="https://www.luogu.org/problemnew/show/P4735" target="_blank" rel="noopener">最大异或和</a></p>
<p>有一个序列$A$，每次可以进行两种操作，一是在序列尾插入一个数，序列长度$N$变为$N+1$，二是在区间$[l,r]$中找到一个$p$,满足$l\le p\le r$,并使得$A[p]\oplus A[p+1]\oplus…\oplus A[N]\oplus x$最大，输出这个最大值。</p>
<p>首先，我们把这个式子拆开，也就变成了$(A[1]\oplus A[2]\oplus…\oplus A[N])\oplus(A[1]\oplus A[2]\oplus…\oplus A[p-1])\oplus x$，<del>似乎很简单</del>，但是这道题还有一个在末尾插入的操作，就需要我们用到可持久化Trie了。</p>
<p>其实可持久化Trie和主席树的思想是类似的，实现方式也有相同之处，就是对每一个前缀异或建一个01Trie，该继承的继承，该修改的修改，这样就完成了。</p>
<p><strong>插入</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="keyword">int</span> rt=root[node_cnt];      <span class="comment">//取出上一个根节点的信息</span></span><br><span class="line">    root[++node_cnt]=++node;    <span class="comment">//新建节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">24</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ch=(x&gt;&gt;i)&amp;<span class="number">1</span>;     <span class="comment">//取出</span></span><br><span class="line">        size[node]=size[rt]+<span class="number">1</span>; <span class="comment">//长度增加</span></span><br><span class="line">        trie[node][ch]=node+<span class="number">1</span>; <span class="comment">//给节点编号</span></span><br><span class="line">        trie[node][!ch]=trie[rt][!ch]; <span class="comment">//继承上一个根节点的部分子树信息</span></span><br><span class="line">        rt=trie[rt][ch];     <span class="comment">//往下走</span></span><br><span class="line">        node++;</span><br><span class="line">    &#125;</span><br><span class="line">    size[node]=size[rt]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>访问</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lc=root[l],rc=root[r],ans=<span class="number">0</span>; <span class="comment">//取出左右子树</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">24</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ch=(x&gt;&gt;i)&amp;<span class="number">1</span>;        <span class="comment">//取出</span></span><br><span class="line">        <span class="keyword">if</span> (size[trie[rc][!ch]]-size[trie[lc][!ch]]&gt;<span class="number">0</span>) </span><br><span class="line">        		<span class="comment">//如果反路有路可走</span></span><br><span class="line">            lc=trie[lc][!ch],rc=trie[rc][!ch],ans|=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            	<span class="comment">//走反路并更新答案</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lc=trie[lc][ch],rc=trie[rc][ch];  </span><br><span class="line">            	<span class="comment">//否则只能往下走</span></span><br><span class="line">    &#125;</span><br><span class="line">    write(ans);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>时空复杂度：总共：$O(31(N+M))$</p>
<p><del>代码应该是比较好理解的</del></p>
<p>对于这个题，每次插入一次前缀异或，共$N+$访问中位添加操作的次数，访问时只要访问区间$[l-1,r]$的答案就好了。</p>
<p><a href="https://www.luogu.org/paste/f4btmtyw" target="_blank" rel="noopener">完整代码</a> 不会卡常的我写了点奇怪的卡常+$O2$竟然跑到了最优解$Rank57$？？？</p>
<p>今年省选还考了一道Trie树的题——<a href="https://www.luogu.org/problemnew/show/P5283" target="_blank" rel="noopener">异或粽子</a>，相信参加省选的dalao看到这么简单的题都切掉了，我这个初四蒟蒻反正看到题是不会做。</p>
<p>这道题其实是让你求在长度为$N$的序列$A$中，前$K$大的$A[l]\oplus A[l+1]\oplus…\oplus A<a href="1\le l\le r\le N">r</a>$，的和。</p>
<p><del>反正我刚开始是不会做</del>，在<a href="https://www.luogu.org/space/show?uid=22136" target="_blank" rel="noopener">dsq</a>神仙的帮助和指点下，<del>彻底的大彻大悟</del>。</p>
<p>其实就是先对序列$A$进行一个前缀异或得到序列$sum$，然后只要求$K$对最大的$sum[i]\oplus sum<a href="0\le i\le j\le N">j</a>$，就好了。</p>
<p>那么我们该怎么求呢，在我<del>迷茫无助之时</del>，dsq给我指点了道题<a href="https://www.luogu.org/problemnew/show/P1631" target="_blank" rel="noopener">序列合并</a>。</p>
<p>拿这道题来说，我们要对序列$A$，$B$升序排序，然后将$A[i]+B[1]$丢进小根堆中，每次取出堆顶，然后把$A[i]+B[2]$丢进去，如果丢过了，那就丢$A[i]+B[3]$，同理往下，就做完啦。</p>
<p>回到这道题，仔细一样是不是和那道题的思想一样呢？我们用堆存值，编号（也就是$i$）和第几大就好了。</p>
<p>可是怎么求第$k$大的值呢？我们依旧建一个01Trie，访问便用到了平衡树（然而我并不会平衡树）的思想，在建树的时候多存一个$size[u]$记录$u$的子树大小，在访问时看能不能走反路，如果可以走，那就要看看$k$和$size[trie[u][!ch]]$大小，如果$k\le size[trie[u][!ch]]$,那么答案在反着的那条路径，我们就走，并更新$ans$值，否则答案就在不走反的那条路径，走，并且$k$要减去$size[trie[u][!ch]]$，这个就很显然了。</p>
<p>也可以选择去看dsq的<a href="https://www.luogu.org/blog/qwaszx/solution-p5283" target="_blank" rel="noopener">题解</a>。</p>
<p><a href="https://www.luogu.org/paste/24pm13in" target="_blank" rel="noopener">完整代码</a> 一定要开longlong</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Trie </tag>
            
            <tag> 可持久化Trie </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P1168 中位数]]></title>
      <url>/2019/03/27/p1168/</url>
      <content type="html"><![CDATA[<p>给一个序列a，求前1,3,5……数的中位数</p>
<a id="more"></a>
<p>用$S[]$来存$Ai$这个数出现了几次，但是$Ai&lt;=10^9$,如果直接建好树，那就直接爆掉了。所以我们动态开点，就要每次插入一个路径，如果路径上的数没出现过，那么就要插入这个点。当读进去一个数$X$，看有没有到叶子节点，如果到了，那么$S[k]++$，再更新节点，如果没到，那么就开一个新的点来存$X$出现的次数，所以我们需要两个数组$lc[]$和$rc[]$来存左右儿子。访问时也很简单，只要进行递归就行了，不过要注意，如果左儿子个数比要访问的$X$数小，也就是当$X&gt;S[lc[k]]$时，我们要访问右儿子，这时候是一个新的区间，所以$X$要变成$X-S[lc[k]]$。</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n,s[<span class="number">5000000</span>],lc[<span class="number">5000000</span>],rc[<span class="number">5000000</span>],nc;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!k)nc++,k=nc;</span><br><span class="line">    <span class="keyword">if</span> (l==r)</span><br><span class="line">    &#123;</span><br><span class="line">		s[k]++;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (v&lt;=mid)insert(lc[k],l,mid,v);</span><br><span class="line">    <span class="keyword">else</span> insert(rc[k],mid+<span class="number">1</span>,r,v);</span><br><span class="line">    s[k]=s[lc[k]]+s[rc[k]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r)<span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=s[lc[k]])<span class="keyword">return</span> query(lc[k],l,mid,x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(rc[k],mid+<span class="number">1</span>,r,x-s[lc[k]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,rt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        insert(rt,<span class="number">1</span>,N,x);</span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;query(<span class="number">1</span>,<span class="number">1</span>,N,(i+<span class="number">1</span>)/<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码丑见谅qwq"><a href="#代码丑见谅qwq" class="headerlink" title="代码丑见谅qwq"></a>代码丑见谅qwq</h3>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 动态开点 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P1198 [JSOI2008]最大数]]></title>
      <url>/2019/03/21/p1198/</url>
      <content type="html"><![CDATA[<p>现在请求你维护一个数列(初始数列为空)，要求提供以下两种操作：</p>
<p>1、 查询操作。</p>
<p>功能：查询当前数列中末尾L个数中的最大的数，并输出这个数的值。</p>
<p>2、 插入操作。</p>
<p>功能：将n加上t，其中t是最近一次查询操作的答案（如果还未执行过查询操作，则t=0)，并将所得结果对一个固定的常数D取模，将所得答案插入到数列的末尾。</p>
<a id="more"></a>
<h3 id="如何每一次在末尾插入一个数并维护最大值"><a href="#如何每一次在末尾插入一个数并维护最大值" class="headerlink" title="如何每一次在末尾插入一个数并维护最大值"></a>如何每一次在末尾插入一个数并维护最大值</h3><p>因为一共有$M$次操作，所以最多也只有可能$M$个数，那么当插入第$Q$个数时我们就把它放在第$Q$个位置，这样子就解决了插入操作。</p>
<p>查询也是很简单的，之前我们把每个数放在了末尾，现在放在了前面，所以每次只要查询从最后一个有数的位置往前$L$个位置，也就是$[Q-L+1,Q]$。</p>
<p><strong>这样这道题就变成了一道单点修改区间和的板子题辣~!</strong></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> ma[<span class="number">8000001</span>],ad[<span class="number">8000001</span>],m,d,t,q,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ma[k]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r)<span class="keyword">return</span> ma[k]=v;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid)insert(k&lt;&lt;<span class="number">1</span>,l,mid,x,v);</span><br><span class="line">    <span class="keyword">else</span> insert(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,v);</span><br><span class="line">    ma[k]=max(ma[k&lt;&lt;<span class="number">1</span>],ma[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">que</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;=x&amp;&amp;r&lt;=y)<span class="keyword">return</span> ma[k];</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;=mid)ans=max(ans,que(k&lt;&lt;<span class="number">1</span>,l,mid,x,y));</span><br><span class="line">    <span class="keyword">if</span> (y&gt;mid)ans=max(ans,que(k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y));</span><br><span class="line">    ma[k]=max(ma[k&lt;&lt;<span class="number">1</span>],ma[k&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m&gt;&gt;d;</span><br><span class="line">    <span class="keyword">int</span> a1;</span><br><span class="line">    n=m;</span><br><span class="line">    <span class="comment">//build(1,1,n);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ch&gt;&gt;a1;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">'A'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            q++;</span><br><span class="line">            insert(<span class="number">1</span>,<span class="number">1</span>,n,q,(a1+t)%d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            t=que(<span class="number">1</span>,<span class="number">1</span>,n,q-a1+<span class="number">1</span>,q);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>代码丑见谅qwq</strong></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线段树学习笔记]]></title>
      <url>/2019/03/18/seg/</url>
      <content type="html"><![CDATA[<p>很久之前写的学习笔记，就搬过来了</p>
<a id="more"></a>
<h4 id="Q-线段树是什么"><a href="#Q-线段树是什么" class="headerlink" title="Q:线段树是什么?"></a>Q:线段树是什么?</h4><h4 id="A-一种数据结构，支持-O-log-N-修改和查询区间，所以在-N-的序列-M-次查询下，复杂度只有-O-Mlog-N-，相比起朴素算法的-O-N-查询和修改，优秀的很多。"><a href="#A-一种数据结构，支持-O-log-N-修改和查询区间，所以在-N-的序列-M-次查询下，复杂度只有-O-Mlog-N-，相比起朴素算法的-O-N-查询和修改，优秀的很多。" class="headerlink" title="A:一种数据结构，支持$O(log(N))$修改和查询区间，所以在$N$的序列$M$次查询下，复杂度只有$O(Mlog(N))$，相比起朴素算法的$O(N)$查询和修改，优秀的很多。"></a>A:一种数据结构，支持$O(log(N))$修改和查询区间，所以在$N$的序列$M$次查询下，复杂度只有$O(Mlog(N))$，相比起朴素算法的$O(N)$查询和修改，优秀的很多。</h4><hr>
<h4 id="那么怎么实现呢？"><a href="#那么怎么实现呢？" class="headerlink" title="那么怎么实现呢？"></a>那么怎么实现呢？</h4><p>我们不妨考虑一种下面这样的结构</p>
<figure class="image-box">
                <img src="/imgs/p4.png" alt title class>
                <p></p>
            </figure>
<p><del>怎么样，是不是很像一棵完全二叉树</del>，这样子不难看出复杂度是$O(log(N))$级别的，但是要注意的一点是，线段树的数组一定要开到$4N$！</p>
<h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p>对于这个题而言，我们用$su[4N]$数组来维护区间的和，那么此线段树可以通过递归的到，即$build(k<em>2,l,mid)$取得左儿子，$build(k</em>2+1,mid+1,r)$取得右儿子，当$l=r$时$su$便等于当前值$a[l]$。<strong>代码如下</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">build</span><span class="params">(ll k,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l==r)</span><br><span class="line">	&#123;</span><br><span class="line">		su[k]=a[l];</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	build(k*<span class="number">2</span>,l,mid);</span><br><span class="line">	build(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">	su[k]=su[k*<span class="number">2</span>]+su[k*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="区间加"><a href="#区间加" class="headerlink" title="区间加"></a>区间加</h3><p>如果说直接将v加到su里，那么肯定会tle,所以我们考虑用一个标记，即<strong>Lazy Tag</strong>,当要对区间$[x,y]$进行加法，那么我们给这段区间打上标记，$add[k]=v$，在之后的询问和修改中再把标记进行下放，这样子的复杂的仍然是$O(log(N))$。<strong>代码如下</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">add</span><span class="params">(ll k,ll l,ll r,ll v)</span>  <span class="comment">//打标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ad[k]+=v;</span><br><span class="line">	su[k]+=(r-l+<span class="number">1</span>)*v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pd</span><span class="params">(ll k,ll l,ll r,ll mid)</span>  <span class="comment">//下放标记</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!ad[k])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	add(k*<span class="number">2</span>,l,mid,ad[k]);</span><br><span class="line">	add(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,ad[k]);</span><br><span class="line">	ad[k]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">change</span><span class="params">(ll k,ll l,ll r,ll x,ll y,ll v)</span> <span class="comment">//区间加</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l&gt;=x&amp;&amp;r&lt;=y)<span class="keyword">return</span> add(k,l,r,v);</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	pd(k,l,r,mid);</span><br><span class="line">	<span class="keyword">if</span> (x&lt;=mid)change(k*<span class="number">2</span>,l,mid,x,y,v);</span><br><span class="line">	<span class="keyword">if</span> (mid&lt;y)change(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y,v);</span><br><span class="line">	su[k]=su[k*<span class="number">2</span>]+su[k*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="区间询问和"><a href="#区间询问和" class="headerlink" title="区间询问和"></a>区间询问和</h3><p>这个就变得非常<del>简单</del>了，只要分别递归有关x和y的区间，加起来即可。<strong>注意在询问时也要下放标记。</strong> <strong>代码如下</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">que</span><span class="params">(ll k,ll l,ll r,ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l&gt;=x&amp;&amp;r&lt;=y)<span class="keyword">return</span> su[k];</span><br><span class="line">	ll mid=(l+r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">	pd(k,l,r,mid);</span><br><span class="line">	<span class="keyword">if</span> (x&lt;=mid)res+=que(k*<span class="number">2</span>,l,mid,x,y);</span><br><span class="line">	<span class="keyword">if</span> (mid&lt;y)res+=que(k*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="区间乘"><a href="#区间乘" class="headerlink" title="区间乘"></a>区间乘</h3><p>既然多了乘法，我们肯定就要再开一个$LazyTag:mu[4<em>N]$，<em>*开始时一定要初始化为1！</em></em>，而和加法的$LazyTag$不同的是在改变乘法$LazyTag$时，也要改变加法的$LazyTag$,即<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll k,ll l,ll r,ll v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	mu[k]=(mu[k]*v)%p;</span><br><span class="line">	ad[k]=(ad[k]*v)%p;</span><br><span class="line">	su[k]=(su[k]*v)%p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们再考虑$pushdown$操作，假如一个序列$[1,3,5,9,12]$,先在$[2,4]$区间加上一个数$k$,序列变为$[1,3+k,5+k,9+k,12]$,然后在$[3,5]$区间乘上一个数$r$,序列变为$[1,3+k,(5+k)<em>r,(9+k)</em>r,12<em>r]$,<br>由此看出，我们如果先$pushdown$加法，再$pushdown$乘法，会导致之前的加法也被乘一次，也就是$(a+b)</em>c$但$b$并不需要$<em>c$,也就是我们想要$a</em>c+b$,所以就要先$pushdown$乘法，再$pushdown$加法,即<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pudn(k,l,r,mid);<span class="comment">//乘法</span></span><br><span class="line">pd(k,l,r,mid);<span class="comment">//加法</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P4779 【模板】单源最短路径（标准版）]]></title>
      <url>/2019/02/23/p4779/</url>
      <content type="html"><![CDATA[<p>给你一个有向图，求出从这个点到其他所有点的最短路径（边权不为负）</p>
<a id="more"></a>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一看到最短路，就想到了spfa和dijkstra算法，于是<del>随随便便</del>就写了出来。</p>
<hr>
<h2 id="dijkstra怎么写？"><a href="#dijkstra怎么写？" class="headerlink" title="dijkstra怎么写？"></a>dijkstra怎么写？</h2><p>在一个有向图中，我们从起点出发，找出和它的距离最小（也就是dis）的点，再取出所有与这个点相连的边，做一遍松弛。</p>
<h3 id="什么是松弛？"><a href="#什么是松弛？" class="headerlink" title="什么是松弛？"></a>什么是松弛？</h3><p>如果从点u到点v的路径中，有一个中转点k使得<strong>k.cost+dis[v}&lt;dis[v]</strong>，那么就刷新<strong>dis[v]</strong>，即<strong>dis[v]=k.cost+dis[v]</strong>。<br><figure class="image-box">
                <img src="/imgs/p7.png" alt title class>
                <p></p>
            </figure></p>
<p>这样子dijkstra的时间复杂度为<strong>O(n^2)</strong>。</p>
<h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,st,dis[<span class="number">100001</span>],vis[<span class="number">100001</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;edge&gt; s[<span class="number">100001</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;edge&gt;::iterator it; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;st;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    	dis[i]=<span class="number">2147483647</span>;</span><br><span class="line">    edge a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b&gt;&gt;a.to&gt;&gt;a.cost;</span><br><span class="line">        s[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    dis[st]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> zd=<span class="number">2147483647</span>,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span> (!vis[j]&amp;&amp;dis[j]&lt;zd)</span><br><span class="line">            &#123;</span><br><span class="line">                zd=dis[j];</span><br><span class="line">                k=j;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        vis[k]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (it=s[k].begin();it!=s[k].end();it++)</span><br><span class="line">            <span class="keyword">if</span> (dis[k]+(*it).cost&lt;dis[(*it).to])</span><br><span class="line">                dis[(*it).to]=dis[k]+(*it).cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>可是</p>
<h4 id="关于spfa，它死了"><a href="#关于spfa，它死了" class="headerlink" title="关于spfa，它死了"></a>关于spfa，它死了</h4><p>在一些数据中很容易被卡掉，所以就不具体介绍了，如果想写spfa可以去<a href="https://www.luogu.org/problemnew/show/P3371" target="_blank" rel="noopener">P3371</a>。</p>
<h2 id="TLE！"><a href="#TLE！" class="headerlink" title="TLE！"></a>TLE！</h2><p>这是为什么呢，我们看下数据，<strong>n&lt;=1e5</strong>,如果单纯的跑<strong>dijkstra</strong>，而时间复杂度是<strong>O（n^2）</strong>，所以肯定会T。</p>
<p>我们考虑下对于每次找出与起点相连的dis最小的点，时间复杂度为<strong>O(n)</strong>,能不能优化呢？<strong>当然是可以</strong>。</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>这就要用到了我们<del>万能的</del><strong>堆</strong>，用堆访问最小的dis时间复杂度为<strong>O（log（n））</strong>，所以<strong>堆优化dijkstra</strong>的时间复杂的为<strong>O（(m+n)log（n））</strong>，这个题就够用了。<del>而这并不能掩盖我不会写别种的优化的事实。</del></p>
<h3 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> to,cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> u,d;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> cmp &amp;a) <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> d&gt;a.d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,st,vis[<span class="number">100001</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;edge&gt; s[<span class="number">100001</span>];</span><br><span class="line"><span class="built_in">vector</span> &lt;edge&gt;::iterator it;</span><br><span class="line">priority_queue &lt;cmp&gt; dis;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;st;</span><br><span class="line">    dis.push((cmp)&#123;st,<span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    	vis[i]=<span class="number">2147483647</span>;</span><br><span class="line">	edge a;</span><br><span class="line">	<span class="keyword">int</span> b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;b&gt;&gt;a.to&gt;&gt;a.cost;</span><br><span class="line">		s[b].push_back(a);</span><br><span class="line">	&#125;</span><br><span class="line">	vis[st]=<span class="number">0</span>;</span><br><span class="line">	dis.push((cmp)&#123;st,vis[st]&#125;);</span><br><span class="line">	<span class="keyword">while</span> (!dis.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		cmp k=dis.top();</span><br><span class="line">		dis.pop();</span><br><span class="line">		<span class="keyword">if</span> (vis[k.u]!=k.d)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span> (it=s[k.u].begin();it!=s[k.u].end();it++)</span><br><span class="line">			<span class="keyword">if</span> (vis[k.u]+(*it).cost&lt;vis[(*it).to])</span><br><span class="line">			&#123;</span><br><span class="line">				vis[(*it).to]=vis[k.u]+(*it).cost;</span><br><span class="line">				dis.push((cmp)&#123;(*it).to,vis[(*it).to]&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;vis[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>蒟蒻</strong>的第一篇题解，<strong>码风不好，讲的也不清楚</strong>，希望大家多多包涵。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最短路 </tag>
            
            <tag> 图论 </tag>
            
            <tag> dijkstra </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
